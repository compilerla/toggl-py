"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import re  # noqa: F401

from toggl.api_client import ApiClient


class ApprovalsApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_timesheet_setups(self, workspace_id, setup_id, **kwargs):  # noqa: E501
        """Delete a timesheet setup  # noqa: E501

        Delete a timesheet setup for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_timesheet_setups(workspace_id, setup_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int setup_id: Numeric ID of the timesheet setup (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_timesheet_setups_with_http_info(workspace_id, setup_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_timesheet_setups_with_http_info(workspace_id, setup_id, **kwargs)  # noqa: E501
            return data

    def delete_timesheet_setups_with_http_info(self, workspace_id, setup_id, **kwargs):  # noqa: E501
        """Delete a timesheet setup  # noqa: E501

        Delete a timesheet setup for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_timesheet_setups_with_http_info(workspace_id, setup_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int setup_id: Numeric ID of the timesheet setup (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "setup_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_timesheet_setups" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `delete_timesheet_setups`"
            )  # noqa: E501
        # verify the required parameter "setup_id" is set
        if self.api_client.client_side_validation and ("setup_id" not in params or params["setup_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `setup_id` when calling `delete_timesheet_setups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "setup_id" in params:
            path_params["setup_id"] = params["setup_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/timesheet_setups/{setup_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_timesheet_setups(self, workspace_id, **kwargs):  # noqa: E501
        """Get timesheet setups  # noqa: E501

        Get timesheet setups for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_timesheet_setups(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int member_ids: Numeric ID of the members, comma-separated
        :param int approver_ids: Numeric ID of the approvers, comma-separated
        :param str sort_field: Field used for sorting, default start_date.
        :param str sort_order: Sort order.
        :return: TimesheetsetupsGetPaginatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_timesheet_setups_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_timesheet_setups_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_timesheet_setups_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Get timesheet setups  # noqa: E501

        Get timesheet setups for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_timesheet_setups_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int member_ids: Numeric ID of the members, comma-separated
        :param int approver_ids: Numeric ID of the approvers, comma-separated
        :param str sort_field: Field used for sorting, default start_date.
        :param str sort_order: Sort order.
        :return: TimesheetsetupsGetPaginatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "member_ids", "approver_ids", "sort_field", "sort_order"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_timesheet_setups" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_timesheet_setups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []
        if "member_ids" in params:
            query_params.append(("member_ids", params["member_ids"]))  # noqa: E501
        if "approver_ids" in params:
            query_params.append(("approver_ids", params["approver_ids"]))  # noqa: E501
        if "sort_field" in params:
            query_params.append(("sort_field", params["sort_field"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/timesheet_setups",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="TimesheetsetupsGetPaginatedResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_timesheet_hours_handler(self, workspace_id, payload, **kwargs):  # noqa: E501
        """Get timesheets hours  # noqa: E501

        Get timesheet working hours and total tracked seconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_timesheet_hours_handler(workspace_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param TimesheetsPostTimesheetHoursPayload payload: Array of timesheet setup IDs and start dates. (required)
        :return: list[TimesheetsTimesheetHoursResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_timesheet_hours_handler_with_http_info(workspace_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_timesheet_hours_handler_with_http_info(workspace_id, payload, **kwargs)  # noqa: E501
            return data

    def get_workspace_timesheet_hours_handler_with_http_info(self, workspace_id, payload, **kwargs):  # noqa: E501
        """Get timesheets hours  # noqa: E501

        Get timesheet working hours and total tracked seconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_timesheet_hours_handler_with_http_info(workspace_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param TimesheetsPostTimesheetHoursPayload payload: Array of timesheet setup IDs and start dates. (required)
        :return: list[TimesheetsTimesheetHoursResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "payload"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_workspace_timesheet_hours_handler" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_timesheet_hours_handler`"
            )  # noqa: E501
        # verify the required parameter "payload" is set
        if self.api_client.client_side_validation and ("payload" not in params or params["payload"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `payload` when calling `get_workspace_timesheet_hours_handler`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "payload" in params:
            body_params = params["payload"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/timesheets/hours",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[TimesheetsTimesheetHoursResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_timesheet_time_entries_handler(self, workspace_id, setup_id, start_date, **kwargs):  # noqa: E501
        """Get timesheet time entries  # noqa: E501

        Get the time entries from within a timesheet timeframe.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_timesheet_time_entries_handler(workspace_id, setup_id, start_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int setup_id: Numeric ID of the timesheet setup. (required)
        :param str start_date: Start date (YYYY-MM-DD) of the timesheet. (required)
        :return: list[ModelsTimeEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_timesheet_time_entries_handler_with_http_info(
                workspace_id, setup_id, start_date, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_workspace_timesheet_time_entries_handler_with_http_info(
                workspace_id, setup_id, start_date, **kwargs
            )  # noqa: E501
            return data

    def get_workspace_timesheet_time_entries_handler_with_http_info(
        self, workspace_id, setup_id, start_date, **kwargs
    ):  # noqa: E501
        """Get timesheet time entries  # noqa: E501

        Get the time entries from within a timesheet timeframe.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_timesheet_time_entries_handler_with_http_info(workspace_id, setup_id, start_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int setup_id: Numeric ID of the timesheet setup. (required)
        :param str start_date: Start date (YYYY-MM-DD) of the timesheet. (required)
        :return: list[ModelsTimeEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "setup_id", "start_date"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_workspace_timesheet_time_entries_handler" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_timesheet_time_entries_handler`"
            )  # noqa: E501
        # verify the required parameter "setup_id" is set
        if self.api_client.client_side_validation and ("setup_id" not in params or params["setup_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `setup_id` when calling `get_workspace_timesheet_time_entries_handler`"
            )  # noqa: E501
        # verify the required parameter "start_date" is set
        if self.api_client.client_side_validation and (
            "start_date" not in params or params["start_date"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `start_date` when calling `get_workspace_timesheet_time_entries_handler`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "setup_id" in params:
            path_params["setup_id"] = params["setup_id"]  # noqa: E501
        if "start_date" in params:
            path_params["start_date"] = params["start_date"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsTimeEntry]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_timesheets_handler(self, workspace_id, **kwargs):  # noqa: E501
        """Get timesheets  # noqa: E501

        Get timesheets applying various filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_timesheets_handler(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int member_ids: Numeric ID of the members, comma-separated
        :param int approver_ids: Numeric ID of the approvers, comma-separated
        :param int timesheet_setup_ids: Numeric ID for timesheet setup, comma-separated.
        :param int statuses: Timesheet status, comma-separated.
        :param int before: Timesheets starting before this date (YYYY-MM-DD).
        :param int after: Timesheets starting after this date (YYYY-MM-DD).
        :param int page: Page number, default 1.
        :param int per_page: Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000.
        :param str sort_field: Field used for sorting, default start_date.
        :param str sort_order: Sort order.
        :return: list[TimesheetsGetPaginatedResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_timesheets_handler_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_timesheets_handler_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_timesheets_handler_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Get timesheets  # noqa: E501

        Get timesheets applying various filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_timesheets_handler_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int member_ids: Numeric ID of the members, comma-separated
        :param int approver_ids: Numeric ID of the approvers, comma-separated
        :param int timesheet_setup_ids: Numeric ID for timesheet setup, comma-separated.
        :param int statuses: Timesheet status, comma-separated.
        :param int before: Timesheets starting before this date (YYYY-MM-DD).
        :param int after: Timesheets starting after this date (YYYY-MM-DD).
        :param int page: Page number, default 1.
        :param int per_page: Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000.
        :param str sort_field: Field used for sorting, default start_date.
        :param str sort_order: Sort order.
        :return: list[TimesheetsGetPaginatedResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "workspace_id",
            "member_ids",
            "approver_ids",
            "timesheet_setup_ids",
            "statuses",
            "before",
            "after",
            "page",
            "per_page",
            "sort_field",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_timesheets_handler" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_timesheets_handler`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []
        if "member_ids" in params:
            query_params.append(("member_ids", params["member_ids"]))  # noqa: E501
        if "approver_ids" in params:
            query_params.append(("approver_ids", params["approver_ids"]))  # noqa: E501
        if "timesheet_setup_ids" in params:
            query_params.append(("timesheet_setup_ids", params["timesheet_setup_ids"]))  # noqa: E501
        if "statuses" in params:
            query_params.append(("statuses", params["statuses"]))  # noqa: E501
        if "before" in params:
            query_params.append(("before", params["before"]))  # noqa: E501
        if "after" in params:
            query_params.append(("after", params["after"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "sort_field" in params:
            query_params.append(("sort_field", params["sort_field"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/timesheets",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[TimesheetsGetPaginatedResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_timesheet_setups(self, workspace_id, payload, **kwargs):  # noqa: E501
        """Create a timesheet setup  # noqa: E501

        Create timesheet setups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_timesheet_setups(workspace_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param TimesheetsetupsCreatePayload payload: Arrays of setup creation parameters. (required)
        :return: list[TimesheetsetupsAPITimesheetSetup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_timesheet_setups_with_http_info(workspace_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.post_timesheet_setups_with_http_info(workspace_id, payload, **kwargs)  # noqa: E501
            return data

    def post_timesheet_setups_with_http_info(self, workspace_id, payload, **kwargs):  # noqa: E501
        """Create a timesheet setup  # noqa: E501

        Create timesheet setups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_timesheet_setups_with_http_info(workspace_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param TimesheetsetupsCreatePayload payload: Arrays of setup creation parameters. (required)
        :return: list[TimesheetsetupsAPITimesheetSetup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "payload"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_timesheet_setups" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_timesheet_setups`"
            )  # noqa: E501
        # verify the required parameter "payload" is set
        if self.api_client.client_side_validation and ("payload" not in params or params["payload"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `post_timesheet_setups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "payload" in params:
            body_params = params["payload"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/timesheet_setups",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[TimesheetsetupsAPITimesheetSetup]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_timesheet_setups(self, workspace_id, setup_id, payload, **kwargs):  # noqa: E501
        """Update a timesheet setup  # noqa: E501

        Updates a timesheet setups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_timesheet_setups(workspace_id, setup_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int setup_id: Numeric ID of the timesheet setup (required)
        :param TimesheetsetupsUpdatePayload payload: Setup update parameters. (required)
        :return: TimesheetsetupsAPITimesheetSetup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_timesheet_setups_with_http_info(workspace_id, setup_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.put_timesheet_setups_with_http_info(workspace_id, setup_id, payload, **kwargs)  # noqa: E501
            return data

    def put_timesheet_setups_with_http_info(self, workspace_id, setup_id, payload, **kwargs):  # noqa: E501
        """Update a timesheet setup  # noqa: E501

        Updates a timesheet setups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_timesheet_setups_with_http_info(workspace_id, setup_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int setup_id: Numeric ID of the timesheet setup (required)
        :param TimesheetsetupsUpdatePayload payload: Setup update parameters. (required)
        :return: TimesheetsetupsAPITimesheetSetup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "setup_id", "payload"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_timesheet_setups" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_id` when calling `put_timesheet_setups`")  # noqa: E501
        # verify the required parameter "setup_id" is set
        if self.api_client.client_side_validation and ("setup_id" not in params or params["setup_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `setup_id` when calling `put_timesheet_setups`")  # noqa: E501
        # verify the required parameter "payload" is set
        if self.api_client.client_side_validation and ("payload" not in params or params["payload"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `put_timesheet_setups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "setup_id" in params:
            path_params["setup_id"] = params["setup_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "payload" in params:
            body_params = params["payload"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/timesheet_setups/{setup_id}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="TimesheetsetupsAPITimesheetSetup",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_workspace_timesheets_handler(self, workspace_id, setup_id, start_date, payload, **kwargs):  # noqa: E501
        """Update timesheets  # noqa: E501

        Updates a timesheet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_timesheets_handler(workspace_id, setup_id, start_date, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int setup_id: Numeric ID of the timesheet setup. (required)
        :param str start_date: Start date (YYYY-MM-DD) of the timesheet. (required)
        :param TimesheetsPutTimesheetPayload payload: Timesheet status and rejection comment. (required)
        :return: TimesheetsAPITimesheet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_workspace_timesheets_handler_with_http_info(
                workspace_id, setup_id, start_date, payload, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_workspace_timesheets_handler_with_http_info(
                workspace_id, setup_id, start_date, payload, **kwargs
            )  # noqa: E501
            return data

    def put_workspace_timesheets_handler_with_http_info(
        self, workspace_id, setup_id, start_date, payload, **kwargs
    ):  # noqa: E501
        """Update timesheets  # noqa: E501

        Updates a timesheet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_timesheets_handler_with_http_info(workspace_id, setup_id, start_date, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int setup_id: Numeric ID of the timesheet setup. (required)
        :param str start_date: Start date (YYYY-MM-DD) of the timesheet. (required)
        :param TimesheetsPutTimesheetPayload payload: Timesheet status and rejection comment. (required)
        :return: TimesheetsAPITimesheet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "setup_id", "start_date", "payload"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_workspace_timesheets_handler" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `put_workspace_timesheets_handler`"
            )  # noqa: E501
        # verify the required parameter "setup_id" is set
        if self.api_client.client_side_validation and ("setup_id" not in params or params["setup_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `setup_id` when calling `put_workspace_timesheets_handler`"
            )  # noqa: E501
        # verify the required parameter "start_date" is set
        if self.api_client.client_side_validation and (
            "start_date" not in params or params["start_date"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `start_date` when calling `put_workspace_timesheets_handler`"
            )  # noqa: E501
        # verify the required parameter "payload" is set
        if self.api_client.client_side_validation and ("payload" not in params or params["payload"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `payload` when calling `put_workspace_timesheets_handler`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "setup_id" in params:
            path_params["setup_id"] = params["setup_id"]  # noqa: E501
        if "start_date" in params:
            path_params["start_date"] = params["start_date"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "payload" in params:
            body_params = params["payload"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="TimesheetsAPITimesheet",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
