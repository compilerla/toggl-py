"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient


class AuthenticationApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_workspace_sso(self, workspace_id, **kwargs):  # noqa: E501
        """Erase a workspace SSO configuration  # noqa: E501

        Remove the SSO configuration for a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_sso(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_workspace_sso_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_sso_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def delete_workspace_sso_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Erase a workspace SSO configuration  # noqa: E501

        Remove the SSO configuration for a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_sso_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_workspace_sso" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_id` when calling `delete_workspace_sso`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/sso",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_saml2_login_url(self, email, **kwargs):  # noqa: E501
        """SAML2 Identity Provider URL  # noqa: E501

        Returns the SSO URL given an email address for authenticating in an Identity Provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_saml2_login_url(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: User email (required)
        :param str client: Client identification (webapp/toggl-button/client) TODO: add desktop identification
        :param str state: State to be preserved when redirecting to Accounts API
        :return: Saml2LoginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_saml2_login_url_with_http_info(email, **kwargs)  # noqa: E501
        else:
            (data) = self.get_saml2_login_url_with_http_info(email, **kwargs)  # noqa: E501
            return data

    def get_saml2_login_url_with_http_info(self, email, **kwargs):  # noqa: E501
        """SAML2 Identity Provider URL  # noqa: E501

        Returns the SSO URL given an email address for authenticating in an Identity Provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_saml2_login_url_with_http_info(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: User email (required)
        :param str client: Client identification (webapp/toggl-button/client) TODO: add desktop identification
        :param str state: State to be preserved when redirecting to Accounts API
        :return: Saml2LoginResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["email", "client", "state"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_saml2_login_url" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "email" is set
        if self.api_client.client_side_validation and ("email" not in params or params["email"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `email` when calling `get_saml2_login_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "email" in params:
            query_params.append(("email", params["email"]))  # noqa: E501
        if "client" in params:
            query_params.append(("client", params["client"]))  # noqa: E501
        if "state" in params:
            query_params.append(("state", params["state"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/auth/saml2/login",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Saml2LoginResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_sso(self, workspace_id, **kwargs):  # noqa: E501
        """Workspace SSO configuration  # noqa: E501

        Returns the SSO configuration for a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_sso(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: SsoConfigResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_sso_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_sso_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_sso_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Workspace SSO configuration  # noqa: E501

        Returns the SSO configuration for a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_sso_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: SsoConfigResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_sso" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_workspace_sso`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/sso",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SsoConfigResult",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def me_sessions_delete(self, **kwargs):  # noqa: E501
        """Delete session  # noqa: E501

        Deletes a session used for authenticating the current request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.me_sessions_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.me_sessions_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.me_sessions_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def me_sessions_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Delete session  # noqa: E501

        Deletes a session used for authenticating the current request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.me_sessions_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method me_sessions_delete" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/me/sessions",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def me_sessions_post(self, **kwargs):  # noqa: E501
        """Create session  # noqa: E501

        Creates a session and sets a cookie in the response header which can be used for authentication in API requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.me_sessions_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MePostSessionHandlerRequestBody session_post: Session preferences
        :return: ModelsUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.me_sessions_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.me_sessions_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def me_sessions_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create session  # noqa: E501

        Creates a session and sets a cookie in the response header which can be used for authentication in API requests  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.me_sessions_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MePostSessionHandlerRequestBody session_post: Session preferences
        :return: ModelsUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["session_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method me_sessions_post" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "session_post" in params:
            body_params = params["session_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/me/sessions",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsUser",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def patch_workspace_sso(self, workspace_id, settings, **kwargs):  # noqa: E501
        """Enable/disable the Workspace SSO configuration  # noqa: E501

        Enable/Disable the SSO configuration for a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_workspace_sso(workspace_id, settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param SsoState settings: SAML2 enable flag (required)
        :return: SsoState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.patch_workspace_sso_with_http_info(workspace_id, settings, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_workspace_sso_with_http_info(workspace_id, settings, **kwargs)  # noqa: E501
            return data

    def patch_workspace_sso_with_http_info(self, workspace_id, settings, **kwargs):  # noqa: E501
        """Enable/disable the Workspace SSO configuration  # noqa: E501

        Enable/Disable the SSO configuration for a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_workspace_sso_with_http_info(workspace_id, settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param SsoState settings: SAML2 enable flag (required)
        :return: SsoState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "settings"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method patch_workspace_sso" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_id` when calling `patch_workspace_sso`")  # noqa: E501
        # verify the required parameter "settings" is set
        if self.api_client.client_side_validation and ("settings" not in params or params["settings"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `settings` when calling `patch_workspace_sso`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "settings" in params:
            body_params = params["settings"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/sso",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SsoState",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_enable_sso(self, enable_sso_post, **kwargs):  # noqa: E501
        """Confirm SSO enabling for user account  # noqa: E501

        Confirm SSO enabling in existing Toggl account after successful SSO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_enable_sso(enable_sso_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SsoConfirmation enable_sso_post: SSO enabling confirmation data (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_enable_sso_with_http_info(enable_sso_post, **kwargs)  # noqa: E501
        else:
            (data) = self.post_enable_sso_with_http_info(enable_sso_post, **kwargs)  # noqa: E501
            return data

    def post_enable_sso_with_http_info(self, enable_sso_post, **kwargs):  # noqa: E501
        """Confirm SSO enabling for user account  # noqa: E501

        Confirm SSO enabling in existing Toggl account after successful SSO  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_enable_sso_with_http_info(enable_sso_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SsoConfirmation enable_sso_post: SSO enabling confirmation data (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["enable_sso_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_enable_sso" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "enable_sso_post" is set
        if self.api_client.client_side_validation and (
            "enable_sso_post" not in params or params["enable_sso_post"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `enable_sso_post` when calling `post_enable_sso`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "enable_sso_post" in params:
            body_params = params["enable_sso_post"]
        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/enable_sso",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_reset_token(self, **kwargs):  # noqa: E501
        """ResetToken  # noqa: E501

        Resets API token for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_reset_token(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_reset_token_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_reset_token_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_reset_token_with_http_info(self, **kwargs):  # noqa: E501
        """ResetToken  # noqa: E501

        Resets API token for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_reset_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_reset_token" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/reset_token",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_saml2_callback(self, workspace_id, saml_response, **kwargs):  # noqa: E501
        """SAML2 Identity Provider Callback  # noqa: E501

        Receives the IdP Callback containing the SAML2 assertion with response of user authentication in the IdP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_saml2_callback(workspace_id, saml_response, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str saml_response: SAML2 assertion with authentication response (required)
        :param str relay_state: Encoded string containing client and host which originated the requests
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_saml2_callback_with_http_info(workspace_id, saml_response, **kwargs)  # noqa: E501
        else:
            (data) = self.post_saml2_callback_with_http_info(workspace_id, saml_response, **kwargs)  # noqa: E501
            return data

    def post_saml2_callback_with_http_info(self, workspace_id, saml_response, **kwargs):  # noqa: E501
        """SAML2 Identity Provider Callback  # noqa: E501

        Receives the IdP Callback containing the SAML2 assertion with response of user authentication in the IdP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_saml2_callback_with_http_info(workspace_id, saml_response, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str saml_response: SAML2 assertion with authentication response (required)
        :param str relay_state: Encoded string containing client and host which originated the requests
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "saml_response", "relay_state"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_saml2_callback" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_id` when calling `post_saml2_callback`")  # noqa: E501
        # verify the required parameter "saml_response" is set
        if self.api_client.client_side_validation and (
            "saml_response" not in params or params["saml_response"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `saml_response` when calling `post_saml2_callback`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "saml_response" in params:
            form_params.append(("SAMLResponse", params["saml_response"]))  # noqa: E501
        if "relay_state" in params:
            form_params.append(("RelayState", params["relay_state"]))  # noqa: E501

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/auth/saml2/login/{workspace_id}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_signup(self, post_user, **kwargs):  # noqa: E501
        """Signup  # noqa: E501

        Sign up as a new user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_signup(post_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MePostUser post_user: authorization data (required)
        :return: ModelsTogglUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_signup_with_http_info(post_user, **kwargs)  # noqa: E501
        else:
            (data) = self.post_signup_with_http_info(post_user, **kwargs)  # noqa: E501
            return data

    def post_signup_with_http_info(self, post_user, **kwargs):  # noqa: E501
        """Signup  # noqa: E501

        Sign up as a new user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_signup_with_http_info(post_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MePostUser post_user: authorization data (required)
        :return: ModelsTogglUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["post_user"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_signup" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "post_user" is set
        if self.api_client.client_side_validation and ("post_user" not in params or params["post_user"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `post_user` when calling `post_signup`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post_user" in params:
            body_params = params["post_user"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/signup",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsTogglUser",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_sso(self, workspace_id, settings, **kwargs):  # noqa: E501
        """Workspace SSO configuration  # noqa: E501

        Save the SSO configuration for a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_sso(workspace_id, settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param ModelsSSOConfig settings: SAML2 config parameters (required)
        :return: ModelsSSOConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_sso_with_http_info(workspace_id, settings, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_sso_with_http_info(workspace_id, settings, **kwargs)  # noqa: E501
            return data

    def post_workspace_sso_with_http_info(self, workspace_id, settings, **kwargs):  # noqa: E501
        """Workspace SSO configuration  # noqa: E501

        Save the SSO configuration for a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_sso_with_http_info(workspace_id, settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param ModelsSSOConfig settings: SAML2 config parameters (required)
        :return: ModelsSSOConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "settings"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_workspace_sso" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_id` when calling `post_workspace_sso`")  # noqa: E501
        # verify the required parameter "settings" is set
        if self.api_client.client_side_validation and ("settings" not in params or params["settings"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `settings` when calling `post_workspace_sso`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "settings" in params:
            body_params = params["settings"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/sso",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsSSOConfig",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
