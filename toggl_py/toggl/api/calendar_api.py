"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient


class CalendarApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def integrations_calendar_calendars_selected_get(self, **kwargs):  # noqa: E501
        """Get all selected calendars for a given user.  # noqa: E501

        Get all selected calendars for a given user that was previously saved in the database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_calendars_selected_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str limit: Max results per page
        :param str page_token: Token for next page. Used in pagination when the number of results exceed 'limit'
        :return: HandlercalendarCalendarsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.integrations_calendar_calendars_selected_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.integrations_calendar_calendars_selected_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def integrations_calendar_calendars_selected_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all selected calendars for a given user.  # noqa: E501

        Get all selected calendars for a given user that was previously saved in the database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_calendars_selected_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str limit: Max results per page
        :param str page_token: Token for next page. Used in pagination when the number of results exceed 'limit'
        :return: HandlercalendarCalendarsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["limit", "page_token"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method integrations_calendar_calendars_selected_get" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "limit" in params:
            query_params.append(("limit", params["limit"]))  # noqa: E501
        if "page_token" in params:
            query_params.append(("page_token", params["page_token"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/integrations/calendar/calendars/selected",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="HandlercalendarCalendarsResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def integrations_calendar_callback_provider_get(self, provider, state, code, **kwargs):  # noqa: E501
        """Callback for provider OAuth setup.  # noqa: E501

        Callback endpoint used only by the Calendar Service Provider, which fetches the code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_callback_provider_get(provider, state, code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider: Calendar service provider (required)
        :param str state: state string to verify user authenticity (required)
        :param str code: Temporary code which will be used to fetch credentials (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.integrations_calendar_callback_provider_get_with_http_info(
                provider, state, code, **kwargs
            )  # noqa: E501
        else:
            (data) = self.integrations_calendar_callback_provider_get_with_http_info(
                provider, state, code, **kwargs
            )  # noqa: E501
            return data

    def integrations_calendar_callback_provider_get_with_http_info(self, provider, state, code, **kwargs):  # noqa: E501
        """Callback for provider OAuth setup.  # noqa: E501

        Callback endpoint used only by the Calendar Service Provider, which fetches the code  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_callback_provider_get_with_http_info(provider, state, code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider: Calendar service provider (required)
        :param str state: state string to verify user authenticity (required)
        :param str code: Temporary code which will be used to fetch credentials (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["provider", "state", "code"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method integrations_calendar_callback_provider_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "provider" is set
        if self.api_client.client_side_validation and ("provider" not in params or params["provider"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `provider` when calling `integrations_calendar_callback_provider_get`"
            )  # noqa: E501
        # verify the required parameter "state" is set
        if self.api_client.client_side_validation and ("state" not in params or params["state"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `state` when calling `integrations_calendar_callback_provider_get`"
            )  # noqa: E501
        # verify the required parameter "code" is set
        if self.api_client.client_side_validation and ("code" not in params or params["code"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `code` when calling `integrations_calendar_callback_provider_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "provider" in params:
            query_params.append(("provider", params["provider"]))  # noqa: E501
        if "state" in params:
            query_params.append(("state", params["state"]))  # noqa: E501
        if "code" in params:
            query_params.append(("code", params["code"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/integrations/calendar/callback/{provider}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def integrations_calendar_events_details_suggestion_post(self, request, **kwargs):  # noqa: E501
        """Get details suggestion for given events.  # noqa: E501

        Given one or more event IDs, this endpoint responds with the most probable event details (and its accuracy) to assign to the to-be-created time entry for each event ID. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK with only the successful suggestions. Any event ID that is invalid or the user does not have access to will be ignored, as well as any event that has no available suggestion.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_events_details_suggestion_post(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HandlercalendarPostDetailsSuggestionRequest request: Request body containing the event IDs we want to get the suggestion for (required)
        :return: HandlercalendarPostDetailsSuggestionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.integrations_calendar_events_details_suggestion_post_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.integrations_calendar_events_details_suggestion_post_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def integrations_calendar_events_details_suggestion_post_with_http_info(self, request, **kwargs):  # noqa: E501
        """Get details suggestion for given events.  # noqa: E501

        Given one or more event IDs, this endpoint responds with the most probable event details (and its accuracy) to assign to the to-be-created time entry for each event ID. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK with only the successful suggestions. Any event ID that is invalid or the user does not have access to will be ignored, as well as any event that has no available suggestion.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_events_details_suggestion_post_with_http_info(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HandlercalendarPostDetailsSuggestionRequest request: Request body containing the event IDs we want to get the suggestion for (required)
        :return: HandlercalendarPostDetailsSuggestionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method integrations_calendar_events_details_suggestion_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "request" is set
        if self.api_client.client_side_validation and ("request" not in params or params["request"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `request` when calling `integrations_calendar_events_details_suggestion_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "request" in params:
            body_params = params["request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/integrations/calendar/events/details-suggestion",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="HandlercalendarPostDetailsSuggestionResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def integrations_calendar_events_event_id_details_suggestion_get(self, event_id, **kwargs):  # noqa: E501
        """Get details suggestion for a given event.  # noqa: E501

        Given an event ID, this endpoint responds with the most probable event details (and the accuracy) to assign to the to-be-created time entry. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK and a \"null\" string in case no suggestion was found.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_events_event_id_details_suggestion_get(event_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int event_id: Calendar event ID which we want to get a possible project to match (required)
        :return: ModelsSuggestion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.integrations_calendar_events_event_id_details_suggestion_get_with_http_info(
                event_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.integrations_calendar_events_event_id_details_suggestion_get_with_http_info(
                event_id, **kwargs
            )  # noqa: E501
            return data

    def integrations_calendar_events_event_id_details_suggestion_get_with_http_info(self, event_id, **kwargs):  # noqa: E501
        """Get details suggestion for a given event.  # noqa: E501

        Given an event ID, this endpoint responds with the most probable event details (and the accuracy) to assign to the to-be-created time entry. This endpoint will only suggests time entries with description and project not empty, because it uses the description to tell if the TE is similar and the project as the main detail to be suggested.  If the description is equal, as well as all the other details, the accuracy will be 100%, in the case the description is equal but the other details differs, the most frequent will be suggested and the accuracy will be given based on the frequency. In the case there is no TE with the same description the most similar will be suggested based on the Jaro-Winkler algorithm, and the accuracy will be the similarity rating.  This endpoint returns status 200 OK and a \"null\" string in case no suggestion was found.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_events_event_id_details_suggestion_get_with_http_info(event_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int event_id: Calendar event ID which we want to get a possible project to match (required)
        :return: ModelsSuggestion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["event_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method integrations_calendar_events_event_id_details_suggestion_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "event_id" is set
        if self.api_client.client_side_validation and ("event_id" not in params or params["event_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `event_id` when calling `integrations_calendar_events_event_id_details_suggestion_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "event_id" in params:
            path_params["event_id"] = params["event_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/integrations/calendar/events/{event_id}/details-suggestion",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsSuggestion",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def integrations_calendar_events_get(self, start_date, end_date, **kwargs):  # noqa: E501
        """Get all events for the caller user.  # noqa: E501

        Get all events from selected calendars for the caller user. This endpoint will only return events if events were fetched from provider before the request is made. Check which is the endpoint for the events.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_events_get(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date: Smallest boundary date to search for calendar events (required)
        :param str end_date: Biggest boundary date to search for calendar events (required)
        :param str limit: Max results per page
        :param str page_token: Token for next page. Used in pagination when the number of results exceed 'limit'
        :return: HandlercalendarEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.integrations_calendar_events_get_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
        else:
            (data) = self.integrations_calendar_events_get_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
            return data

    def integrations_calendar_events_get_with_http_info(self, start_date, end_date, **kwargs):  # noqa: E501
        """Get all events for the caller user.  # noqa: E501

        Get all events from selected calendars for the caller user. This endpoint will only return events if events were fetched from provider before the request is made. Check which is the endpoint for the events.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_events_get_with_http_info(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date: Smallest boundary date to search for calendar events (required)
        :param str end_date: Biggest boundary date to search for calendar events (required)
        :param str limit: Max results per page
        :param str page_token: Token for next page. Used in pagination when the number of results exceed 'limit'
        :return: HandlercalendarEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["start_date", "end_date", "limit", "page_token"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method integrations_calendar_events_get" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "start_date" is set
        if self.api_client.client_side_validation and (
            "start_date" not in params or params["start_date"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `start_date` when calling `integrations_calendar_events_get`"
            )  # noqa: E501
        # verify the required parameter "end_date" is set
        if self.api_client.client_side_validation and ("end_date" not in params or params["end_date"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `end_date` when calling `integrations_calendar_events_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "start_date" in params:
            query_params.append(("start_date", params["start_date"]))  # noqa: E501
        if "end_date" in params:
            query_params.append(("end_date", params["end_date"]))  # noqa: E501
        if "limit" in params:
            query_params.append(("limit", params["limit"]))  # noqa: E501
        if "page_token" in params:
            query_params.append(("page_token", params["page_token"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/integrations/calendar/events",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="HandlercalendarEventsResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def integrations_calendar_events_update_post(self, **kwargs):  # noqa: E501
        """Update all events from selected calendars for a user.  # noqa: E501

        Fetch all events from a user's selected calendars and save in database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_events_update_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HandlercalendarResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.integrations_calendar_events_update_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.integrations_calendar_events_update_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def integrations_calendar_events_update_post_with_http_info(self, **kwargs):  # noqa: E501
        """Update all events from selected calendars for a user.  # noqa: E501

        Fetch all events from a user's selected calendars and save in database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_events_update_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HandlercalendarResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method integrations_calendar_events_update_post" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/integrations/calendar/events/update",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="HandlercalendarResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def integrations_calendar_get(self, **kwargs):  # noqa: E501
        """Get all integrations a user has.  # noqa: E501

        Get all integrations a user has. Each user may have at most one integration per provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ModelsIntegration]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.integrations_calendar_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.integrations_calendar_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def integrations_calendar_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all integrations a user has.  # noqa: E501

        Get all integrations a user has. Each user may have at most one integration per provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ModelsIntegration]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method integrations_calendar_get" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/integrations/calendar",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsIntegration]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def integrations_calendar_integration_id_calendars_calendar_id_patch(
        self, integration_id, calendar_id, **kwargs
    ):  # noqa: E501
        """Sets whether a calendar is or not selected by the user.  # noqa: E501

        This endpoint is used to set updatable fields of a calendar like selected field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_integration_id_calendars_calendar_id_patch(integration_id, calendar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int integration_id: Integration ID as saved in the database (required)
        :param int calendar_id: Calendar ID as saved in the database (required)
        :param HandlercalendarPatchCalendar payload: Calendar fields to be updated
        :return: list[ModelsCalendar]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.integrations_calendar_integration_id_calendars_calendar_id_patch_with_http_info(
                integration_id, calendar_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.integrations_calendar_integration_id_calendars_calendar_id_patch_with_http_info(
                integration_id, calendar_id, **kwargs
            )  # noqa: E501
            return data

    def integrations_calendar_integration_id_calendars_calendar_id_patch_with_http_info(
        self, integration_id, calendar_id, **kwargs
    ):  # noqa: E501
        """Sets whether a calendar is or not selected by the user.  # noqa: E501

        This endpoint is used to set updatable fields of a calendar like selected field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_integration_id_calendars_calendar_id_patch_with_http_info(integration_id, calendar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int integration_id: Integration ID as saved in the database (required)
        :param int calendar_id: Calendar ID as saved in the database (required)
        :param HandlercalendarPatchCalendar payload: Calendar fields to be updated
        :return: list[ModelsCalendar]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["integration_id", "calendar_id", "payload"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method integrations_calendar_integration_id_calendars_calendar_id_patch" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "integration_id" is set
        if self.api_client.client_side_validation and (
            "integration_id" not in params or params["integration_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `integration_id` when calling `integrations_calendar_integration_id_calendars_calendar_id_patch`"
            )  # noqa: E501
        # verify the required parameter "calendar_id" is set
        if self.api_client.client_side_validation and (
            "calendar_id" not in params or params["calendar_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `calendar_id` when calling `integrations_calendar_integration_id_calendars_calendar_id_patch`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "integration_id" in params:
            path_params["integration_id"] = params["integration_id"]  # noqa: E501
        if "calendar_id" in params:
            path_params["calendar_id"] = params["calendar_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "payload" in params:
            body_params = params["payload"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/integrations/calendar/{integration_id}/calendars/{calendar_id}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsCalendar]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def integrations_calendar_integration_id_calendars_get(self, integration_id, **kwargs):  # noqa: E501
        """Get all calendars for a given integration.  # noqa: E501

        Get all calendars for a given integration that was previously saved in the database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_integration_id_calendars_get(integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int integration_id: Integration ID as saved in the database (required)
        :param int limit: Max results per page
        :param bool selected: if we should get the selected or not calendars, or all calendars, in case of omission
        :param str page_token: Token for next page. Used in pagination when the number of results exceed 'limit'
        :return: HandlercalendarCalendarsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.integrations_calendar_integration_id_calendars_get_with_http_info(
                integration_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.integrations_calendar_integration_id_calendars_get_with_http_info(
                integration_id, **kwargs
            )  # noqa: E501
            return data

    def integrations_calendar_integration_id_calendars_get_with_http_info(self, integration_id, **kwargs):  # noqa: E501
        """Get all calendars for a given integration.  # noqa: E501

        Get all calendars for a given integration that was previously saved in the database.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_integration_id_calendars_get_with_http_info(integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int integration_id: Integration ID as saved in the database (required)
        :param int limit: Max results per page
        :param bool selected: if we should get the selected or not calendars, or all calendars, in case of omission
        :param str page_token: Token for next page. Used in pagination when the number of results exceed 'limit'
        :return: HandlercalendarCalendarsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["integration_id", "limit", "selected", "page_token"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method integrations_calendar_integration_id_calendars_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "integration_id" is set
        if self.api_client.client_side_validation and (
            "integration_id" not in params or params["integration_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `integration_id` when calling `integrations_calendar_integration_id_calendars_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "integration_id" in params:
            path_params["integration_id"] = params["integration_id"]  # noqa: E501

        query_params = []
        if "limit" in params:
            query_params.append(("limit", params["limit"]))  # noqa: E501
        if "selected" in params:
            query_params.append(("selected", params["selected"]))  # noqa: E501
        if "page_token" in params:
            query_params.append(("page_token", params["page_token"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/integrations/calendar/{integration_id}/calendars",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="HandlercalendarCalendarsResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def integrations_calendar_integration_id_calendars_id_calendar_events_get(
        self, integration_id, id_calendar, start_date, end_date, **kwargs
    ):  # noqa: E501
        """(DEPRECATED) Get all events for a given calendar in a given integration.  # noqa: E501

        Get all events for a given calendar in a given integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_integration_id_calendars_id_calendar_events_get(integration_id, id_calendar, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int integration_id: Integration ID as saved in the database (required)
        :param str id_calendar: Calendar ID as returned by the provider, it may be an e-mail address, for instance (required)
        :param str start_date: Smallest boundary date to search for calendar events (required)
        :param str end_date: Biggest boundary date to search for calendar events (required)
        :param str limit: Max results per page
        :param str page_token: Token for next page. Used in pagination when the number of results exceed 'limit'
        :return: HandlercalendarEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.integrations_calendar_integration_id_calendars_id_calendar_events_get_with_http_info(
                integration_id, id_calendar, start_date, end_date, **kwargs
            )  # noqa: E501
        else:
            (data) = self.integrations_calendar_integration_id_calendars_id_calendar_events_get_with_http_info(
                integration_id, id_calendar, start_date, end_date, **kwargs
            )  # noqa: E501
            return data

    def integrations_calendar_integration_id_calendars_id_calendar_events_get_with_http_info(
        self, integration_id, id_calendar, start_date, end_date, **kwargs
    ):  # noqa: E501
        """(DEPRECATED) Get all events for a given calendar in a given integration.  # noqa: E501

        Get all events for a given calendar in a given integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_integration_id_calendars_id_calendar_events_get_with_http_info(integration_id, id_calendar, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int integration_id: Integration ID as saved in the database (required)
        :param str id_calendar: Calendar ID as returned by the provider, it may be an e-mail address, for instance (required)
        :param str start_date: Smallest boundary date to search for calendar events (required)
        :param str end_date: Biggest boundary date to search for calendar events (required)
        :param str limit: Max results per page
        :param str page_token: Token for next page. Used in pagination when the number of results exceed 'limit'
        :return: HandlercalendarEventsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["integration_id", "id_calendar", "start_date", "end_date", "limit", "page_token"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method integrations_calendar_integration_id_calendars_id_calendar_events_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "integration_id" is set
        if self.api_client.client_side_validation and (
            "integration_id" not in params or params["integration_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `integration_id` when calling `integrations_calendar_integration_id_calendars_id_calendar_events_get`"
            )  # noqa: E501
        # verify the required parameter "id_calendar" is set
        if self.api_client.client_side_validation and (
            "id_calendar" not in params or params["id_calendar"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id_calendar` when calling `integrations_calendar_integration_id_calendars_id_calendar_events_get`"
            )  # noqa: E501
        # verify the required parameter "start_date" is set
        if self.api_client.client_side_validation and (
            "start_date" not in params or params["start_date"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `start_date` when calling `integrations_calendar_integration_id_calendars_id_calendar_events_get`"
            )  # noqa: E501
        # verify the required parameter "end_date" is set
        if self.api_client.client_side_validation and ("end_date" not in params or params["end_date"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `end_date` when calling `integrations_calendar_integration_id_calendars_id_calendar_events_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "integration_id" in params:
            path_params["integration_id"] = params["integration_id"]  # noqa: E501
        if "id_calendar" in params:
            path_params["id_calendar"] = params["id_calendar"]  # noqa: E501

        query_params = []
        if "start_date" in params:
            query_params.append(("start_date", params["start_date"]))  # noqa: E501
        if "end_date" in params:
            query_params.append(("end_date", params["end_date"]))  # noqa: E501
        if "limit" in params:
            query_params.append(("limit", params["limit"]))  # noqa: E501
        if "page_token" in params:
            query_params.append(("page_token", params["page_token"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/integrations/calendar/{integration_id}/calendars/{id_calendar}/events",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="HandlercalendarEventsResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def integrations_calendar_integration_id_calendars_update_post(self, integration_id, **kwargs):  # noqa: E501
        """Updates calendar data according to provider API.  # noqa: E501

        This endpoint uses the passed integration to get a provider and update all the calendars from that  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_integration_id_calendars_update_post(integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int integration_id: Integration ID as saved in the database (required)
        :return: HandlercalendarFetchedCalendarsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.integrations_calendar_integration_id_calendars_update_post_with_http_info(
                integration_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.integrations_calendar_integration_id_calendars_update_post_with_http_info(
                integration_id, **kwargs
            )  # noqa: E501
            return data

    def integrations_calendar_integration_id_calendars_update_post_with_http_info(
        self, integration_id, **kwargs
    ):  # noqa: E501
        """Updates calendar data according to provider API.  # noqa: E501

        This endpoint uses the passed integration to get a provider and update all the calendars from that  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_integration_id_calendars_update_post_with_http_info(integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int integration_id: Integration ID as saved in the database (required)
        :return: HandlercalendarFetchedCalendarsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["integration_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method integrations_calendar_integration_id_calendars_update_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "integration_id" is set
        if self.api_client.client_side_validation and (
            "integration_id" not in params or params["integration_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `integration_id` when calling `integrations_calendar_integration_id_calendars_update_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "integration_id" in params:
            path_params["integration_id"] = params["integration_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/integrations/calendar/{integration_id}/calendars/update",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="HandlercalendarFetchedCalendarsResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def integrations_calendar_integration_id_delete(self, integration_id, **kwargs):  # noqa: E501
        """Delete a given integration.  # noqa: E501

        Executes logic deletion of an integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_integration_id_delete(integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int integration_id: Integration ID as saved in the database (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.integrations_calendar_integration_id_delete_with_http_info(integration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.integrations_calendar_integration_id_delete_with_http_info(integration_id, **kwargs)  # noqa: E501
            return data

    def integrations_calendar_integration_id_delete_with_http_info(self, integration_id, **kwargs):  # noqa: E501
        """Delete a given integration.  # noqa: E501

        Executes logic deletion of an integration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_integration_id_delete_with_http_info(integration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int integration_id: Integration ID as saved in the database (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["integration_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method integrations_calendar_integration_id_delete" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "integration_id" is set
        if self.api_client.client_side_validation and (
            "integration_id" not in params or params["integration_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `integration_id` when calling `integrations_calendar_integration_id_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "integration_id" in params:
            path_params["integration_id"] = params["integration_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/integrations/calendar/{integration_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def integrations_calendar_setup_get(self, provider, **kwargs):  # noqa: E501
        """Get URL for setting up a calendar integration with given provider.  # noqa: E501

        Set up an integration with a given provider, returning a URL to the said provider in order to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_setup_get(provider, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider: Calendar service provider which the calendars will be retrieved (required)
        :param str return_to: Page to which the user will be redirected after authenticating
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.integrations_calendar_setup_get_with_http_info(provider, **kwargs)  # noqa: E501
        else:
            (data) = self.integrations_calendar_setup_get_with_http_info(provider, **kwargs)  # noqa: E501
            return data

    def integrations_calendar_setup_get_with_http_info(self, provider, **kwargs):  # noqa: E501
        """Get URL for setting up a calendar integration with given provider.  # noqa: E501

        Set up an integration with a given provider, returning a URL to the said provider in order to  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.integrations_calendar_setup_get_with_http_info(provider, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider: Calendar service provider which the calendars will be retrieved (required)
        :param str return_to: Page to which the user will be redirected after authenticating
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["provider", "return_to"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method integrations_calendar_setup_get" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "provider" is set
        if self.api_client.client_side_validation and ("provider" not in params or params["provider"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `provider` when calling `integrations_calendar_setup_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "provider" in params:
            query_params.append(("provider", params["provider"]))  # noqa: E501
        if "return_to" in params:
            query_params.append(("return_to", params["return_to"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/integrations/calendar/setup",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
