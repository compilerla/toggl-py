"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient


class ClientsApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def archive_client(self, workspace_id, client_id, **kwargs):  # noqa: E501
        """Archives client  # noqa: E501

        Archives a workspace client and related projects. Only for premium workspaces.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archive_client(workspace_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int client_id: Numeric ID of the client (required)
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.archive_client_with_http_info(workspace_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.archive_client_with_http_info(workspace_id, client_id, **kwargs)  # noqa: E501
            return data

    def archive_client_with_http_info(self, workspace_id, client_id, **kwargs):  # noqa: E501
        """Archives client  # noqa: E501

        Archives a workspace client and related projects. Only for premium workspaces.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.archive_client_with_http_info(workspace_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int client_id: Numeric ID of the client (required)
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "client_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method archive_client" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `workspace_id` when calling `archive_client`")  # noqa: E501
        # verify the required parameter "client_id" is set
        if self.api_client.client_side_validation and ("client_id" not in params or params["client_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_id` when calling `archive_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "client_id" in params:
            path_params["client_id"] = params["client_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/clients/{client_id}/archive",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[int]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_workspace_clients(self, workspace_id, client_id, **kwargs):  # noqa: E501
        """Delete client  # noqa: E501

        Delete workspace client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_clients(workspace_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int client_id: Numeric ID of the client (required)
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_workspace_clients_with_http_info(workspace_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_clients_with_http_info(workspace_id, client_id, **kwargs)  # noqa: E501
            return data

    def delete_workspace_clients_with_http_info(self, workspace_id, client_id, **kwargs):  # noqa: E501
        """Delete client  # noqa: E501

        Delete workspace client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_clients_with_http_info(workspace_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int client_id: Numeric ID of the client (required)
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "client_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_workspace_clients" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `delete_workspace_clients`"  # noqa: E501
            )
        # verify the required parameter "client_id" is set
        if self.api_client.client_side_validation and ("client_id" not in params or params["client_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `client_id` when calling `delete_workspace_clients`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "client_id" in params:
            path_params["client_id"] = params["client_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/clients/{client_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="float",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_client(self, workspace_id, client_id, **kwargs):  # noqa: E501
        """Load client from ID  # noqa: E501

        Load client from workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_client(workspace_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int client_id: Numeric ID of the client (required)
        :return: ModelsClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_client_with_http_info(workspace_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_client_with_http_info(workspace_id, client_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_client_with_http_info(self, workspace_id, client_id, **kwargs):  # noqa: E501
        """Load client from ID  # noqa: E501

        Load client from workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_client_with_http_info(workspace_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int client_id: Numeric ID of the client (required)
        :return: ModelsClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "client_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_client" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_workspace_client`")  # noqa: E501
        # verify the required parameter "client_id" is set
        if self.api_client.client_side_validation and ("client_id" not in params or params["client_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_id` when calling `get_workspace_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "client_id" in params:
            path_params["client_id"] = params["client_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/clients/{client_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsClient",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_clients(self, workspace_id, **kwargs):  # noqa: E501
        """List clients  # noqa: E501

        List clients from workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_clients(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str status: Use 'active' to only list active clients, 'archived' to only list archived clients and 'both' to retrieve active and archived clients. If not provided, only active clients are returned.
        :param str name: If provided, allows to filter by client name in a case insensitive manner, returning all the ones that contain the given string.
        :return: list[ModelsClient]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_clients_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_clients_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_clients_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """List clients  # noqa: E501

        List clients from workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_clients_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str status: Use 'active' to only list active clients, 'archived' to only list archived clients and 'both' to retrieve active and archived clients. If not provided, only active clients are returned.
        :param str name: If provided, allows to filter by client name in a case insensitive manner, returning all the ones that contain the given string.
        :return: list[ModelsClient]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "status", "name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_clients" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_clients`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []
        if "status" in params:
            query_params.append(("status", params["status"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/clients",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsClient]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_clients(self, workspace_id, posted_client, **kwargs):  # noqa: E501
        """Create client  # noqa: E501

        Create workspace client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_clients(workspace_id, posted_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param ClientPayload posted_client: Client (required)
        :return: ModelsClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_clients_with_http_info(workspace_id, posted_client, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_clients_with_http_info(workspace_id, posted_client, **kwargs)  # noqa: E501
            return data

    def post_workspace_clients_with_http_info(self, workspace_id, posted_client, **kwargs):  # noqa: E501
        """Create client  # noqa: E501

        Create workspace client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_clients_with_http_info(workspace_id, posted_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param ClientPayload posted_client: Client (required)
        :return: ModelsClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "posted_client"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_workspace_clients" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_clients`"  # noqa: E501
            )
        # verify the required parameter "posted_client" is set
        if self.api_client.client_side_validation and (
            "posted_client" not in params or params["posted_client"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `posted_client` when calling `post_workspace_clients`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "posted_client" in params:
            body_params = params["posted_client"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/clients",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsClient",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_workspace_clients(self, workspace_id, client_id, posted_client, **kwargs):  # noqa: E501
        """Change client  # noqa: E501

        Update workspace client.  Note: use /workspaces/{workspace_id}/clients/{client_id}/archive to archive the client and /workspaces/{workspace_id}/clients/{client_id}/restore to restore it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_clients(workspace_id, client_id, posted_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int client_id: Numeric ID of the client (required)
        :param ClientPayload posted_client: Client (required)
        :return: ModelsClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_workspace_clients_with_http_info(workspace_id, client_id, posted_client, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workspace_clients_with_http_info(workspace_id, client_id, posted_client, **kwargs)  # noqa: E501
            return data

    def put_workspace_clients_with_http_info(self, workspace_id, client_id, posted_client, **kwargs):  # noqa: E501
        """Change client  # noqa: E501

        Update workspace client.  Note: use /workspaces/{workspace_id}/clients/{client_id}/archive to archive the client and /workspaces/{workspace_id}/clients/{client_id}/restore to restore it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_clients_with_http_info(workspace_id, client_id, posted_client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int client_id: Numeric ID of the client (required)
        :param ClientPayload posted_client: Client (required)
        :return: ModelsClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "client_id", "posted_client"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_workspace_clients" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `put_workspace_clients`"  # noqa: E501
            )
        # verify the required parameter "client_id" is set
        if self.api_client.client_side_validation and ("client_id" not in params or params["client_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_id` when calling `put_workspace_clients`")  # noqa: E501
        # verify the required parameter "posted_client" is set
        if self.api_client.client_side_validation and (
            "posted_client" not in params or params["posted_client"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `posted_client` when calling `put_workspace_clients`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "client_id" in params:
            path_params["client_id"] = params["client_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "posted_client" in params:
            body_params = params["posted_client"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/clients/{client_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsClient",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def restore_client(self, workspace_id, client_id, **kwargs):  # noqa: E501
        """Restores client and related projects.  # noqa: E501

        Restores client and all related or specified projects from the given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_client(workspace_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int client_id: Numeric ID of the client (required)
        :param ProjectRestoreParams restore_params: Specify which projects should be restored with the client
        :return: ModelsClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.restore_client_with_http_info(workspace_id, client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_client_with_http_info(workspace_id, client_id, **kwargs)  # noqa: E501
            return data

    def restore_client_with_http_info(self, workspace_id, client_id, **kwargs):  # noqa: E501
        """Restores client and related projects.  # noqa: E501

        Restores client and all related or specified projects from the given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_client_with_http_info(workspace_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int client_id: Numeric ID of the client (required)
        :param ProjectRestoreParams restore_params: Specify which projects should be restored with the client
        :return: ModelsClient
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "client_id", "restore_params"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method restore_client" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `workspace_id` when calling `restore_client`")  # noqa: E501
        # verify the required parameter "client_id" is set
        if self.api_client.client_side_validation and ("client_id" not in params or params["client_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_id` when calling `restore_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "client_id" in params:
            path_params["client_id"] = params["client_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "restore_params" in params:
            body_params = params["restore_params"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/clients/{client_id}/restore",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsClient",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
