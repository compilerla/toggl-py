"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient


class CountriesApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_countries(self, **kwargs):  # noqa: E501
        """Countries  # noqa: E501

        Returns a list of existing countries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_countries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ModelsCountry]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_countries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_countries_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_countries_with_http_info(self, **kwargs):  # noqa: E501
        """Countries  # noqa: E501

        Returns a list of existing countries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_countries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ModelsCountry]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_countries" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/countries",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsCountry]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_countries_country_id_subdivisions(self, country_id, **kwargs):  # noqa: E501
        """CountrySubdivisions  # noqa: E501

        Returns a list of subdivisions for a specific country.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_countries_country_id_subdivisions(country_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int country_id: country id (required)
        :return: list[ModelsSubdivision]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_countries_country_id_subdivisions_with_http_info(country_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_countries_country_id_subdivisions_with_http_info(country_id, **kwargs)  # noqa: E501
            return data

    def get_countries_country_id_subdivisions_with_http_info(self, country_id, **kwargs):  # noqa: E501
        """CountrySubdivisions  # noqa: E501

        Returns a list of subdivisions for a specific country.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_countries_country_id_subdivisions_with_http_info(country_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int country_id: country id (required)
        :return: list[ModelsSubdivision]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["country_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_countries_country_id_subdivisions" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "country_id" is set
        if self.api_client.client_side_validation and (
            "country_id" not in params or params["country_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `country_id` when calling `get_countries_country_id_subdivisions`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "country_id" in params:
            path_params["country_id"] = params["country_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/countries/{country_id}/subdivisions",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsSubdivision]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
