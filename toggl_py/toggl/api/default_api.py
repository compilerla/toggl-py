"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient


class DefaultApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def reports_api_v3_workspace_workspace_id_comparative_post(self, workspace_id, **kwargs):  # noqa: E501
        """Load comparative report  # noqa: E501

        Returns comparative report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_comparative_post(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param ComparativeComparativePost comparative_post: Comparative reports conditions
        :return: ComparativeReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_comparative_post_with_http_info(
                workspace_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_comparative_post_with_http_info(
                workspace_id, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_comparative_post_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Load comparative report  # noqa: E501

        Returns comparative report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_comparative_post_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param ComparativeComparativePost comparative_post: Comparative reports conditions
        :return: ComparativeReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "comparative_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_comparative_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_comparative_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "comparative_post" in params:
            body_params = params["comparative_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/comparative",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ComparativeReport",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_data_trends_clients_post(
        self, workspace_id, data_trends_post, **kwargs
    ):  # noqa: E501
        """Load clients' data trends  # noqa: E501

        Returns the clients' data trends.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_data_trends_clients_post(workspace_id, data_trends_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param BaseDataTrendsPost data_trends_post: Report data trends conditions (required)
        :return: ClientsDataTrendsReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_data_trends_clients_post_with_http_info(
                workspace_id, data_trends_post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_data_trends_clients_post_with_http_info(
                workspace_id, data_trends_post, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_data_trends_clients_post_with_http_info(
        self, workspace_id, data_trends_post, **kwargs
    ):  # noqa: E501
        """Load clients' data trends  # noqa: E501

        Returns the clients' data trends.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_data_trends_clients_post_with_http_info(workspace_id, data_trends_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param BaseDataTrendsPost data_trends_post: Report data trends conditions (required)
        :return: ClientsDataTrendsReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "data_trends_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_data_trends_clients_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_data_trends_clients_post`"
            )  # noqa: E501
        # verify the required parameter "data_trends_post" is set
        if self.api_client.client_side_validation and (
            "data_trends_post" not in params or params["data_trends_post"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `data_trends_post` when calling `reports_api_v3_workspace_workspace_id_data_trends_clients_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "data_trends_post" in params:
            body_params = params["data_trends_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/data_trends/clients",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ClientsDataTrendsReport",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_data_trends_projects_post(self, workspace_id, **kwargs):  # noqa: E501
        """Load projects' data trends  # noqa: E501

        Returns projects' data trends.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_data_trends_projects_post(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param BaseDataTrendsPost data_trends_post: Data trends conditions
        :return: ProjectsDataTrendsReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_data_trends_projects_post_with_http_info(
                workspace_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_data_trends_projects_post_with_http_info(
                workspace_id, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_data_trends_projects_post_with_http_info(
        self, workspace_id, **kwargs
    ):  # noqa: E501
        """Load projects' data trends  # noqa: E501

        Returns projects' data trends.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_data_trends_projects_post_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param BaseDataTrendsPost data_trends_post: Data trends conditions
        :return: ProjectsDataTrendsReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "data_trends_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_data_trends_projects_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_data_trends_projects_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "data_trends_post" in params:
            body_params = params["data_trends_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/data_trends/projects",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ProjectsDataTrendsReport",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_data_trends_users_post(
        self, workspace_id, data_trends_post, **kwargs
    ):  # noqa: E501
        """Load users' data trends  # noqa: E501

        Returns users' data trends.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_data_trends_users_post(workspace_id, data_trends_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param BaseDataTrendsPost data_trends_post: Report data trends conditions (required)
        :return: UsersDataTrendsReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_data_trends_users_post_with_http_info(
                workspace_id, data_trends_post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_data_trends_users_post_with_http_info(
                workspace_id, data_trends_post, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_data_trends_users_post_with_http_info(
        self, workspace_id, data_trends_post, **kwargs
    ):  # noqa: E501
        """Load users' data trends  # noqa: E501

        Returns users' data trends.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_data_trends_users_post_with_http_info(workspace_id, data_trends_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param BaseDataTrendsPost data_trends_post: Report data trends conditions (required)
        :return: UsersDataTrendsReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "data_trends_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_data_trends_users_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_data_trends_users_post`"
            )  # noqa: E501
        # verify the required parameter "data_trends_post" is set
        if self.api_client.client_side_validation and (
            "data_trends_post" not in params or params["data_trends_post"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `data_trends_post` when calling `reports_api_v3_workspace_workspace_id_data_trends_users_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "data_trends_post" in params:
            body_params = params["data_trends_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/data_trends/users",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UsersDataTrendsReport",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_profitability_projects_post(self, workspace_id, **kwargs):  # noqa: E501
        """Load profitability projects report  # noqa: E501

        Returns profitability projects report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_profitability_projects_post(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param RequestsProjectProfitability project_profitability_post: Profitability projects report conditions
        :return: ProjectsReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_profitability_projects_post_with_http_info(
                workspace_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_profitability_projects_post_with_http_info(
                workspace_id, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_profitability_projects_post_with_http_info(
        self, workspace_id, **kwargs
    ):  # noqa: E501
        """Load profitability projects report  # noqa: E501

        Returns profitability projects report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_profitability_projects_post_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param RequestsProjectProfitability project_profitability_post: Profitability projects report conditions
        :return: ProjectsReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_profitability_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_profitability_projects_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_profitability_projects_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "project_profitability_post" in params:
            body_params = params["project_profitability_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/profitability/projects",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ProjectsReport",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
