"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient


class ExportsApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_me_export(self, **kwargs):  # noqa: E501
        """Get a list of objects to be downloaded  # noqa: E501

        List of objects to be downloaded for an user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_me_export(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ModelsDownloadRequestRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_me_export_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_me_export_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_me_export_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of objects to be downloaded  # noqa: E501

        List of objects to be downloaded for an user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_me_export_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ModelsDownloadRequestRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_me_export" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/export",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsDownloadRequestRecord]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_me_export_data_uuid_zip(self, **kwargs):  # noqa: E501
        """Get the zip file with download requests  # noqa: E501

        Get a zip file List of download requests from an user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_me_export_data_uuid_zip(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_me_export_data_uuid_zip_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_me_export_data_uuid_zip_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_me_export_data_uuid_zip_with_http_info(self, **kwargs):  # noqa: E501
        """Get the zip file with download requests  # noqa: E501

        Get a zip file List of download requests from an user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_me_export_data_uuid_zip_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_me_export_data_uuid_zip" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/export/data/{uuid}.zip",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_exports(self, workspace_id, **kwargs):  # noqa: E501
        """Get a list with the workspace download requests  # noqa: E501

        List of workspace download requests from a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_exports(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: list[ModelsDownloadRequestRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_exports_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_exports_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_exports_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Get a list with the workspace download requests  # noqa: E501

        List of workspace download requests from a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_exports_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: list[ModelsDownloadRequestRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_exports" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_exports`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/exports",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsDownloadRequestRecord]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_exports_data_uuid_zip(self, workspace_id, **kwargs):  # noqa: E501
        """Get the zip file with workspace download requests  # noqa: E501

        Send a zip file List of workspace download requests from a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_exports_data_uuid_zip(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_exports_data_uuid_zip_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_exports_data_uuid_zip_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_exports_data_uuid_zip_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Get the zip file with workspace download requests  # noqa: E501

        Send a zip file List of workspace download requests from a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_exports_data_uuid_zip_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_workspace_exports_data_uuid_zip" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_exports_data_uuid_zip`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/exports/data/{uuid}.zip",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def insights_api_v1_workspace_workspace_id_profitability_employees_extension_post(
        self, parameters, **kwargs
    ):  # noqa: E501
        """Export employee profitability insights  # noqa: E501

        Downloads employee profitability insights in the specified format: csv or xlsx.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insights_api_v1_workspace_workspace_id_profitability_employees_extension_post(parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestsEmployeeProfitability parameters: Parameters for report (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.insights_api_v1_workspace_workspace_id_profitability_employees_extension_post_with_http_info(
                parameters, **kwargs
            )  # noqa: E501
        else:
            (data) = self.insights_api_v1_workspace_workspace_id_profitability_employees_extension_post_with_http_info(
                parameters, **kwargs
            )  # noqa: E501
            return data

    def insights_api_v1_workspace_workspace_id_profitability_employees_extension_post_with_http_info(
        self, parameters, **kwargs
    ):  # noqa: E501
        """Export employee profitability insights  # noqa: E501

        Downloads employee profitability insights in the specified format: csv or xlsx.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insights_api_v1_workspace_workspace_id_profitability_employees_extension_post_with_http_info(parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestsEmployeeProfitability parameters: Parameters for report (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["parameters"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insights_api_v1_workspace_workspace_id_profitability_employees_extension_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "parameters" is set
        if self.api_client.client_side_validation and (
            "parameters" not in params or params["parameters"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameters` when calling `insights_api_v1_workspace_workspace_id_profitability_employees_extension_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "parameters" in params:
            body_params = params["parameters"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/csv", "text/xlsx"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/insights/api/v1/workspace/{workspace_id}/profitability/employees.{extension}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def insights_api_v1_workspace_workspace_id_profitability_projects_extension_post(
        self, parameters, extension, **kwargs
    ):  # noqa: E501
        """Export profitability project insights  # noqa: E501

        Downloads profitability project insights in the specified format: csv or xlsx.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insights_api_v1_workspace_workspace_id_profitability_projects_extension_post(parameters, extension, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestsProjectProfitability parameters: Parameters for report (required)
        :param str extension: csv,xlsx (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.insights_api_v1_workspace_workspace_id_profitability_projects_extension_post_with_http_info(
                parameters, extension, **kwargs
            )  # noqa: E501
        else:
            (data) = self.insights_api_v1_workspace_workspace_id_profitability_projects_extension_post_with_http_info(
                parameters, extension, **kwargs
            )  # noqa: E501
            return data

    def insights_api_v1_workspace_workspace_id_profitability_projects_extension_post_with_http_info(
        self, parameters, extension, **kwargs
    ):  # noqa: E501
        """Export profitability project insights  # noqa: E501

        Downloads profitability project insights in the specified format: csv or xlsx.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insights_api_v1_workspace_workspace_id_profitability_projects_extension_post_with_http_info(parameters, extension, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RequestsProjectProfitability parameters: Parameters for report (required)
        :param str extension: csv,xlsx (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["parameters", "extension"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insights_api_v1_workspace_workspace_id_profitability_projects_extension_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "parameters" is set
        if self.api_client.client_side_validation and (
            "parameters" not in params or params["parameters"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `parameters` when calling `insights_api_v1_workspace_workspace_id_profitability_projects_extension_post`"
            )  # noqa: E501
        # verify the required parameter "extension" is set
        if self.api_client.client_side_validation and ("extension" not in params or params["extension"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `extension` when calling `insights_api_v1_workspace_workspace_id_profitability_projects_extension_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "extension" in params:
            path_params["extension"] = params["extension"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "parameters" in params:
            body_params = params["parameters"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/csv", "text/xlsx"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/insights/api/v1/workspace/{workspace_id}/profitability/projects.{extension}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def insights_api_v1_workspace_workspace_id_trends_projects_extension_post(
        self, workspace_id, extension, **kwargs
    ):  # noqa: E501
        """Export projects data trends  # noqa: E501

        Downloads projects data trends in the specified format: csv or xlsx.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insights_api_v1_workspace_workspace_id_trends_projects_extension_post(workspace_id, extension, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param str extension: csv,xlsx (required)
        :param ProjectsProjectTrend project_trend: Projects filter conditions
        :return: list[ProjectsProjectTrends]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.insights_api_v1_workspace_workspace_id_trends_projects_extension_post_with_http_info(
                workspace_id, extension, **kwargs
            )  # noqa: E501
        else:
            (data) = self.insights_api_v1_workspace_workspace_id_trends_projects_extension_post_with_http_info(
                workspace_id, extension, **kwargs
            )  # noqa: E501
            return data

    def insights_api_v1_workspace_workspace_id_trends_projects_extension_post_with_http_info(
        self, workspace_id, extension, **kwargs
    ):  # noqa: E501
        """Export projects data trends  # noqa: E501

        Downloads projects data trends in the specified format: csv or xlsx.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.insights_api_v1_workspace_workspace_id_trends_projects_extension_post_with_http_info(workspace_id, extension, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param str extension: csv,xlsx (required)
        :param ProjectsProjectTrend project_trend: Projects filter conditions
        :return: list[ProjectsProjectTrends]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "extension", "project_trend"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method insights_api_v1_workspace_workspace_id_trends_projects_extension_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `insights_api_v1_workspace_workspace_id_trends_projects_extension_post`"
            )  # noqa: E501
        # verify the required parameter "extension" is set
        if self.api_client.client_side_validation and ("extension" not in params or params["extension"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `extension` when calling `insights_api_v1_workspace_workspace_id_trends_projects_extension_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "extension" in params:
            path_params["extension"] = params["extension"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "project_trend" in params:
            body_params = params["project_trend"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/insights/api/v1/workspace/{workspace_id}/trends/projects.{extension}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ProjectsProjectTrends]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_me_export(self, data_export_object, **kwargs):  # noqa: E501
        """Post an object which data to be downloaded  # noqa: E501

        An object which data to be downloaded for an user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_me_export(data_export_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportPayload data_export_object: Objects to export (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_me_export_with_http_info(data_export_object, **kwargs)  # noqa: E501
        else:
            (data) = self.post_me_export_with_http_info(data_export_object, **kwargs)  # noqa: E501
            return data

    def post_me_export_with_http_info(self, data_export_object, **kwargs):  # noqa: E501
        """Post an object which data to be downloaded  # noqa: E501

        An object which data to be downloaded for an user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_me_export_with_http_info(data_export_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportPayload data_export_object: Objects to export (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["data_export_object"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_me_export" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "data_export_object" is set
        if self.api_client.client_side_validation and (
            "data_export_object" not in params or params["data_export_object"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `data_export_object` when calling `post_me_export`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "data_export_object" in params:
            body_params = params["data_export_object"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/export",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_exports(self, workspace_id, tokens_list, **kwargs):  # noqa: E501
        """Post a list with the workspace to be downloaded  # noqa: E501

        List of workspaces downloaded from a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_exports(workspace_id, tokens_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param list[str] tokens_list: Objects to export (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_exports_with_http_info(workspace_id, tokens_list, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_exports_with_http_info(workspace_id, tokens_list, **kwargs)  # noqa: E501
            return data

    def post_workspace_exports_with_http_info(self, workspace_id, tokens_list, **kwargs):  # noqa: E501
        """Post a list with the workspace to be downloaded  # noqa: E501

        List of workspaces downloaded from a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_exports_with_http_info(workspace_id, tokens_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param list[str] tokens_list: Objects to export (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "tokens_list"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_workspace_exports" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_exports`"
            )  # noqa: E501
        # verify the required parameter "tokens_list" is set
        if self.api_client.client_side_validation and (
            "tokens_list" not in params or params["tokens_list"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `tokens_list` when calling `post_workspace_exports`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "tokens_list" in params:
            body_params = params["tokens_list"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/exports",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_shared_report_token_csv_post(self, report_token, **kwargs):  # noqa: E501
        """Export CSV for saved report  # noqa: E501

        <p>Downloads a previously saved report in csv.</p> <p><b>Authentication</b></p><p>A public report is accessible by anyone, a private one is only accessible by the report's owner or workspace admin. If the criteria aren't met it returns 403 status code.</p> <p><b>Parameters</b></p><p>The report can be executed without parameters, and in this case the saved or default parameters will be used.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_shared_report_token_csv_post(report_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_token: Token for the saved report (required)
        :param str start_date: Starting date in the format YYYY-MM-DD
        :param str end_date: End date in the format YYYY-MM-DD
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_shared_report_token_csv_post_with_http_info(report_token, **kwargs)  # noqa: E501
        else:
            (data) = self.reports_api_v3_shared_report_token_csv_post_with_http_info(report_token, **kwargs)  # noqa: E501
            return data

    def reports_api_v3_shared_report_token_csv_post_with_http_info(self, report_token, **kwargs):  # noqa: E501
        """Export CSV for saved report  # noqa: E501

        <p>Downloads a previously saved report in csv.</p> <p><b>Authentication</b></p><p>A public report is accessible by anyone, a private one is only accessible by the report's owner or workspace admin. If the criteria aren't met it returns 403 status code.</p> <p><b>Parameters</b></p><p>The report can be executed without parameters, and in this case the saved or default parameters will be used.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_shared_report_token_csv_post_with_http_info(report_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_token: Token for the saved report (required)
        :param str start_date: Starting date in the format YYYY-MM-DD
        :param str end_date: End date in the format YYYY-MM-DD
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["report_token", "start_date", "end_date"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method reports_api_v3_shared_report_token_csv_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "report_token" is set
        if self.api_client.client_side_validation and (
            "report_token" not in params or params["report_token"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `report_token` when calling `reports_api_v3_shared_report_token_csv_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "report_token" in params:
            path_params["report_token"] = params["report_token"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "end_date" in params:
            body_params = params["end_date"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/csv"])  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["text/plain"])  # noqa: E501  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/shared/{report_token}.csv",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_shared_report_token_pdf_post(self, report_token, **kwargs):  # noqa: E501
        """Export saved report in pdf format  # noqa: E501

        <p><b>Authentication</b></p><p>A public report is accessible by anyone, a private one is only accessible by the report's owner or workspace admin. If the criteria aren't met it returns 403 status code.</p> <p><b>Parameters</b></p><p>The report can be executed without parameters, and in this case the saved or default parameters will be used.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_shared_report_token_pdf_post(report_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_token: Token for the saved report (required)
        :param str start_date: Starting date in the format YYYY-MM-DD
        :param str end_date: End date in the format YYYY-MM-DD
        :param str display_mode: Display mode for time data, only for detailed reports. Possible values: 'date_only', 'time_only', 'date_time'. Default value: 'date_and_time'
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_shared_report_token_pdf_post_with_http_info(report_token, **kwargs)  # noqa: E501
        else:
            (data) = self.reports_api_v3_shared_report_token_pdf_post_with_http_info(report_token, **kwargs)  # noqa: E501
            return data

    def reports_api_v3_shared_report_token_pdf_post_with_http_info(self, report_token, **kwargs):  # noqa: E501
        """Export saved report in pdf format  # noqa: E501

        <p><b>Authentication</b></p><p>A public report is accessible by anyone, a private one is only accessible by the report's owner or workspace admin. If the criteria aren't met it returns 403 status code.</p> <p><b>Parameters</b></p><p>The report can be executed without parameters, and in this case the saved or default parameters will be used.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_shared_report_token_pdf_post_with_http_info(report_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_token: Token for the saved report (required)
        :param str start_date: Starting date in the format YYYY-MM-DD
        :param str end_date: End date in the format YYYY-MM-DD
        :param str display_mode: Display mode for time data, only for detailed reports. Possible values: 'date_only', 'time_only', 'date_time'. Default value: 'date_and_time'
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["report_token", "start_date", "end_date", "display_mode"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method reports_api_v3_shared_report_token_pdf_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "report_token" is set
        if self.api_client.client_side_validation and (
            "report_token" not in params or params["report_token"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `report_token` when calling `reports_api_v3_shared_report_token_pdf_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "report_token" in params:
            path_params["report_token"] = params["report_token"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "display_mode" in params:
            body_params = params["display_mode"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/pdf"])  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["text/plain"])  # noqa: E501  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/shared/{report_token}/pdf",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_shared_report_token_xlsx_post(self, report_token, **kwargs):  # noqa: E501
        """Export XSLX saved report  # noqa: E501

        <p>Downloads a previously saved report in xlsx.</p> <p><b>Authentication</b></p><p>A public report is accessible by anyone, a private one is only accessible by the report's owner or workspace admin. If the criteria aren't met it returns 403 status code.</p> <p><b>Parameters</b></p><p>The report can be executed without parameters, and in this case the saved or default parameters will be used.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_shared_report_token_xlsx_post(report_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_token: Token for the saved report (required)
        :param str start_date: Starting date in the format YYYY-MM-DD
        :param str end_date: End date in the format YYYY-MM-DD
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_shared_report_token_xlsx_post_with_http_info(report_token, **kwargs)  # noqa: E501
        else:
            (data) = self.reports_api_v3_shared_report_token_xlsx_post_with_http_info(report_token, **kwargs)  # noqa: E501
            return data

    def reports_api_v3_shared_report_token_xlsx_post_with_http_info(self, report_token, **kwargs):  # noqa: E501
        """Export XSLX saved report  # noqa: E501

        <p>Downloads a previously saved report in xlsx.</p> <p><b>Authentication</b></p><p>A public report is accessible by anyone, a private one is only accessible by the report's owner or workspace admin. If the criteria aren't met it returns 403 status code.</p> <p><b>Parameters</b></p><p>The report can be executed without parameters, and in this case the saved or default parameters will be used.</p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_shared_report_token_xlsx_post_with_http_info(report_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str report_token: Token for the saved report (required)
        :param str start_date: Starting date in the format YYYY-MM-DD
        :param str end_date: End date in the format YYYY-MM-DD
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["report_token", "start_date", "end_date"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method reports_api_v3_shared_report_token_xlsx_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "report_token" is set
        if self.api_client.client_side_validation and (
            "report_token" not in params or params["report_token"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `report_token` when calling `reports_api_v3_shared_report_token_xlsx_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "report_token" in params:
            path_params["report_token"] = params["report_token"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "end_date" in params:
            body_params = params["end_date"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/xlsx"])  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(["text/plain"])  # noqa: E501  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/shared/{report_token}.xlsx",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_search_time_entries_extension_post(
        self, workspace_id, extension, detailed_export_post, **kwargs
    ):  # noqa: E501
        """Export detailed report  # noqa: E501

        Downloads detailed report in the specified format: csv or xlsx.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_search_time_entries_extension_post(workspace_id, extension, detailed_export_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param str extension: csv,xlsx (required)
        :param DetailedSearchExportPost detailed_export_post: Detailed report conditions (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_search_time_entries_extension_post_with_http_info(
                workspace_id, extension, detailed_export_post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_search_time_entries_extension_post_with_http_info(
                workspace_id, extension, detailed_export_post, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_search_time_entries_extension_post_with_http_info(
        self, workspace_id, extension, detailed_export_post, **kwargs
    ):  # noqa: E501
        """Export detailed report  # noqa: E501

        Downloads detailed report in the specified format: csv or xlsx.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_search_time_entries_extension_post_with_http_info(workspace_id, extension, detailed_export_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param str extension: csv,xlsx (required)
        :param DetailedSearchExportPost detailed_export_post: Detailed report conditions (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "extension", "detailed_export_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_search_time_entries_extension_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_search_time_entries_extension_post`"
            )  # noqa: E501
        # verify the required parameter "extension" is set
        if self.api_client.client_side_validation and ("extension" not in params or params["extension"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `extension` when calling `reports_api_v3_workspace_workspace_id_search_time_entries_extension_post`"
            )  # noqa: E501
        # verify the required parameter "detailed_export_post" is set
        if self.api_client.client_side_validation and (
            "detailed_export_post" not in params or params["detailed_export_post"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `detailed_export_post` when calling `reports_api_v3_workspace_workspace_id_search_time_entries_extension_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "extension" in params:
            path_params["extension"] = params["extension"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "detailed_export_post" in params:
            body_params = params["detailed_export_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/csv", "text/xlsx"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/search/time_entries.{extension}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_search_time_entries_pdf_post(
        self, workspace_id, detailed_export_pdf_post, **kwargs
    ):  # noqa: E501
        """Export detailed report  # noqa: E501

        Downloads detailed report in pdf format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_search_time_entries_pdf_post(workspace_id, detailed_export_pdf_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param DetailedExportPDFPost detailed_export_pdf_post: Detailed report conditions (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_search_time_entries_pdf_post_with_http_info(
                workspace_id, detailed_export_pdf_post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_search_time_entries_pdf_post_with_http_info(
                workspace_id, detailed_export_pdf_post, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_search_time_entries_pdf_post_with_http_info(
        self, workspace_id, detailed_export_pdf_post, **kwargs
    ):  # noqa: E501
        """Export detailed report  # noqa: E501

        Downloads detailed report in pdf format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_search_time_entries_pdf_post_with_http_info(workspace_id, detailed_export_pdf_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param DetailedExportPDFPost detailed_export_pdf_post: Detailed report conditions (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "detailed_export_pdf_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_search_time_entries_pdf_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_search_time_entries_pdf_post`"
            )  # noqa: E501
        # verify the required parameter "detailed_export_pdf_post" is set
        if self.api_client.client_side_validation and (
            "detailed_export_pdf_post" not in params or params["detailed_export_pdf_post"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `detailed_export_pdf_post` when calling `reports_api_v3_workspace_workspace_id_search_time_entries_pdf_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "detailed_export_pdf_post" in params:
            body_params = params["detailed_export_pdf_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/pdf"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/search/time_entries.pdf",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_summary_time_entries_extension_post(
        self, workspace_id, extension, summary_export_post, **kwargs
    ):  # noqa: E501
        """Export summary report  # noqa: E501

        Downloads summary report in the specified in the specified format: csv or xlsx.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_summary_time_entries_extension_post(workspace_id, extension, summary_export_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param str extension: csv,xlsx (required)
        :param SummaryExportPost summary_export_post: Summary report conditions (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_summary_time_entries_extension_post_with_http_info(
                workspace_id, extension, summary_export_post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_summary_time_entries_extension_post_with_http_info(
                workspace_id, extension, summary_export_post, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_summary_time_entries_extension_post_with_http_info(
        self, workspace_id, extension, summary_export_post, **kwargs
    ):  # noqa: E501
        """Export summary report  # noqa: E501

        Downloads summary report in the specified in the specified format: csv or xlsx.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_summary_time_entries_extension_post_with_http_info(workspace_id, extension, summary_export_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param str extension: csv,xlsx (required)
        :param SummaryExportPost summary_export_post: Summary report conditions (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "extension", "summary_export_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_summary_time_entries_extension_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_summary_time_entries_extension_post`"
            )  # noqa: E501
        # verify the required parameter "extension" is set
        if self.api_client.client_side_validation and ("extension" not in params or params["extension"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `extension` when calling `reports_api_v3_workspace_workspace_id_summary_time_entries_extension_post`"
            )  # noqa: E501
        # verify the required parameter "summary_export_post" is set
        if self.api_client.client_side_validation and (
            "summary_export_post" not in params or params["summary_export_post"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `summary_export_post` when calling `reports_api_v3_workspace_workspace_id_summary_time_entries_extension_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "extension" in params:
            path_params["extension"] = params["extension"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "summary_export_post" in params:
            body_params = params["summary_export_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/csv", "text/xlsx"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/summary/time_entries.{extension}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_summary_time_entries_pdf_post(
        self, workspace_id, summary_export_pdf_post, **kwargs
    ):  # noqa: E501
        """Export summary report  # noqa: E501

        Downloads summary report in pdf format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_summary_time_entries_pdf_post(workspace_id, summary_export_pdf_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param SummaryExportPDFPost summary_export_pdf_post: Summary report conditions (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_summary_time_entries_pdf_post_with_http_info(
                workspace_id, summary_export_pdf_post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_summary_time_entries_pdf_post_with_http_info(
                workspace_id, summary_export_pdf_post, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_summary_time_entries_pdf_post_with_http_info(
        self, workspace_id, summary_export_pdf_post, **kwargs
    ):  # noqa: E501
        """Export summary report  # noqa: E501

        Downloads summary report in pdf format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_summary_time_entries_pdf_post_with_http_info(workspace_id, summary_export_pdf_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param SummaryExportPDFPost summary_export_pdf_post: Summary report conditions (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "summary_export_pdf_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_summary_time_entries_pdf_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_summary_time_entries_pdf_post`"
            )  # noqa: E501
        # verify the required parameter "summary_export_pdf_post" is set
        if self.api_client.client_side_validation and (
            "summary_export_pdf_post" not in params or params["summary_export_pdf_post"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `summary_export_pdf_post` when calling `reports_api_v3_workspace_workspace_id_summary_time_entries_pdf_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "summary_export_pdf_post" in params:
            body_params = params["summary_export_pdf_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/pdf"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/summary/time_entries.pdf",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_weekly_time_entries_csv_post(
        self, workspace_id, weekly_export_post, **kwargs
    ):  # noqa: E501
        """Export weekly report  # noqa: E501

        Downloads weekly report in csv format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_weekly_time_entries_csv_post(workspace_id, weekly_export_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param WeeklyExportPost weekly_export_post: Weekly report conditions (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_weekly_time_entries_csv_post_with_http_info(
                workspace_id, weekly_export_post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_weekly_time_entries_csv_post_with_http_info(
                workspace_id, weekly_export_post, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_weekly_time_entries_csv_post_with_http_info(
        self, workspace_id, weekly_export_post, **kwargs
    ):  # noqa: E501
        """Export weekly report  # noqa: E501

        Downloads weekly report in csv format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_weekly_time_entries_csv_post_with_http_info(workspace_id, weekly_export_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param WeeklyExportPost weekly_export_post: Weekly report conditions (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "weekly_export_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_weekly_time_entries_csv_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_weekly_time_entries_csv_post`"
            )  # noqa: E501
        # verify the required parameter "weekly_export_post" is set
        if self.api_client.client_side_validation and (
            "weekly_export_post" not in params or params["weekly_export_post"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `weekly_export_post` when calling `reports_api_v3_workspace_workspace_id_weekly_time_entries_csv_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "weekly_export_post" in params:
            body_params = params["weekly_export_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/csv"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/weekly/time_entries.csv",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_weekly_time_entries_pdf_post(
        self, workspace_id, weekly_export_pdf_post, **kwargs
    ):  # noqa: E501
        """Export weekly report  # noqa: E501

        Downloads weekly report in pdf format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_weekly_time_entries_pdf_post(workspace_id, weekly_export_pdf_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param WeeklyExportPDFPost weekly_export_pdf_post: Weekly report conditions (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_weekly_time_entries_pdf_post_with_http_info(
                workspace_id, weekly_export_pdf_post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_weekly_time_entries_pdf_post_with_http_info(
                workspace_id, weekly_export_pdf_post, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_weekly_time_entries_pdf_post_with_http_info(
        self, workspace_id, weekly_export_pdf_post, **kwargs
    ):  # noqa: E501
        """Export weekly report  # noqa: E501

        Downloads weekly report in pdf format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_weekly_time_entries_pdf_post_with_http_info(workspace_id, weekly_export_pdf_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param WeeklyExportPDFPost weekly_export_pdf_post: Weekly report conditions (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "weekly_export_pdf_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_weekly_time_entries_pdf_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_weekly_time_entries_pdf_post`"
            )  # noqa: E501
        # verify the required parameter "weekly_export_pdf_post" is set
        if self.api_client.client_side_validation and (
            "weekly_export_pdf_post" not in params or params["weekly_export_pdf_post"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `weekly_export_pdf_post` when calling `reports_api_v3_workspace_workspace_id_weekly_time_entries_pdf_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "weekly_export_pdf_post" in params:
            body_params = params["weekly_export_pdf_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/pdf"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/weekly/time_entries.pdf",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
