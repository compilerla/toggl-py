"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient
from toggl.models.handlerfavorites_payload import HandlerfavoritesPayload  # noqa: F401
from toggl.models.models_favorite import ModelsFavorite  # noqa: F401


class FavoritesApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_favorite(self, favorite: HandlerfavoritesPayload, **kwargs) -> ModelsFavorite:  # noqa: E501
        """Create a favorite  # noqa: E501

        This endpoint allows the creation of a favorite given some parameters. The workspace is required, as well as either description or project (no favorite without both will be accepted). The user is also required, but it already goes in the authentication. Also, the user must have access to all resources being referenced in the favorite attributes, and these resources should have valid relationships. For instance, if you want a favorite in a given workspace and with some tags, the tags must belong to that workspace. In case of user having no access to an attribute, a 403 status is returned, if the attributes don't relate correctly between themselves the status returned will be 400.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_favorite(favorite, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HandlerfavoritesPayload favorite: Favorite details (required)
        :param bool meta: Should the response contain data for meta entities
        :return: ModelsFavorite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_favorite_with_http_info(favorite, **kwargs)  # noqa: E501
        else:
            (data) = self.create_favorite_with_http_info(favorite, **kwargs)  # noqa: E501
            return data

    def create_favorite_with_http_info(self, favorite: HandlerfavoritesPayload, **kwargs) -> ModelsFavorite:  # noqa: E501
        """Create a favorite  # noqa: E501

        This endpoint allows the creation of a favorite given some parameters. The workspace is required, as well as either description or project (no favorite without both will be accepted). The user is also required, but it already goes in the authentication. Also, the user must have access to all resources being referenced in the favorite attributes, and these resources should have valid relationships. For instance, if you want a favorite in a given workspace and with some tags, the tags must belong to that workspace. In case of user having no access to an attribute, a 403 status is returned, if the attributes don't relate correctly between themselves the status returned will be 400.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_favorite_with_http_info(favorite, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HandlerfavoritesPayload favorite: Favorite details (required)
        :param bool meta: Should the response contain data for meta entities
        :return: ModelsFavorite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["favorite", "meta"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method create_favorite" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "favorite" is set
        if self.api_client.client_side_validation and ("favorite" not in params or params["favorite"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `favorite` when calling `create_favorite`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "meta" in params:
            query_params.append(("meta", params["meta"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "favorite" in params:
            body_params = params["favorite"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/favorites",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsFavorite",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_favorite(self, **kwargs):  # noqa: E501
        """Deletes a given favorite  # noqa: E501

        Deletes a given favorite logically from database, as well as its tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_favorite(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_favorite_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_favorite_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_favorite_with_http_info(self, **kwargs):  # noqa: E501
        """Deletes a given favorite  # noqa: E501

        Deletes a given favorite logically from database, as well as its tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_favorite_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_favorite" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/favorites/{favorite_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_favorites(self, **kwargs) -> list[ModelsFavorite]:  # noqa: E501
        """Get a list of favorites  # noqa: E501

        Gets all favorites for the requesting user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_favorites(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int since: Retrieve favorites created/deleted since this date using UNIX timestamp.
        :return: list[ModelsFavorite]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_favorites_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_favorites_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_favorites_with_http_info(self, **kwargs) -> list[ModelsFavorite]:  # noqa: E501
        """Get a list of favorites  # noqa: E501

        Gets all favorites for the requesting user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_favorites_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int since: Retrieve favorites created/deleted since this date using UNIX timestamp.
        :return: list[ModelsFavorite]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["since"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_favorites" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "since" in params:
            form_params.append(("since", params["since"]))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/favorites",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsFavorite]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_favorites_suggestions(self, **kwargs) -> list[ModelsFavorite]:  # noqa: E501
        """Generates and returns a list of suggested favorites.  # noqa: E501

        It will create 3 favorites based on past user's TE activity and return them. Suggested favorites will be created only once for a given user, and only if the user has never created a favorite before (either manually or by a previous suggestion request). If there is no past TE data there won't be suggested favorites either.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_favorites_suggestions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ModelsFavorite]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_favorites_suggestions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_favorites_suggestions_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_favorites_suggestions_with_http_info(self, **kwargs) -> list[ModelsFavorite]:  # noqa: E501
        """Generates and returns a list of suggested favorites.  # noqa: E501

        It will create 3 favorites based on past user's TE activity and return them. Suggested favorites will be created only once for a given user, and only if the user has never created a favorite before (either manually or by a previous suggestion request). If there is no past TE data there won't be suggested favorites either.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_favorites_suggestions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ModelsFavorite]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_favorites_suggestions" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/favorites/suggestions",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsFavorite]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_favorite(self, favorite: HandlerfavoritesPayload, **kwargs) -> ModelsFavorite:  # noqa: E501
        """Update an array of favorites  # noqa: E501

        This endpoint allows updating an array of favorites. It follow all the requirements and behavior from the [post] (Create Favorite) counterpart.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_favorite(favorite, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HandlerfavoritesPayload favorite: Favorite details (required)
        :param bool meta: Should the response contain data for meta entities
        :return: ModelsFavorite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_favorite_with_http_info(favorite, **kwargs)  # noqa: E501
        else:
            (data) = self.update_favorite_with_http_info(favorite, **kwargs)  # noqa: E501
            return data

    def update_favorite_with_http_info(self, favorite: HandlerfavoritesPayload, **kwargs) -> ModelsFavorite:  # noqa: E501
        """Update an array of favorites  # noqa: E501

        This endpoint allows updating an array of favorites. It follow all the requirements and behavior from the [post] (Create Favorite) counterpart.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_favorite_with_http_info(favorite, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HandlerfavoritesPayload favorite: Favorite details (required)
        :param bool meta: Should the response contain data for meta entities
        :return: ModelsFavorite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["favorite", "meta"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method update_favorite" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "favorite" is set
        if self.api_client.client_side_validation and ("favorite" not in params or params["favorite"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `favorite` when calling `update_favorite`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "meta" in params:
            query_params.append(("meta", params["meta"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "favorite" in params:
            body_params = params["favorite"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/favorites",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsFavorite",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
