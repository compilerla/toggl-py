"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient


class GoalsApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def goals_cadences_get(self, **kwargs):  # noqa: E501
        """Get a list of goal cadences  # noqa: E501

        Gets all cadences for the goals requested for the asking user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goals_cadences_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int amount:
        :param str archived:
        :param list[int] goal:
        :param int offset:
        :return: list[GoalsCadenceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.goals_cadences_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.goals_cadences_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def goals_cadences_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of goal cadences  # noqa: E501

        Gets all cadences for the goals requested for the asking user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goals_cadences_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int amount:
        :param str archived:
        :param list[int] goal:
        :param int offset:
        :return: list[GoalsCadenceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["amount", "archived", "goal", "offset"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method goals_cadences_get" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "amount" in params:
            query_params.append(("amount", params["amount"]))  # noqa: E501
        if "archived" in params:
            query_params.append(("archived", params["archived"]))  # noqa: E501
        if "goal" in params:
            query_params.append(("goal", params["goal"]))  # noqa: E501
            collection_formats["goal"] = "csv"  # noqa: E501
        if "offset" in params:
            query_params.append(("offset", params["offset"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/goals/cadences",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[GoalsCadenceResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def goals_get(self, **kwargs):  # noqa: E501
        """Get a list of goals  # noqa: E501

        Gets all goals for the requesting user. The returned Goal will have only one type, but may have multiple on the same type, like 3 projects, or more than one task. Billable will always be one.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goals_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str archived:
        :param int workspace_id:
        :return: list[ModelsPlainGoal]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.goals_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.goals_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def goals_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of goals  # noqa: E501

        Gets all goals for the requesting user. The returned Goal will have only one type, but may have multiple on the same type, like 3 projects, or more than one task. Billable will always be one.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goals_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str archived:
        :param int workspace_id:
        :return: list[ModelsPlainGoal]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["archived", "workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method goals_get" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "archived" in params:
            query_params.append(("archived", params["archived"]))  # noqa: E501
        if "workspace_id" in params:
            query_params.append(("workspace_id", params["workspace_id"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/goals",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsPlainGoal]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def goals_goal_id_delete(self, goal_id, **kwargs):  # noqa: E501
        """Delete one goal  # noqa: E501

        Delete a goal that belongs to the calling user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goals_goal_id_delete(goal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int goal_id: Goal ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.goals_goal_id_delete_with_http_info(goal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.goals_goal_id_delete_with_http_info(goal_id, **kwargs)  # noqa: E501
            return data

    def goals_goal_id_delete_with_http_info(self, goal_id, **kwargs):  # noqa: E501
        """Delete one goal  # noqa: E501

        Delete a goal that belongs to the calling user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goals_goal_id_delete_with_http_info(goal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int goal_id: Goal ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["goal_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method goals_goal_id_delete" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "goal_id" is set
        if self.api_client.client_side_validation and ("goal_id" not in params or params["goal_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `goal_id` when calling `goals_goal_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "goal_id" in params:
            path_params["goal_id"] = params["goal_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/goals/{goal_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def goals_goal_id_get(self, goal_id, **kwargs):  # noqa: E501
        """Get one goal  # noqa: E501

        Gets a goal that belongs to the calling user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goals_goal_id_get(goal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int goal_id: Goal ID (required)
        :return: ModelsPlainGoal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.goals_goal_id_get_with_http_info(goal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.goals_goal_id_get_with_http_info(goal_id, **kwargs)  # noqa: E501
            return data

    def goals_goal_id_get_with_http_info(self, goal_id, **kwargs):  # noqa: E501
        """Get one goal  # noqa: E501

        Gets a goal that belongs to the calling user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goals_goal_id_get_with_http_info(goal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int goal_id: Goal ID (required)
        :return: ModelsPlainGoal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["goal_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method goals_goal_id_get" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "goal_id" is set
        if self.api_client.client_side_validation and ("goal_id" not in params or params["goal_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `goal_id` when calling `goals_goal_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "goal_id" in params:
            path_params["goal_id"] = params["goal_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/goals/{goal_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsPlainGoal",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def goals_goal_id_patch(self, goal, **kwargs):  # noqa: E501
        """Update a Goal  # noqa: E501

        Update a goal with the updateable parameters given by UpdateParams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goals_goal_id_patch(goal, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoalsUpdateParams goal: Goal details (required)
        :return: ModelsGoal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.goals_goal_id_patch_with_http_info(goal, **kwargs)  # noqa: E501
        else:
            (data) = self.goals_goal_id_patch_with_http_info(goal, **kwargs)  # noqa: E501
            return data

    def goals_goal_id_patch_with_http_info(self, goal, **kwargs):  # noqa: E501
        """Update a Goal  # noqa: E501

        Update a goal with the updateable parameters given by UpdateParams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goals_goal_id_patch_with_http_info(goal, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoalsUpdateParams goal: Goal details (required)
        :return: ModelsGoal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["goal"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method goals_goal_id_patch" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "goal" is set
        if self.api_client.client_side_validation and ("goal" not in params or params["goal"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `goal` when calling `goals_goal_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "goal" in params:
            body_params = params["goal"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/goals/{goal_id}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsGoal",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def goals_goal_id_stats_get(self, goal_id, **kwargs):  # noqa: E501
        """Get stats for a goal  # noqa: E501

        Gets stats for a given goal that must belong to the calling user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goals_goal_id_stats_get(goal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int goal_id: Goal ID (required)
        :return: ModelsGoalStats
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.goals_goal_id_stats_get_with_http_info(goal_id, **kwargs)  # noqa: E501
        else:
            (data) = self.goals_goal_id_stats_get_with_http_info(goal_id, **kwargs)  # noqa: E501
            return data

    def goals_goal_id_stats_get_with_http_info(self, goal_id, **kwargs):  # noqa: E501
        """Get stats for a goal  # noqa: E501

        Gets stats for a given goal that must belong to the calling user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goals_goal_id_stats_get_with_http_info(goal_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int goal_id: Goal ID (required)
        :return: ModelsGoalStats
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["goal_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method goals_goal_id_stats_get" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "goal_id" is set
        if self.api_client.client_side_validation and ("goal_id" not in params or params["goal_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `goal_id` when calling `goals_goal_id_stats_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "goal_id" in params:
            path_params["goal_id"] = params["goal_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/goals/{goal_id}/stats",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsGoalStats",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def goals_insight_post(self, goal, **kwargs):  # noqa: E501
        """Get a insight  # noqa: E501

        Get data insight for user simulating how much the user would accomplish for a given Goal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goals_insight_post(goal, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoalsParamsInsight goal: Insight details (required)
        :return: GoalsInsightResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.goals_insight_post_with_http_info(goal, **kwargs)  # noqa: E501
        else:
            (data) = self.goals_insight_post_with_http_info(goal, **kwargs)  # noqa: E501
            return data

    def goals_insight_post_with_http_info(self, goal, **kwargs):  # noqa: E501
        """Get a insight  # noqa: E501

        Get data insight for user simulating how much the user would accomplish for a given Goal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goals_insight_post_with_http_info(goal, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoalsParamsInsight goal: Insight details (required)
        :return: GoalsInsightResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["goal"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method goals_insight_post" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "goal" is set
        if self.api_client.client_side_validation and ("goal" not in params or params["goal"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `goal` when calling `goals_insight_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "goal" in params:
            body_params = params["goal"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/goals/insight",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="GoalsInsightResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def goals_post(self, goal, **kwargs):  # noqa: E501
        """Create a Goal  # noqa: E501

        Create a Goal object with its parameters. `goal_type` field must contain either `projects` or `billable` object, not both, or `null` if the goal has `workspace` type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goals_post(goal, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelsPlainGoal goal: Goal details (required)
        :return: GoalsParamsCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.goals_post_with_http_info(goal, **kwargs)  # noqa: E501
        else:
            (data) = self.goals_post_with_http_info(goal, **kwargs)  # noqa: E501
            return data

    def goals_post_with_http_info(self, goal, **kwargs):  # noqa: E501
        """Create a Goal  # noqa: E501

        Create a Goal object with its parameters. `goal_type` field must contain either `projects` or `billable` object, not both, or `null` if the goal has `workspace` type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goals_post_with_http_info(goal, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelsPlainGoal goal: Goal details (required)
        :return: GoalsParamsCreate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["goal"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method goals_post" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "goal" is set
        if self.api_client.client_side_validation and ("goal" not in params or params["goal"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `goal` when calling `goals_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "goal" in params:
            body_params = params["goal"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/goals",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="GoalsParamsCreate",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
