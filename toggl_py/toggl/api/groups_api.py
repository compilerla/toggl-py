"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient
from toggl.models.group_name_payload import GroupNamePayload  # noqa: F401
from toggl.models.group_organization_group_response import GroupOrganizationGroupResponse  # noqa: F401
from toggl.models.group_payload import GroupPayload  # noqa: F401
from toggl.models.group_project_group_payload import GroupProjectGroupPayload  # noqa: F401
from toggl.models.groups_patch_input import GroupsPatchInput  # noqa: F401
from toggl.models.groups_patch_output import GroupsPatchOutput  # noqa: F401
from toggl.models.models_group import ModelsGroup  # noqa: F401
from toggl.models.models_project_group import ModelsProjectGroup  # noqa: F401
from toggl.models.user_assignments_payload import UserAssignmentsPayload  # noqa: F401


class GroupsApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_organization_group(self, organization_id: int, group_id: int, **kwargs) -> str:  # noqa: E501
        """Deletes group  # noqa: E501

        Deletes a group from the specified organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_group(organization_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param int group_id: Numeric ID of the group. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_organization_group_with_http_info(organization_id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_organization_group_with_http_info(organization_id, group_id, **kwargs)  # noqa: E501
            return data

    def delete_organization_group_with_http_info(self, organization_id: int, group_id: int, **kwargs) -> str:  # noqa: E501
        """Deletes group  # noqa: E501

        Deletes a group from the specified organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_group_with_http_info(organization_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param int group_id: Numeric ID of the group. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "group_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_organization_group" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_organization_group`"  # noqa: E501
            )
        # verify the required parameter "group_id" is set
        if self.api_client.client_side_validation and ("group_id" not in params or params["group_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `group_id` when calling `delete_organization_group`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "group_id" in params:
            path_params["group_id"] = params["group_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/groups/{group_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_project_group(self, workspace_id: int, project_group_id: int, **kwargs) -> str:  # noqa: E501
        """Remove project group.  # noqa: E501

        Remove project group for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_project_group(workspace_id, project_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_group_id: Numeric ID of the project group (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_project_group_with_http_info(workspace_id, project_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_project_group_with_http_info(workspace_id, project_group_id, **kwargs)  # noqa: E501
            return data

    def delete_project_group_with_http_info(self, workspace_id: int, project_group_id: int, **kwargs) -> str:  # noqa: E501
        """Remove project group.  # noqa: E501

        Remove project group for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_project_group_with_http_info(workspace_id, project_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_group_id: Numeric ID of the project group (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_group_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_project_group" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `workspace_id` when calling `delete_project_group`")  # noqa: E501
        # verify the required parameter "project_group_id" is set
        if self.api_client.client_side_validation and (
            "project_group_id" not in params or params["project_group_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `project_group_id` when calling `delete_project_group`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "project_group_id" in params:
            path_params["project_group_id"] = params["project_group_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/project_groups/{project_group_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_workspace_group(self, workspace_id: int, group_id: int, **kwargs):  # noqa: E501
        """Delete group  # noqa: E501

        Deletes the group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_group(workspace_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int group_id: Numeric ID of the group. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_workspace_group_with_http_info(workspace_id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_group_with_http_info(workspace_id, group_id, **kwargs)  # noqa: E501
            return data

    def delete_workspace_group_with_http_info(self, workspace_id: int, group_id: int, **kwargs):  # noqa: E501
        """Delete group  # noqa: E501

        Deletes the group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_group_with_http_info(workspace_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int group_id: Numeric ID of the group. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "group_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_workspace_group" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `delete_workspace_group`"  # noqa: E501
            )
        # verify the required parameter "group_id" is set
        if self.api_client.client_side_validation and ("group_id" not in params or params["group_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `delete_workspace_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "group_id" in params:
            path_params["group_id"] = params["group_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/groups/{group_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_groups(self, organization_id: int, **kwargs) -> list[GroupOrganizationGroupResponse]:  # noqa: E501
        """List of groups in organization with user and workspace assignments  # noqa: E501

        Returns list of groups in organization based on set of url parameters. List is sorted by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_groups(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param str name: Returns records where name contains this string
        :param str workspace: ID of workspace. Returns groups assigned to this workspace
        :return: list[GroupOrganizationGroupResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_groups_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_groups_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def get_organization_groups_with_http_info(
        self, organization_id: int, **kwargs
    ) -> list[GroupOrganizationGroupResponse]:  # noqa: E501
        """List of groups in organization with user and workspace assignments  # noqa: E501

        Returns list of groups in organization based on set of url parameters. List is sorted by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_groups_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param str name: Returns records where name contains this string
        :param str workspace: ID of workspace. Returns groups assigned to this workspace
        :return: list[GroupOrganizationGroupResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "name", "workspace"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_organization_groups" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organization_groups`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "workspace" in params:
            query_params.append(("workspace", params["workspace"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/groups",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[GroupOrganizationGroupResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_workspaces_groups(
        self, organization_id: int, workspace_id: int, **kwargs
    ) -> list[GroupOrganizationGroupResponse]:  # noqa: E501
        """List of groups in a workspace within an organization with user assignments.  # noqa: E501

        Returns list of groups in a workspace based on set of url parameters. List is sorted by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_workspaces_groups(organization_id, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :return: list[GroupOrganizationGroupResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_workspaces_groups_with_http_info(
                organization_id, workspace_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_organization_workspaces_groups_with_http_info(
                organization_id, workspace_id, **kwargs
            )  # noqa: E501
            return data

    def get_organization_workspaces_groups_with_http_info(
        self, organization_id: int, workspace_id: int, **kwargs
    ) -> list[GroupOrganizationGroupResponse]:  # noqa: E501
        """List of groups in a workspace within an organization with user assignments.  # noqa: E501

        Returns list of groups in a workspace based on set of url parameters. List is sorted by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_workspaces_groups_with_http_info(organization_id, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :return: list[GroupOrganizationGroupResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_organization_workspaces_groups" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organization_workspaces_groups`"  # noqa: E501
            )
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_organization_workspaces_groups`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/workspaces/{workspace_id}/groups",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[GroupOrganizationGroupResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_project_groups(self, workspace_id: int, project_ids: str, **kwargs) -> list[ModelsProjectGroup]:  # noqa: E501
        """Get workspace project groups.  # noqa: E501

        Get project groups for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_groups(workspace_id, project_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str project_ids: Project IDs separated by comma. (required)
        :return: list[ModelsProjectGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_project_groups_with_http_info(workspace_id, project_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_groups_with_http_info(workspace_id, project_ids, **kwargs)  # noqa: E501
            return data

    def get_project_groups_with_http_info(
        self, workspace_id: int, project_ids: str, **kwargs
    ) -> list[ModelsProjectGroup]:  # noqa: E501
        """Get workspace project groups.  # noqa: E501

        Get project groups for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_groups_with_http_info(workspace_id, project_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str project_ids: Project IDs separated by comma. (required)
        :return: list[ModelsProjectGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_ids"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_project_groups" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_project_groups`")  # noqa: E501
        # verify the required parameter "project_ids" is set
        if self.api_client.client_side_validation and (
            "project_ids" not in params or params["project_ids"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `project_ids` when calling `get_project_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "project_ids" in params:
            form_params.append(("project_ids", params["project_ids"]))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/project_groups",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsProjectGroup]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_groups(self, workspace_id: int, **kwargs) -> list[ModelsGroup]:  # noqa: E501
        """Get workspace groups  # noqa: E501

        Returns a list of groups for the specified workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_groups(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :return: list[ModelsGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_groups_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_groups_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_groups_with_http_info(self, workspace_id: int, **kwargs) -> list[ModelsGroup]:  # noqa: E501
        """Get workspace groups  # noqa: E501

        Returns a list of groups for the specified workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_groups_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :return: list[ModelsGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_groups" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_workspace_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/groups",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsGroup]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def patch_organization_group(
        self, organization_id: int, group_id: int, patch_group_request: list[GroupsPatchInput], **kwargs
    ) -> GroupsPatchOutput:  # noqa: E501
        """Patch group  # noqa: E501

        Patches a group in the specified organization. Patches are applied individually.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_organization_group(organization_id, group_id, patch_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param int group_id: Numeric ID of the group. (required)
        :param list[GroupsPatchInput] patch_group_request: Array of patch operations. (required)
        :return: GroupsPatchOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.patch_organization_group_with_http_info(
                organization_id, group_id, patch_group_request, **kwargs
            )  # noqa: E501
        else:
            (data) = self.patch_organization_group_with_http_info(
                organization_id, group_id, patch_group_request, **kwargs
            )  # noqa: E501
            return data

    def patch_organization_group_with_http_info(
        self, organization_id: int, group_id: int, patch_group_request: list[GroupsPatchInput], **kwargs
    ) -> GroupsPatchOutput:  # noqa: E501
        """Patch group  # noqa: E501

        Patches a group in the specified organization. Patches are applied individually.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_organization_group_with_http_info(organization_id, group_id, patch_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param int group_id: Numeric ID of the group. (required)
        :param list[GroupsPatchInput] patch_group_request: Array of patch operations. (required)
        :return: GroupsPatchOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "group_id", "patch_group_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method patch_organization_group" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `patch_organization_group`"  # noqa: E501
            )
        # verify the required parameter "group_id" is set
        if self.api_client.client_side_validation and ("group_id" not in params or params["group_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `patch_organization_group`")  # noqa: E501
        # verify the required parameter "patch_group_request" is set
        if self.api_client.client_side_validation and (
            "patch_group_request" not in params or params["patch_group_request"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `patch_group_request` when calling `patch_organization_group`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "group_id" in params:
            path_params["group_id"] = params["group_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "patch_group_request" in params:
            body_params = params["patch_group_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/groups/{group_id}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="GroupsPatchOutput",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organization_group(
        self, organization_id: int, post_group_request: GroupPayload, **kwargs
    ) -> GroupOrganizationGroupResponse:  # noqa: E501
        """Create group  # noqa: E501

        Creates a group in the specified organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_group(organization_id, post_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param GroupPayload post_group_request: Input data for group creation. (required)
        :return: GroupOrganizationGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organization_group_with_http_info(organization_id, post_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_organization_group_with_http_info(organization_id, post_group_request, **kwargs)  # noqa: E501
            return data

    def post_organization_group_with_http_info(
        self, organization_id: int, post_group_request: GroupPayload, **kwargs
    ) -> GroupOrganizationGroupResponse:  # noqa: E501
        """Create group  # noqa: E501

        Creates a group in the specified organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_group_with_http_info(organization_id, post_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param GroupPayload post_group_request: Input data for group creation. (required)
        :return: GroupOrganizationGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "post_group_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_organization_group" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organization_group`"  # noqa: E501
            )
        # verify the required parameter "post_group_request" is set
        if self.api_client.client_side_validation and (
            "post_group_request" not in params or params["post_group_request"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `post_group_request` when calling `post_organization_group`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post_group_request" in params:
            body_params = params["post_group_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/groups",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="GroupOrganizationGroupResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_project_group(
        self, workspace_id: int, project_group_post: GroupProjectGroupPayload, **kwargs
    ) -> str:  # noqa: E501
        """Adds group to project.  # noqa: E501

        Adds group to project for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_project_group(workspace_id, project_group_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param GroupProjectGroupPayload project_group_post: Input data (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_project_group_with_http_info(workspace_id, project_group_post, **kwargs)  # noqa: E501
        else:
            (data) = self.post_project_group_with_http_info(workspace_id, project_group_post, **kwargs)  # noqa: E501
            return data

    def post_project_group_with_http_info(
        self, workspace_id: int, project_group_post: GroupProjectGroupPayload, **kwargs
    ) -> str:  # noqa: E501
        """Adds group to project.  # noqa: E501

        Adds group to project for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_project_group_with_http_info(workspace_id, project_group_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param GroupProjectGroupPayload project_group_post: Input data (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_group_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_project_group" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `workspace_id` when calling `post_project_group`")  # noqa: E501
        # verify the required parameter "project_group_post" is set
        if self.api_client.client_side_validation and (
            "project_group_post" not in params or params["project_group_post"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `project_group_post` when calling `post_project_group`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "project_group_post" in params:
            body_params = params["project_group_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/project_groups",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_group(
        self, workspace_id: int, post_group_request: GroupNamePayload, **kwargs
    ) -> ModelsGroup:  # noqa: E501
        """Create group  # noqa: E501

        Creates a group in the specified workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_group(workspace_id, post_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param GroupNamePayload post_group_request: Input data for group creation. (required)
        :return: ModelsGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_group_with_http_info(workspace_id, post_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_group_with_http_info(workspace_id, post_group_request, **kwargs)  # noqa: E501
            return data

    def post_workspace_group_with_http_info(
        self, workspace_id: int, post_group_request: GroupNamePayload, **kwargs
    ) -> ModelsGroup:  # noqa: E501
        """Create group  # noqa: E501

        Creates a group in the specified workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_group_with_http_info(workspace_id, post_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param GroupNamePayload post_group_request: Input data for group creation. (required)
        :return: ModelsGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "post_group_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_workspace_group" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `workspace_id` when calling `post_workspace_group`")  # noqa: E501
        # verify the required parameter "post_group_request" is set
        if self.api_client.client_side_validation and (
            "post_group_request" not in params or params["post_group_request"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `post_group_request` when calling `post_workspace_group`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post_group_request" in params:
            body_params = params["post_group_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/groups",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsGroup",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organization_group(
        self, organization_id: int, put_group_request: GroupPayload, **kwargs
    ) -> GroupOrganizationGroupResponse:  # noqa: E501
        """Edit group  # noqa: E501

        Edits a group in the specified organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_group(organization_id, put_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param GroupPayload put_group_request: Input data for group modification. (required)
        :return: GroupOrganizationGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organization_group_with_http_info(organization_id, put_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.put_organization_group_with_http_info(organization_id, put_group_request, **kwargs)  # noqa: E501
            return data

    def put_organization_group_with_http_info(
        self, organization_id: int, put_group_request: GroupPayload, **kwargs
    ) -> GroupOrganizationGroupResponse:  # noqa: E501
        """Edit group  # noqa: E501

        Edits a group in the specified organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_group_with_http_info(organization_id, put_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param GroupPayload put_group_request: Input data for group modification. (required)
        :return: GroupOrganizationGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "put_group_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_organization_group" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organization_group`"  # noqa: E501
            )
        # verify the required parameter "put_group_request" is set
        if self.api_client.client_side_validation and (
            "put_group_request" not in params or params["put_group_request"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `put_group_request` when calling `put_organization_group`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "put_group_request" in params:
            body_params = params["put_group_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/groups/{group_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="GroupOrganizationGroupResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organization_workspaces_assignments(
        self, organization_id: int, workspace_id: int, post: UserAssignmentsPayload, **kwargs
    ) -> str:  # noqa: E501
        """Change assignments of users within a workspace.  # noqa: E501

        Assign or remove users to/from a workspace or to/from groups belonging to said workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_workspaces_assignments(organization_id, workspace_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :param UserAssignmentsPayload post: Describes the change in assignment (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organization_workspaces_assignments_with_http_info(
                organization_id, workspace_id, post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_organization_workspaces_assignments_with_http_info(
                organization_id, workspace_id, post, **kwargs
            )  # noqa: E501
            return data

    def put_organization_workspaces_assignments_with_http_info(
        self, organization_id: int, workspace_id: int, post: UserAssignmentsPayload, **kwargs
    ) -> str:  # noqa: E501
        """Change assignments of users within a workspace.  # noqa: E501

        Assign or remove users to/from a workspace or to/from groups belonging to said workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_workspaces_assignments_with_http_info(organization_id, workspace_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :param UserAssignmentsPayload post: Describes the change in assignment (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "workspace_id", "post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method put_organization_workspaces_assignments" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organization_workspaces_assignments`"  # noqa: E501
            )
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `put_organization_workspaces_assignments`"  # noqa: E501
            )
        # verify the required parameter "post" is set
        if self.api_client.client_side_validation and ("post" not in params or params["post"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `post` when calling `put_organization_workspaces_assignments`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post" in params:
            body_params = params["post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/workspaces/{workspace_id}/assignments",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_workspace_group(
        self, workspace_id: int, group_id: int, put_group_request: GroupNamePayload, **kwargs
    ) -> ModelsGroup:  # noqa: E501
        """Update group  # noqa: E501

        Updates the group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_group(workspace_id, group_id, put_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int group_id: Numeric ID of the group. (required)
        :param GroupNamePayload put_group_request: Input data for group update. (required)
        :return: ModelsGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_workspace_group_with_http_info(workspace_id, group_id, put_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workspace_group_with_http_info(workspace_id, group_id, put_group_request, **kwargs)  # noqa: E501
            return data

    def put_workspace_group_with_http_info(
        self, workspace_id: int, group_id: int, put_group_request: GroupNamePayload, **kwargs
    ) -> ModelsGroup:  # noqa: E501
        """Update group  # noqa: E501

        Updates the group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_group_with_http_info(workspace_id, group_id, put_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int group_id: Numeric ID of the group. (required)
        :param GroupNamePayload put_group_request: Input data for group update. (required)
        :return: ModelsGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "group_id", "put_group_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_workspace_group" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `workspace_id` when calling `put_workspace_group`")  # noqa: E501
        # verify the required parameter "group_id" is set
        if self.api_client.client_side_validation and ("group_id" not in params or params["group_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `put_workspace_group`")  # noqa: E501
        # verify the required parameter "put_group_request" is set
        if self.api_client.client_side_validation and (
            "put_group_request" not in params or params["put_group_request"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `put_group_request` when calling `put_workspace_group`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "group_id" in params:
            path_params["group_id"] = params["group_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "put_group_request" in params:
            body_params = params["put_group_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/groups/{group_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsGroup",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
