"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import re  # noqa: F401

from toggl.api_client import ApiClient


class InvitationsApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_invitations(self, invitation_code, **kwargs):  # noqa: E501
        """Get an invitation  # noqa: E501

        Returns an invitation data by code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invitations(invitation_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_code: Invitation code (required)
        :return: ModelsSSOInvitation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_invitations_with_http_info(invitation_code, **kwargs)  # noqa: E501
        else:
            (data) = self.get_invitations_with_http_info(invitation_code, **kwargs)  # noqa: E501
            return data

    def get_invitations_with_http_info(self, invitation_code, **kwargs):  # noqa: E501
        """Get an invitation  # noqa: E501

        Returns an invitation data by code.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_invitations_with_http_info(invitation_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invitation_code: Invitation code (required)
        :return: ModelsSSOInvitation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["invitation_code"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_invitations" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "invitation_code" is set
        if self.api_client.client_side_validation and (
            "invitation_code" not in params or params["invitation_code"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `invitation_code` when calling `get_invitations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "invitation_code" in params:
            path_params["invitation_code"] = params["invitation_code"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/invitations/{invitation_code}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsSSOInvitation",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organization_accept_invitation(self, inviutation_code, **kwargs):  # noqa: E501
        """Accepts invitation  # noqa: E501

        User connected with invitation is marked as joined, email is sent to the inviter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_accept_invitation(inviutation_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inviutation_code: Invitation code (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organization_accept_invitation_with_http_info(inviutation_code, **kwargs)  # noqa: E501
        else:
            (data) = self.post_organization_accept_invitation_with_http_info(inviutation_code, **kwargs)  # noqa: E501
            return data

    def post_organization_accept_invitation_with_http_info(self, inviutation_code, **kwargs):  # noqa: E501
        """Accepts invitation  # noqa: E501

        User connected with invitation is marked as joined, email is sent to the inviter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_accept_invitation_with_http_info(inviutation_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inviutation_code: Invitation code (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["inviutation_code"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method post_organization_accept_invitation" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "inviutation_code" is set
        if self.api_client.client_side_validation and (
            "inviutation_code" not in params or params["inviutation_code"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `inviutation_code` when calling `post_organization_accept_invitation`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "inviutation_code" in params:
            path_params["inviutation_code"] = params["inviutation_code"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/invitations/{invitation_code}/accept",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organization_invitation(self, organization_id, post_invitation_request, **kwargs):  # noqa: E501
        """Creates a new invitation for the user  # noqa: E501

        Creates a new invitation for the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_invitation(organization_id, post_invitation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param InvitationPost post_invitation_request: Input data for invitation creation (required)
        :return: InvitationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organization_invitation_with_http_info(
                organization_id, post_invitation_request, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_organization_invitation_with_http_info(
                organization_id, post_invitation_request, **kwargs
            )  # noqa: E501
            return data

    def post_organization_invitation_with_http_info(self, organization_id, post_invitation_request, **kwargs):  # noqa: E501
        """Creates a new invitation for the user  # noqa: E501

        Creates a new invitation for the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_invitation_with_http_info(organization_id, post_invitation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param InvitationPost post_invitation_request: Input data for invitation creation (required)
        :return: InvitationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "post_invitation_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_organization_invitation" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organization_invitation`"
            )  # noqa: E501
        # verify the required parameter "post_invitation_request" is set
        if self.api_client.client_side_validation and (
            "post_invitation_request" not in params or params["post_invitation_request"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `post_invitation_request` when calling `post_organization_invitation`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post_invitation_request" in params:
            body_params = params["post_invitation_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/invitations",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InvitationResult",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_reject_invitation(self, inviutation_code, **kwargs):  # noqa: E501
        """Rejects invitation  # noqa: E501

        User connected with invitation is marked as deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_reject_invitation(inviutation_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inviutation_code: Invitation code (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_reject_invitation_with_http_info(inviutation_code, **kwargs)  # noqa: E501
        else:
            (data) = self.post_reject_invitation_with_http_info(inviutation_code, **kwargs)  # noqa: E501
            return data

    def post_reject_invitation_with_http_info(self, inviutation_code, **kwargs):  # noqa: E501
        """Rejects invitation  # noqa: E501

        User connected with invitation is marked as deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_reject_invitation_with_http_info(inviutation_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inviutation_code: Invitation code (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["inviutation_code"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_reject_invitation" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "inviutation_code" is set
        if self.api_client.client_side_validation and (
            "inviutation_code" not in params or params["inviutation_code"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `inviutation_code` when calling `post_reject_invitation`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "inviutation_code" in params:
            path_params["inviutation_code"] = params["inviutation_code"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/invitations/{invitation_code}/reject",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_invitation(self, organization_id, invitation_code, **kwargs):  # noqa: E501
        """Resends user their invitation  # noqa: E501

        Resend invitation email to user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_invitation(organization_id, invitation_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Organization ID (required)
        :param str invitation_code: Invitation code (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_invitation_with_http_info(organization_id, invitation_code, **kwargs)  # noqa: E501
        else:
            (data) = self.put_invitation_with_http_info(organization_id, invitation_code, **kwargs)  # noqa: E501
            return data

    def put_invitation_with_http_info(self, organization_id, invitation_code, **kwargs):  # noqa: E501
        """Resends user their invitation  # noqa: E501

        Resend invitation email to user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_invitation_with_http_info(organization_id, invitation_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Organization ID (required)
        :param str invitation_code: Invitation code (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "invitation_code"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_invitation" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_id` when calling `put_invitation`")  # noqa: E501
        # verify the required parameter "invitation_code" is set
        if self.api_client.client_side_validation and (
            "invitation_code" not in params or params["invitation_code"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `invitation_code` when calling `put_invitation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "invitation_code" in params:
            path_params["invitation_code"] = params["invitation_code"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/invitations/{invitation_code}/resend",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
