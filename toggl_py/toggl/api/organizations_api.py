"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient
from toggl.models.billing_pricing_struct import BillingPricingStruct  # noqa: F401
from toggl.models.group_organization_group_response import GroupOrganizationGroupResponse  # noqa: F401
from toggl.models.group_payload import GroupPayload  # noqa: F401
from toggl.models.groups_patch_input import GroupsPatchInput  # noqa: F401
from toggl.models.groups_patch_output import GroupsPatchOutput  # noqa: F401
from toggl.models.invitation_post import InvitationPost  # noqa: F401
from toggl.models.invitation_result import InvitationResult  # noqa: F401
from toggl.models.models_me_organization import ModelsMeOrganization  # noqa: F401
from toggl.models.models_org_user import ModelsOrgUser  # noqa: F401
from toggl.models.models_org_user_detailed import ModelsOrgUserDetailed  # noqa: F401
from toggl.models.models_organization_owner import ModelsOrganizationOwner  # noqa: F401
from toggl.models.models_organization_segmentation import ModelsOrganizationSegmentation  # noqa: F401
from toggl.models.models_post_payload import ModelsPostPayload  # noqa: F401
from toggl.models.models_put_payload import ModelsPutPayload  # noqa: F401
from toggl.models.models_statistics import ModelsStatistics  # noqa: F401
from toggl.models.models_unified_subscription_invoice_list import ModelsUnifiedSubscriptionInvoiceList  # noqa: F401
from toggl.models.organization_post_organization_reply import OrganizationPostOrganizationReply  # noqa: F401
from toggl.models.user_assignments_payload import UserAssignmentsPayload  # noqa: F401
from toggl.models.user_patch_params import UserPatchParams  # noqa: F401
from toggl.models.user_payload import UserPayload  # noqa: F401
from toggl.models.workspace_payload import WorkspacePayload  # noqa: F401
from toggl.models.workspace_workspace import WorkspaceWorkspace  # noqa: F401


class OrganizationsApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_organization_group(self, organization_id: int, group_id: int, **kwargs) -> str:  # noqa: E501
        """Deletes group  # noqa: E501

        Deletes a group from the specified organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_group(organization_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param int group_id: Numeric ID of the group. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_organization_group_with_http_info(organization_id, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_organization_group_with_http_info(organization_id, group_id, **kwargs)  # noqa: E501
            return data

    def delete_organization_group_with_http_info(self, organization_id: int, group_id: int, **kwargs) -> str:  # noqa: E501
        """Deletes group  # noqa: E501

        Deletes a group from the specified organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_group_with_http_info(organization_id, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param int group_id: Numeric ID of the group. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "group_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_organization_group" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_organization_group`"  # noqa: E501
            )
        # verify the required parameter "group_id" is set
        if self.api_client.client_side_validation and ("group_id" not in params or params["group_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `group_id` when calling `delete_organization_group`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "group_id" in params:
            path_params["group_id"] = params["group_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/groups/{group_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_organization_users_leave(self, organization_id: int, **kwargs) -> str:  # noqa: E501
        """Leaves organization  # noqa: E501

        Leaves organization, effectively delete user account in org and delete organization if it is last user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_users_leave(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_organization_users_leave_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_organization_users_leave_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def delete_organization_users_leave_with_http_info(self, organization_id: int, **kwargs) -> str:  # noqa: E501
        """Leaves organization  # noqa: E501

        Leaves organization, effectively delete user account in org and delete organization if it is last user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_users_leave_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_organization_users_leave" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_organization_users_leave`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/users/leave",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization(self, organization_id: int, **kwargs) -> ModelsMeOrganization:  # noqa: E501
        """Organization data  # noqa: E501

        Returns organization name and current pricing plan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :return: ModelsMeOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def get_organization_with_http_info(self, organization_id: int, **kwargs) -> ModelsMeOrganization:  # noqa: E501
        """Organization data  # noqa: E501

        Returns organization name and current pricing plan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :return: ModelsMeOrganization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_organization" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `organization_id` when calling `get_organization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsMeOrganization",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_groups(self, organization_id: int, **kwargs) -> list[GroupOrganizationGroupResponse]:  # noqa: E501
        """List of groups in organization with user and workspace assignments  # noqa: E501

        Returns list of groups in organization based on set of url parameters. List is sorted by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_groups(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param str name: Returns records where name contains this string
        :param str workspace: ID of workspace. Returns groups assigned to this workspace
        :return: list[GroupOrganizationGroupResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_groups_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_groups_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def get_organization_groups_with_http_info(
        self, organization_id: int, **kwargs
    ) -> list[GroupOrganizationGroupResponse]:  # noqa: E501
        """List of groups in organization with user and workspace assignments  # noqa: E501

        Returns list of groups in organization based on set of url parameters. List is sorted by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_groups_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param str name: Returns records where name contains this string
        :param str workspace: ID of workspace. Returns groups assigned to this workspace
        :return: list[GroupOrganizationGroupResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "name", "workspace"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_organization_groups" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organization_groups`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "workspace" in params:
            query_params.append(("workspace", params["workspace"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/groups",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[GroupOrganizationGroupResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_owner(self, organization_id: int, **kwargs) -> ModelsOrganizationOwner:  # noqa: E501
        """Get owner of the organization  # noqa: E501

        Returns organization owner data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_owner(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :return: ModelsOrganizationOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_owner_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_owner_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def get_organization_owner_with_http_info(self, organization_id: int, **kwargs) -> ModelsOrganizationOwner:  # noqa: E501
        """Get owner of the organization  # noqa: E501

        Returns organization owner data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_owner_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :return: ModelsOrganizationOwner
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_organization_owner" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organization_owner`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/owner",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsOrganizationOwner",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_segmentation(self, organization_id: int, **kwargs) -> ModelsOrganizationSegmentation:  # noqa: E501
        """Organization segmentation data  # noqa: E501

        Returns organization segmentation information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_segmentation(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :return: ModelsOrganizationSegmentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_segmentation_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_segmentation_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def get_organization_segmentation_with_http_info(
        self, organization_id: int, **kwargs
    ) -> ModelsOrganizationSegmentation:  # noqa: E501
        """Organization segmentation data  # noqa: E501

        Returns organization segmentation information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_segmentation_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :return: ModelsOrganizationSegmentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_organization_segmentation" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organization_segmentation`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/segmentation",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsOrganizationSegmentation",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_users(self, organization_id: int, **kwargs) -> list[ModelsOrgUser]:  # noqa: E501
        """List of users in organization  # noqa: E501

        Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_users(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param str filter: Returns records where name or email contains this string
        :param str active_status: List of `active` `inactive` `invited` comma separated(if not present, all statuses)
        :param str only_admins: If true returns admins only
        :param str groups: Comma-separated list of groups ids, returns users belonging to these groups only
        :param str workspaces: Comma-separated list of workspaces ids, returns users belonging to this workspaces only
        :param int page: Page number, default 1
        :param int per_page: Number of items per page, default 50
        :param str sort_dir: Values 'asc' or 'desc', result is sorted on 'names' column, default 'asc'
        :return: list[ModelsOrgUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_users_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_users_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def get_organization_users_with_http_info(self, organization_id: int, **kwargs) -> list[ModelsOrgUser]:  # noqa: E501
        """List of users in organization  # noqa: E501

        Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_users_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param str filter: Returns records where name or email contains this string
        :param str active_status: List of `active` `inactive` `invited` comma separated(if not present, all statuses)
        :param str only_admins: If true returns admins only
        :param str groups: Comma-separated list of groups ids, returns users belonging to these groups only
        :param str workspaces: Comma-separated list of workspaces ids, returns users belonging to this workspaces only
        :param int page: Page number, default 1
        :param int per_page: Number of items per page, default 50
        :param str sort_dir: Values 'asc' or 'desc', result is sorted on 'names' column, default 'asc'
        :return: list[ModelsOrgUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "filter",
            "active_status",
            "only_admins",
            "groups",
            "workspaces",
            "page",
            "per_page",
            "sort_dir",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_organization_users" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organization_users`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "filter" in params:
            query_params.append(("filter", params["filter"]))  # noqa: E501
        if "active_status" in params:
            query_params.append(("active_status", params["active_status"]))  # noqa: E501
        if "only_admins" in params:
            query_params.append(("only_admins", params["only_admins"]))  # noqa: E501
        if "groups" in params:
            query_params.append(("groups", params["groups"]))  # noqa: E501
        if "workspaces" in params:
            query_params.append(("workspaces", params["workspaces"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "sort_dir" in params:
            query_params.append(("sort_dir", params["sort_dir"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsOrgUser]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_users_detailed(self, organization_id: int, **kwargs) -> list[ModelsOrgUserDetailed]:  # noqa: E501
        """List of users in organization with details  # noqa: E501

        Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_users_detailed(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param str filter: Returns records where name or email contains this string
        :param str active_status: List of `active` `inactive` `invited` comma separated(if not present, all statuses)
        :param str only_admins: If true returns admins only
        :param str groups: Comma-separated list of groups ids, returns users belonging to these groups only
        :param str workspaces: Comma-separated list of workspaces ids, returns users belonging to this workspaces only
        :param int page: Page number, default 1
        :param int per_page: Number of items per page, default 50
        :param str sort_dir: Values 'asc' or 'desc', result is sorted on 'names' column, default 'asc'
        :return: list[ModelsOrgUserDetailed]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_users_detailed_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_users_detailed_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def get_organization_users_detailed_with_http_info(
        self, organization_id: int, **kwargs
    ) -> list[ModelsOrgUserDetailed]:  # noqa: E501
        """List of users in organization with details  # noqa: E501

        Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_users_detailed_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param str filter: Returns records where name or email contains this string
        :param str active_status: List of `active` `inactive` `invited` comma separated(if not present, all statuses)
        :param str only_admins: If true returns admins only
        :param str groups: Comma-separated list of groups ids, returns users belonging to these groups only
        :param str workspaces: Comma-separated list of workspaces ids, returns users belonging to this workspaces only
        :param int page: Page number, default 1
        :param int per_page: Number of items per page, default 50
        :param str sort_dir: Values 'asc' or 'desc', result is sorted on 'names' column, default 'asc'
        :return: list[ModelsOrgUserDetailed]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "filter",
            "active_status",
            "only_admins",
            "groups",
            "workspaces",
            "page",
            "per_page",
            "sort_dir",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_organization_users_detailed" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organization_users_detailed`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "filter" in params:
            query_params.append(("filter", params["filter"]))  # noqa: E501
        if "active_status" in params:
            query_params.append(("active_status", params["active_status"]))  # noqa: E501
        if "only_admins" in params:
            query_params.append(("only_admins", params["only_admins"]))  # noqa: E501
        if "groups" in params:
            query_params.append(("groups", params["groups"]))  # noqa: E501
        if "workspaces" in params:
            query_params.append(("workspaces", params["workspaces"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "sort_dir" in params:
            query_params.append(("sort_dir", params["sort_dir"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/users/detailed",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsOrgUserDetailed]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_workspaces_groups(
        self, organization_id: int, workspace_id: int, **kwargs
    ) -> list[GroupOrganizationGroupResponse]:  # noqa: E501
        """List of groups in a workspace within an organization with user assignments.  # noqa: E501

        Returns list of groups in a workspace based on set of url parameters. List is sorted by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_workspaces_groups(organization_id, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :return: list[GroupOrganizationGroupResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_workspaces_groups_with_http_info(
                organization_id, workspace_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_organization_workspaces_groups_with_http_info(
                organization_id, workspace_id, **kwargs
            )  # noqa: E501
            return data

    def get_organization_workspaces_groups_with_http_info(
        self, organization_id: int, workspace_id: int, **kwargs
    ) -> list[GroupOrganizationGroupResponse]:  # noqa: E501
        """List of groups in a workspace within an organization with user assignments.  # noqa: E501

        Returns list of groups in a workspace based on set of url parameters. List is sorted by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_workspaces_groups_with_http_info(organization_id, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :return: list[GroupOrganizationGroupResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_organization_workspaces_groups" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organization_workspaces_groups`"  # noqa: E501
            )
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_organization_workspaces_groups`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/workspaces/{workspace_id}/groups",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[GroupOrganizationGroupResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_workspaces_statistics(self, **kwargs) -> dict[str, ModelsStatistics]:  # noqa: E501
        """Statistics for all workspaces in the organization  # noqa: E501

        Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_workspaces_statistics(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict[str, ModelsStatistics]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_workspaces_statistics_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_workspaces_statistics_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_organization_workspaces_statistics_with_http_info(self, **kwargs) -> dict[str, ModelsStatistics]:  # noqa: E501
        """Statistics for all workspaces in the organization  # noqa: E501

        Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_workspaces_statistics_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict[str, ModelsStatistics]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_organization_workspaces_statistics" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/workspaces/statistics",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="dict(str, ModelsStatistics)",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_payments_records(
        self, organization_id: int, **kwargs
    ) -> list[ModelsUnifiedSubscriptionInvoiceList]:  # noqa: E501
        """OrganizationsPaymentRecords  # noqa: E501

        Returns paid invoices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_payments_records(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param bool is_unified: If 'true', returns unified invoices
        :param str next: Next cursor for unified subsriptions. Cannot be used at the same time `prev`
        :param str prev: Previous cursor for unified subsriptions. Cannot be used at the same time with `next`
        :return: list[ModelsUnifiedSubscriptionInvoiceList]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_payments_records_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizations_payments_records_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def get_organizations_payments_records_with_http_info(
        self, organization_id: int, **kwargs
    ) -> list[ModelsUnifiedSubscriptionInvoiceList]:  # noqa: E501
        """OrganizationsPaymentRecords  # noqa: E501

        Returns paid invoices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_payments_records_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param bool is_unified: If 'true', returns unified invoices
        :param str next: Next cursor for unified subsriptions. Cannot be used at the same time `prev`
        :param str prev: Previous cursor for unified subsriptions. Cannot be used at the same time with `next`
        :return: list[ModelsUnifiedSubscriptionInvoiceList]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "is_unified", "next", "prev"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_organizations_payments_records" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_payments_records`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "is_unified" in params:
            query_params.append(("is_unified", params["is_unified"]))  # noqa: E501
        if "next" in params:
            query_params.append(("next", params["next"]))  # noqa: E501
        if "prev" in params:
            query_params.append(("prev", params["prev"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/payment_records",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsUnifiedSubscriptionInvoiceList]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_plans(self, organization_id: int, **kwargs) -> BillingPricingStruct:  # noqa: E501
        """OrganizationsPlans  # noqa: E501

        Returns pricing plans for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_plans(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :return: BillingPricingStruct
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_plans_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizations_plans_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def get_organizations_plans_with_http_info(self, organization_id: int, **kwargs) -> BillingPricingStruct:  # noqa: E501
        """OrganizationsPlans  # noqa: E501

        Returns pricing plans for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_plans_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :return: BillingPricingStruct
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_organizations_plans" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_plans`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/plans",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="BillingPricingStruct",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organizations_plans_0(self, organization_id: int, plan_id: int, **kwargs) -> BillingPricingStruct:  # noqa: E501
        """OrganizationsPlan  # noqa: E501

        Returns pricing plan for an organization identified by plan_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_plans_0(organization_id, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int plan_id: Numeric ID of the plan (required)
        :return: BillingPricingStruct
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organizations_plans_0_with_http_info(organization_id, plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organizations_plans_0_with_http_info(organization_id, plan_id, **kwargs)  # noqa: E501
            return data

    def get_organizations_plans_0_with_http_info(
        self, organization_id: int, plan_id: int, **kwargs
    ) -> BillingPricingStruct:  # noqa: E501
        """OrganizationsPlan  # noqa: E501

        Returns pricing plan for an organization identified by plan_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organizations_plans_0_with_http_info(organization_id, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int plan_id: Numeric ID of the plan (required)
        :return: BillingPricingStruct
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "plan_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_organizations_plans_0" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organizations_plans_0`"  # noqa: E501
            )
        # verify the required parameter "plan_id" is set
        if self.api_client.client_side_validation and ("plan_id" not in params or params["plan_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `plan_id` when calling `get_organizations_plans_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "plan_id" in params:
            path_params["plan_id"] = params["plan_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/plans/{plan_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="BillingPricingStruct",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def patch_organization_group(
        self, organization_id: int, group_id: int, patch_group_request: list[GroupsPatchInput], **kwargs
    ) -> GroupsPatchOutput:  # noqa: E501
        """Patch group  # noqa: E501

        Patches a group in the specified organization. Patches are applied individually.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_organization_group(organization_id, group_id, patch_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param int group_id: Numeric ID of the group. (required)
        :param list[GroupsPatchInput] patch_group_request: Array of patch operations. (required)
        :return: GroupsPatchOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.patch_organization_group_with_http_info(
                organization_id, group_id, patch_group_request, **kwargs
            )  # noqa: E501
        else:
            (data) = self.patch_organization_group_with_http_info(
                organization_id, group_id, patch_group_request, **kwargs
            )  # noqa: E501
            return data

    def patch_organization_group_with_http_info(
        self, organization_id: int, group_id: int, patch_group_request: list[GroupsPatchInput], **kwargs
    ) -> GroupsPatchOutput:  # noqa: E501
        """Patch group  # noqa: E501

        Patches a group in the specified organization. Patches are applied individually.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_organization_group_with_http_info(organization_id, group_id, patch_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param int group_id: Numeric ID of the group. (required)
        :param list[GroupsPatchInput] patch_group_request: Array of patch operations. (required)
        :return: GroupsPatchOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "group_id", "patch_group_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method patch_organization_group" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `patch_organization_group`"  # noqa: E501
            )
        # verify the required parameter "group_id" is set
        if self.api_client.client_side_validation and ("group_id" not in params or params["group_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `patch_organization_group`")  # noqa: E501
        # verify the required parameter "patch_group_request" is set
        if self.api_client.client_side_validation and (
            "patch_group_request" not in params or params["patch_group_request"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `patch_group_request` when calling `patch_organization_group`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "group_id" in params:
            path_params["group_id"] = params["group_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "patch_group_request" in params:
            body_params = params["patch_group_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/groups/{group_id}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="GroupsPatchOutput",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def patch_organization_users(self, organization_id: int, params: UserPatchParams, **kwargs) -> str:  # noqa: E501
        """Apply changes in bulk to users in an organization  # noqa: E501

        Apply changes in bulk to users in an organization (currently deletion only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_organization_users(organization_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param UserPatchParams params: Input data of the users to be patched. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.patch_organization_users_with_http_info(organization_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_organization_users_with_http_info(organization_id, params, **kwargs)  # noqa: E501
            return data

    def patch_organization_users_with_http_info(
        self, organization_id: int, params: UserPatchParams, **kwargs
    ) -> str:  # noqa: E501
        """Apply changes in bulk to users in an organization  # noqa: E501

        Apply changes in bulk to users in an organization (currently deletion only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_organization_users_with_http_info(organization_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param UserPatchParams params: Input data of the users to be patched. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "params"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method patch_organization_users" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `patch_organization_users`"  # noqa: E501
            )
        # verify the required parameter "params" is set
        if self.api_client.client_side_validation and ("params" not in params or params["params"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `params` when calling `patch_organization_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "params" in params:
            body_params = params["params"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/users",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organization(
        self, post_organizations_request: ModelsPostPayload, **kwargs
    ) -> OrganizationPostOrganizationReply:  # noqa: E501
        """Creates a new organization  # noqa: E501

        Creates a new organization with a single workspace and assigns current user as the organization owner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization(post_organizations_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelsPostPayload post_organizations_request: Input data for organization. (required)
        :return: OrganizationPostOrganizationReply
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organization_with_http_info(post_organizations_request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_organization_with_http_info(post_organizations_request, **kwargs)  # noqa: E501
            return data

    def post_organization_with_http_info(
        self, post_organizations_request: ModelsPostPayload, **kwargs
    ) -> OrganizationPostOrganizationReply:  # noqa: E501
        """Creates a new organization  # noqa: E501

        Creates a new organization with a single workspace and assigns current user as the organization owner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_with_http_info(post_organizations_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelsPostPayload post_organizations_request: Input data for organization. (required)
        :return: OrganizationPostOrganizationReply
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["post_organizations_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_organization" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "post_organizations_request" is set
        if self.api_client.client_side_validation and (
            "post_organizations_request" not in params or params["post_organizations_request"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `post_organizations_request` when calling `post_organization`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post_organizations_request" in params:
            body_params = params["post_organizations_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="OrganizationPostOrganizationReply",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organization_accept_invitation(self, inviutation_code: str, **kwargs) -> str:  # noqa: E501
        """Accepts invitation  # noqa: E501

        User connected with invitation is marked as joined, email is sent to the inviter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_accept_invitation(inviutation_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inviutation_code: Invitation code (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organization_accept_invitation_with_http_info(inviutation_code, **kwargs)  # noqa: E501
        else:
            (data) = self.post_organization_accept_invitation_with_http_info(inviutation_code, **kwargs)  # noqa: E501
            return data

    def post_organization_accept_invitation_with_http_info(self, inviutation_code: str, **kwargs) -> str:  # noqa: E501
        """Accepts invitation  # noqa: E501

        User connected with invitation is marked as joined, email is sent to the inviter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_accept_invitation_with_http_info(inviutation_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inviutation_code: Invitation code (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["inviutation_code"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method post_organization_accept_invitation" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "inviutation_code" is set
        if self.api_client.client_side_validation and (
            "inviutation_code" not in params or params["inviutation_code"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `inviutation_code` when calling `post_organization_accept_invitation`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "inviutation_code" in params:
            path_params["inviutation_code"] = params["inviutation_code"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/organizations/invitations/{invitation_code}/accept",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organization_group(
        self, organization_id: int, post_group_request: GroupPayload, **kwargs
    ) -> GroupOrganizationGroupResponse:  # noqa: E501
        """Create group  # noqa: E501

        Creates a group in the specified organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_group(organization_id, post_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param GroupPayload post_group_request: Input data for group creation. (required)
        :return: GroupOrganizationGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organization_group_with_http_info(organization_id, post_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_organization_group_with_http_info(organization_id, post_group_request, **kwargs)  # noqa: E501
            return data

    def post_organization_group_with_http_info(
        self, organization_id: int, post_group_request: GroupPayload, **kwargs
    ) -> GroupOrganizationGroupResponse:  # noqa: E501
        """Create group  # noqa: E501

        Creates a group in the specified organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_group_with_http_info(organization_id, post_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param GroupPayload post_group_request: Input data for group creation. (required)
        :return: GroupOrganizationGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "post_group_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_organization_group" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organization_group`"  # noqa: E501
            )
        # verify the required parameter "post_group_request" is set
        if self.api_client.client_side_validation and (
            "post_group_request" not in params or params["post_group_request"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `post_group_request` when calling `post_organization_group`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post_group_request" in params:
            body_params = params["post_group_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/groups",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="GroupOrganizationGroupResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organization_invitation(
        self, organization_id: int, post_invitation_request: InvitationPost, **kwargs
    ) -> InvitationResult:  # noqa: E501
        """Creates a new invitation for the user  # noqa: E501

        Creates a new invitation for the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_invitation(organization_id, post_invitation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param InvitationPost post_invitation_request: Input data for invitation creation (required)
        :return: InvitationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organization_invitation_with_http_info(
                organization_id, post_invitation_request, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_organization_invitation_with_http_info(
                organization_id, post_invitation_request, **kwargs
            )  # noqa: E501
            return data

    def post_organization_invitation_with_http_info(
        self, organization_id: int, post_invitation_request: InvitationPost, **kwargs
    ) -> InvitationResult:  # noqa: E501
        """Creates a new invitation for the user  # noqa: E501

        Creates a new invitation for the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_invitation_with_http_info(organization_id, post_invitation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param InvitationPost post_invitation_request: Input data for invitation creation (required)
        :return: InvitationResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "post_invitation_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_organization_invitation" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organization_invitation`"  # noqa: E501
            )
        # verify the required parameter "post_invitation_request" is set
        if self.api_client.client_side_validation and (
            "post_invitation_request" not in params or params["post_invitation_request"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `post_invitation_request` when calling `post_organization_invitation`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post_invitation_request" in params:
            body_params = params["post_invitation_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/invitations",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InvitationResult",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organization_workspaces(
        self, organization_id: int, post: WorkspacePayload, **kwargs
    ) -> WorkspaceWorkspace:  # noqa: E501
        """Create a new workspace.  # noqa: E501

        Create a workspace within an existing organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_workspaces(organization_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param WorkspacePayload post: Parameters of the new workspace (required)
        :return: WorkspaceWorkspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organization_workspaces_with_http_info(organization_id, post, **kwargs)  # noqa: E501
        else:
            (data) = self.post_organization_workspaces_with_http_info(organization_id, post, **kwargs)  # noqa: E501
            return data

    def post_organization_workspaces_with_http_info(
        self, organization_id: int, post: WorkspacePayload, **kwargs
    ) -> WorkspaceWorkspace:  # noqa: E501
        """Create a new workspace.  # noqa: E501

        Create a workspace within an existing organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_workspaces_with_http_info(organization_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param WorkspacePayload post: Parameters of the new workspace (required)
        :return: WorkspaceWorkspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_organization_workspaces" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organization_workspaces`"  # noqa: E501
            )
        # verify the required parameter "post" is set
        if self.api_client.client_side_validation and ("post" not in params or params["post"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `post` when calling `post_organization_workspaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post" in params:
            body_params = params["post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/workspaces",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WorkspaceWorkspace",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organization(
        self, organization_id: int, put_organizations_request: ModelsPutPayload, **kwargs
    ) -> str:  # noqa: E501
        """Updates an existing organization  # noqa: E501

        Updates an existing organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization(organization_id, put_organizations_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param ModelsPutPayload put_organizations_request: Input data for organization. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organization_with_http_info(organization_id, put_organizations_request, **kwargs)  # noqa: E501
        else:
            (data) = self.put_organization_with_http_info(organization_id, put_organizations_request, **kwargs)  # noqa: E501
            return data

    def put_organization_with_http_info(
        self, organization_id: int, put_organizations_request: ModelsPutPayload, **kwargs
    ) -> str:  # noqa: E501
        """Updates an existing organization  # noqa: E501

        Updates an existing organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_with_http_info(organization_id, put_organizations_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param ModelsPutPayload put_organizations_request: Input data for organization. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "put_organizations_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_organization" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `organization_id` when calling `put_organization`")  # noqa: E501
        # verify the required parameter "put_organizations_request" is set
        if self.api_client.client_side_validation and (
            "put_organizations_request" not in params or params["put_organizations_request"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `put_organizations_request` when calling `put_organization`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "put_organizations_request" in params:
            body_params = params["put_organizations_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organization_group(
        self, organization_id: int, put_group_request: GroupPayload, **kwargs
    ) -> GroupOrganizationGroupResponse:  # noqa: E501
        """Edit group  # noqa: E501

        Edits a group in the specified organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_group(organization_id, put_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param GroupPayload put_group_request: Input data for group modification. (required)
        :return: GroupOrganizationGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organization_group_with_http_info(organization_id, put_group_request, **kwargs)  # noqa: E501
        else:
            (data) = self.put_organization_group_with_http_info(organization_id, put_group_request, **kwargs)  # noqa: E501
            return data

    def put_organization_group_with_http_info(
        self, organization_id: int, put_group_request: GroupPayload, **kwargs
    ) -> GroupOrganizationGroupResponse:  # noqa: E501
        """Edit group  # noqa: E501

        Edits a group in the specified organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_group_with_http_info(organization_id, put_group_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param GroupPayload put_group_request: Input data for group modification. (required)
        :return: GroupOrganizationGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "put_group_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_organization_group" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organization_group`"  # noqa: E501
            )
        # verify the required parameter "put_group_request" is set
        if self.api_client.client_side_validation and (
            "put_group_request" not in params or params["put_group_request"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `put_group_request` when calling `put_organization_group`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "put_group_request" in params:
            body_params = params["put_group_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/groups/{group_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="GroupOrganizationGroupResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organization_segmentation(self, organization_id: int, **kwargs) -> ModelsOrganizationSegmentation:  # noqa: E501
        """Organization segmentation data  # noqa: E501

        Save organization segmentation information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_segmentation(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :return: ModelsOrganizationSegmentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organization_segmentation_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_organization_segmentation_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def put_organization_segmentation_with_http_info(
        self, organization_id: int, **kwargs
    ) -> ModelsOrganizationSegmentation:  # noqa: E501
        """Organization segmentation data  # noqa: E501

        Save organization segmentation information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_segmentation_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :return: ModelsOrganizationSegmentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_organization_segmentation" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organization_segmentation`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/segmentation",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsOrganizationSegmentation",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organization_users(self, organization_id: int, params: UserPayload, **kwargs) -> str:  # noqa: E501
        """Changes a single organization-user  # noqa: E501

        Changes a single organization-user. Can affect the following values:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_users(organization_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param UserPayload params: Input data of the organization user to be changed. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organization_users_with_http_info(organization_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.put_organization_users_with_http_info(organization_id, params, **kwargs)  # noqa: E501
            return data

    def put_organization_users_with_http_info(self, organization_id: int, params: UserPayload, **kwargs) -> str:  # noqa: E501
        """Changes a single organization-user  # noqa: E501

        Changes a single organization-user. Can affect the following values:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_users_with_http_info(organization_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param UserPayload params: Input data of the organization user to be changed. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "params"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_organization_users" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organization_users`"  # noqa: E501
            )
        # verify the required parameter "params" is set
        if self.api_client.client_side_validation and ("params" not in params or params["params"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `params` when calling `put_organization_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "params" in params:
            body_params = params["params"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/users/{organization_user_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organization_workspaces_assignments(
        self, organization_id: int, workspace_id: int, post: UserAssignmentsPayload, **kwargs
    ) -> str:  # noqa: E501
        """Change assignments of users within a workspace.  # noqa: E501

        Assign or remove users to/from a workspace or to/from groups belonging to said workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_workspaces_assignments(organization_id, workspace_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :param UserAssignmentsPayload post: Describes the change in assignment (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organization_workspaces_assignments_with_http_info(
                organization_id, workspace_id, post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_organization_workspaces_assignments_with_http_info(
                organization_id, workspace_id, post, **kwargs
            )  # noqa: E501
            return data

    def put_organization_workspaces_assignments_with_http_info(
        self, organization_id: int, workspace_id: int, post: UserAssignmentsPayload, **kwargs
    ) -> str:  # noqa: E501
        """Change assignments of users within a workspace.  # noqa: E501

        Assign or remove users to/from a workspace or to/from groups belonging to said workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_workspaces_assignments_with_http_info(organization_id, workspace_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :param UserAssignmentsPayload post: Describes the change in assignment (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "workspace_id", "post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method put_organization_workspaces_assignments" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organization_workspaces_assignments`"  # noqa: E501
            )
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `put_organization_workspaces_assignments`"  # noqa: E501
            )
        # verify the required parameter "post" is set
        if self.api_client.client_side_validation and ("post" not in params or params["post"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `post` when calling `put_organization_workspaces_assignments`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post" in params:
            body_params = params["post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/workspaces/{workspace_id}/assignments",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
