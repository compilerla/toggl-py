"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient
from toggl.models.models_all_preferences import ModelsAllPreferences  # noqa: F401
from toggl.models.models_logo import ModelsLogo  # noqa: F401
from toggl.models.models_workspace_preferences import ModelsWorkspacePreferences  # noqa: F401


class PreferencesApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_preferences(self, **kwargs) -> ModelsAllPreferences:  # noqa: E501
        """Preferences for the current user  # noqa: E501

        Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the `enabled` flag specifying if that feature should be enabled or disabled for the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_preferences(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ModelsAllPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_preferences_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_preferences_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_preferences_with_http_info(self, **kwargs) -> ModelsAllPreferences:  # noqa: E501
        """Preferences for the current user  # noqa: E501

        Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the `enabled` flag specifying if that feature should be enabled or disabled for the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_preferences_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ModelsAllPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_preferences" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/preferences",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsAllPreferences",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_preferences_client(self, client: str, **kwargs) -> ModelsAllPreferences:  # noqa: E501
        """Preferences for an specific client of the current user  # noqa: E501

        Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the `enabled` flag specifying if that feature should be enabled or disabled for the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_preferences_client(client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client: Client type (required)
        :param int since: Retrieve preference modified since this date using UNIX timestamp.
        :return: ModelsAllPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_preferences_client_with_http_info(client, **kwargs)  # noqa: E501
        else:
            (data) = self.get_preferences_client_with_http_info(client, **kwargs)  # noqa: E501
            return data

    def get_preferences_client_with_http_info(self, client: str, **kwargs) -> ModelsAllPreferences:  # noqa: E501
        """Preferences for an specific client of the current user  # noqa: E501

        Returns user preferences and alpha features. The list of alpha features contains a full list of feature codes (every feature that exists in database) and the `enabled` flag specifying if that feature should be enabled or disabled for the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_preferences_client_with_http_info(client, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client: Client type (required)
        :param int since: Retrieve preference modified since this date using UNIX timestamp.
        :return: ModelsAllPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["client", "since"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_preferences_client" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "client" is set
        if self.api_client.client_side_validation and ("client" not in params or params["client"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client` when calling `get_preferences_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "client" in params:
            path_params["client"] = params["client"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "since" in params:
            form_params.append(("since", params["since"]))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/preferences/{client}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsAllPreferences",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_preferences(self, workspace_id: int, **kwargs) -> ModelsLogo:  # noqa: E501
        """Get workspace preferences  # noqa: E501

        Get the preferences for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_preferences(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: ModelsLogo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_preferences_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_preferences_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_preferences_with_http_info(self, workspace_id: int, **kwargs) -> ModelsLogo:  # noqa: E501
        """Get workspace preferences  # noqa: E501

        Get the preferences for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_preferences_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: ModelsLogo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_preferences" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_preferences`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/preferences",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsLogo",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_preferences(self, preferences: ModelsAllPreferences, **kwargs) -> str:  # noqa: E501
        """Update the preferences for the current user  # noqa: E501

        With this endpoint, preferences can be modified and alpha features can be enabled or disabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_preferences(preferences, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelsAllPreferences preferences: Preferences (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_preferences_with_http_info(preferences, **kwargs)  # noqa: E501
        else:
            (data) = self.post_preferences_with_http_info(preferences, **kwargs)  # noqa: E501
            return data

    def post_preferences_with_http_info(self, preferences: ModelsAllPreferences, **kwargs) -> str:  # noqa: E501
        """Update the preferences for the current user  # noqa: E501

        With this endpoint, preferences can be modified and alpha features can be enabled or disabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_preferences_with_http_info(preferences, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelsAllPreferences preferences: Preferences (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["preferences"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_preferences" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "preferences" is set
        if self.api_client.client_side_validation and (
            "preferences" not in params or params["preferences"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `preferences` when calling `post_preferences`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "preferences" in params:
            body_params = params["preferences"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/preferences",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_preferences_client(self, client: str, preferences: ModelsAllPreferences, **kwargs) -> str:  # noqa: E501
        """Update the preferences for an specific client of the current user  # noqa: E501

        With this endpoint, preferences can be modified and alpha features can be enabled or disabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_preferences_client(client, preferences, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client: Client type (required)
        :param ModelsAllPreferences preferences: Preferences (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_preferences_client_with_http_info(client, preferences, **kwargs)  # noqa: E501
        else:
            (data) = self.post_preferences_client_with_http_info(client, preferences, **kwargs)  # noqa: E501
            return data

    def post_preferences_client_with_http_info(
        self, client: str, preferences: ModelsAllPreferences, **kwargs
    ) -> str:  # noqa: E501
        """Update the preferences for an specific client of the current user  # noqa: E501

        With this endpoint, preferences can be modified and alpha features can be enabled or disabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_preferences_client_with_http_info(client, preferences, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client: Client type (required)
        :param ModelsAllPreferences preferences: Preferences (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["client", "preferences"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_preferences_client" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "client" is set
        if self.api_client.client_side_validation and ("client" not in params or params["client"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client` when calling `post_preferences_client`")  # noqa: E501
        # verify the required parameter "preferences" is set
        if self.api_client.client_side_validation and (
            "preferences" not in params or params["preferences"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `preferences` when calling `post_preferences_client`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "client" in params:
            path_params["client"] = params["client"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "preferences" in params:
            body_params = params["preferences"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/preferences/{client}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_preferences(
        self, workspace_id: int, preferences: ModelsWorkspacePreferences, **kwargs
    ) -> ModelsLogo:  # noqa: E501
        """Get workspace preferences  # noqa: E501

        Get the preferences for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_preferences(workspace_id, preferences, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param ModelsWorkspacePreferences preferences: Input data of the preferences. (required)
        :return: ModelsLogo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_preferences_with_http_info(workspace_id, preferences, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_preferences_with_http_info(workspace_id, preferences, **kwargs)  # noqa: E501
            return data

    def post_workspace_preferences_with_http_info(
        self, workspace_id: int, preferences: ModelsWorkspacePreferences, **kwargs
    ) -> ModelsLogo:  # noqa: E501
        """Get workspace preferences  # noqa: E501

        Get the preferences for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_preferences_with_http_info(workspace_id, preferences, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param ModelsWorkspacePreferences preferences: Input data of the preferences. (required)
        :return: ModelsLogo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "preferences"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_workspace_preferences" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_preferences`"  # noqa: E501
            )
        # verify the required parameter "preferences" is set
        if self.api_client.client_side_validation and (
            "preferences" not in params or params["preferences"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `preferences` when calling `post_workspace_preferences`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "preferences" in params:
            body_params = params["preferences"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/preferences",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsLogo",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
