"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient


class ProjectsApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_workspace_project(self, workspace_id, project_id, **kwargs):  # noqa: E501
        """WorkspaceProject  # noqa: E501

        Delete project for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_project(workspace_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :param str te_deletion_mode: Time entries deletion mode: 'delete' or 'unassign'
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_workspace_project_with_http_info(workspace_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_project_with_http_info(workspace_id, project_id, **kwargs)  # noqa: E501
            return data

    def delete_workspace_project_with_http_info(self, workspace_id, project_id, **kwargs):  # noqa: E501
        """WorkspaceProject  # noqa: E501

        Delete project for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_project_with_http_info(workspace_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :param str te_deletion_mode: Time entries deletion mode: 'delete' or 'unassign'
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_id", "te_deletion_mode"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_workspace_project" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `delete_workspace_project`"
            )  # noqa: E501
        # verify the required parameter "project_id" is set
        if self.api_client.client_side_validation and (
            "project_id" not in params or params["project_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `project_id` when calling `delete_workspace_project`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "project_id" in params:
            path_params["project_id"] = params["project_id"]  # noqa: E501

        query_params = []
        if "te_deletion_mode" in params:
            query_params.append(("teDeletionMode", params["te_deletion_mode"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/projects/{project_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="int",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_workspace_project_users(self, workspace_id, project_user_id, **kwargs):  # noqa: E501
        """Delete a project user from workspace projects users  # noqa: E501

        Delete a project user for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_project_users(workspace_id, project_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_user_id: Numeric ID of the project user (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_workspace_project_users_with_http_info(workspace_id, project_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_project_users_with_http_info(workspace_id, project_user_id, **kwargs)  # noqa: E501
            return data

    def delete_workspace_project_users_with_http_info(self, workspace_id, project_user_id, **kwargs):  # noqa: E501
        """Delete a project user from workspace projects users  # noqa: E501

        Delete a project user for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_project_users_with_http_info(workspace_id, project_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_user_id: Numeric ID of the project user (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_workspace_project_users" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `delete_workspace_project_users`"
            )  # noqa: E501
        # verify the required parameter "project_user_id" is set
        if self.api_client.client_side_validation and (
            "project_user_id" not in params or params["project_user_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `project_user_id` when calling `delete_workspace_project_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "project_user_id" in params:
            path_params["project_user_id"] = params["project_user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/project_users/{project_user_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="int",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_projects(self, workspace_id, name, page, sort_field, sort_order, only_templates, **kwargs):  # noqa: E501
        """WorkspaceProjects  # noqa: E501

        Get projects for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_projects(workspace_id, name, page, sort_field, sort_order, only_templates, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str name: name (required)
        :param int page: page (required)
        :param str sort_field: sort_field (required)
        :param str sort_order: sort_order (required)
        :param bool only_templates: only_templates (required)
        :param bool active: active
        :param int since: Retrieve projects created/modified/deleted since this date using UNIX timestamp.
        :param bool billable: billable
        :param list[str] user_ids: user_ids
        :param list[str] client_ids: client_ids
        :param list[str] group_ids: group_ids
        :param list[str] statuses: statuses
        :param int per_page: Number of items per page, default 151. Cannot exceed 200.
        :return: list[ModelsProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_projects_with_http_info(
                workspace_id, name, page, sort_field, sort_order, only_templates, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_projects_with_http_info(
                workspace_id, name, page, sort_field, sort_order, only_templates, **kwargs
            )  # noqa: E501
            return data

    def get_projects_with_http_info(
        self, workspace_id, name, page, sort_field, sort_order, only_templates, **kwargs
    ):  # noqa: E501
        """WorkspaceProjects  # noqa: E501

        Get projects for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_projects_with_http_info(workspace_id, name, page, sort_field, sort_order, only_templates, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str name: name (required)
        :param int page: page (required)
        :param str sort_field: sort_field (required)
        :param str sort_order: sort_order (required)
        :param bool only_templates: only_templates (required)
        :param bool active: active
        :param int since: Retrieve projects created/modified/deleted since this date using UNIX timestamp.
        :param bool billable: billable
        :param list[str] user_ids: user_ids
        :param list[str] client_ids: client_ids
        :param list[str] group_ids: group_ids
        :param list[str] statuses: statuses
        :param int per_page: Number of items per page, default 151. Cannot exceed 200.
        :return: list[ModelsProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "workspace_id",
            "name",
            "page",
            "sort_field",
            "sort_order",
            "only_templates",
            "active",
            "since",
            "billable",
            "user_ids",
            "client_ids",
            "group_ids",
            "statuses",
            "per_page",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_projects" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_projects`")  # noqa: E501
        # verify the required parameter "name" is set
        if self.api_client.client_side_validation and ("name" not in params or params["name"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `get_projects`")  # noqa: E501
        # verify the required parameter "page" is set
        if self.api_client.client_side_validation and ("page" not in params or params["page"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `page` when calling `get_projects`")  # noqa: E501
        # verify the required parameter "sort_field" is set
        if self.api_client.client_side_validation and (
            "sort_field" not in params or params["sort_field"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `sort_field` when calling `get_projects`")  # noqa: E501
        # verify the required parameter "sort_order" is set
        if self.api_client.client_side_validation and (
            "sort_order" not in params or params["sort_order"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `sort_order` when calling `get_projects`")  # noqa: E501
        # verify the required parameter "only_templates" is set
        if self.api_client.client_side_validation and (
            "only_templates" not in params or params["only_templates"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `only_templates` when calling `get_projects`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "active" in params:
            form_params.append(("active", params["active"]))  # noqa: E501
        if "since" in params:
            form_params.append(("since", params["since"]))  # noqa: E501
        if "billable" in params:
            form_params.append(("billable", params["billable"]))  # noqa: E501
        if "user_ids" in params:
            form_params.append(("user_ids", params["user_ids"]))  # noqa: E501
            collection_formats["user_ids"] = "csv"  # noqa: E501
        if "client_ids" in params:
            form_params.append(("client_ids", params["client_ids"]))  # noqa: E501
            collection_formats["client_ids"] = "csv"  # noqa: E501
        if "group_ids" in params:
            form_params.append(("group_ids", params["group_ids"]))  # noqa: E501
            collection_formats["group_ids"] = "csv"  # noqa: E501
        if "statuses" in params:
            form_params.append(("statuses", params["statuses"]))  # noqa: E501
            collection_formats["statuses"] = "csv"  # noqa: E501
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501
        if "page" in params:
            form_params.append(("page", params["page"]))  # noqa: E501
        if "sort_field" in params:
            form_params.append(("sort_field", params["sort_field"]))  # noqa: E501
        if "sort_order" in params:
            form_params.append(("sort_order", params["sort_order"]))  # noqa: E501
        if "only_templates" in params:
            form_params.append(("only_templates", params["only_templates"]))  # noqa: E501
        if "per_page" in params:
            form_params.append(("per_page", params["per_page"]))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/projects",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsProject]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_projects_templates(self, workspace_id, **kwargs):  # noqa: E501
        """WorkspaceProjectsTemplates  # noqa: E501

        Get projects templates for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_projects_templates(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_projects_templates_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_projects_templates_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_projects_templates_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """WorkspaceProjectsTemplates  # noqa: E501

        Get projects templates for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_projects_templates_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_projects_templates" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_projects_templates`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/projects/templates",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_project_periods(self, workspace_id, project_id, **kwargs):  # noqa: E501
        """Get Recurring Project Periods  # noqa: E501

        Get recurring project periods for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_project_periods(workspace_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :param str start_date: Smallest boundary date to search for recurring periods
        :param str end_date: Biggest boundary date to search for for recurring periods
        :return: ModelsRecurringPeriod
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_project_periods_with_http_info(workspace_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_project_periods_with_http_info(workspace_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_project_periods_with_http_info(self, workspace_id, project_id, **kwargs):  # noqa: E501
        """Get Recurring Project Periods  # noqa: E501

        Get recurring project periods for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_project_periods_with_http_info(workspace_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :param str start_date: Smallest boundary date to search for recurring periods
        :param str end_date: Biggest boundary date to search for for recurring periods
        :return: ModelsRecurringPeriod
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_id", "start_date", "end_date"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_project_periods" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_project_periods`"
            )  # noqa: E501
        # verify the required parameter "project_id" is set
        if self.api_client.client_side_validation and (
            "project_id" not in params or params["project_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `project_id` when calling `get_workspace_project_periods`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "project_id" in params:
            path_params["project_id"] = params["project_id"]  # noqa: E501

        query_params = []
        if "start_date" in params:
            query_params.append(("start_date", params["start_date"]))  # noqa: E501
        if "end_date" in params:
            query_params.append(("end_date", params["end_date"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/projects/{project_id}/periods",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsRecurringPeriod",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_project_users(self, workspace_id, **kwargs):  # noqa: E501
        """Get workspace projects users  # noqa: E501

        List all projects users for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_project_users(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str project_ids: Numeric IDs of projects, comma-separated
        :param bool with_group_members: Include group members
        :return: list[ModelsProjectUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_project_users_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_project_users_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_project_users_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Get workspace projects users  # noqa: E501

        List all projects users for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_project_users_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str project_ids: Numeric IDs of projects, comma-separated
        :param bool with_group_members: Include group members
        :return: list[ModelsProjectUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_ids", "with_group_members"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_project_users" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_project_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []
        if "project_ids" in params:
            query_params.append(("project_ids", params["project_ids"]))  # noqa: E501
        if "with_group_members" in params:
            query_params.append(("with_group_members", params["with_group_members"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/project_users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsProjectUser]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def patch_workspace_project_users_ids(self, workspace_id, project_user_ids, **kwargs):  # noqa: E501
        """Patch project users from workspace  # noqa: E501

        Patch a list of project users for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_workspace_project_users_ids(workspace_id, project_user_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param list[int] project_user_ids: Numeric IDs of the project users (required)
        :return: UserOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.patch_workspace_project_users_ids_with_http_info(
                workspace_id, project_user_ids, **kwargs
            )  # noqa: E501
        else:
            (data) = self.patch_workspace_project_users_ids_with_http_info(
                workspace_id, project_user_ids, **kwargs
            )  # noqa: E501
            return data

    def patch_workspace_project_users_ids_with_http_info(self, workspace_id, project_user_ids, **kwargs):  # noqa: E501
        """Patch project users from workspace  # noqa: E501

        Patch a list of project users for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_workspace_project_users_ids_with_http_info(workspace_id, project_user_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param list[int] project_user_ids: Numeric IDs of the project users (required)
        :return: UserOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_user_ids"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method patch_workspace_project_users_ids" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `patch_workspace_project_users_ids`"
            )  # noqa: E501
        # verify the required parameter "project_user_ids" is set
        if self.api_client.client_side_validation and (
            "project_user_ids" not in params or params["project_user_ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `project_user_ids` when calling `patch_workspace_project_users_ids`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []
        if "project_user_ids" in params:
            query_params.append(("project_user_ids", params["project_user_ids"]))  # noqa: E501
            collection_formats["project_user_ids"] = "csv"  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/project_users/{project_user_ids}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UserOutput",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def patch_workspace_projects(self, workspace_id, project_ids, patch_input, **kwargs):  # noqa: E501
        """WorkspaceProjects  # noqa: E501

        Bulk editing workspace projects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_workspace_projects(workspace_id, project_ids, patch_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str project_ids: Numeric IDs of project ids, separated by comma. E.g.: `204301830,202700150,202687559` (required)
        :param ProjectsPatchPost patch_input: Array of batch operations (required)
        :return: ProjectsPatchOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.patch_workspace_projects_with_http_info(workspace_id, project_ids, patch_input, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_workspace_projects_with_http_info(
                workspace_id, project_ids, patch_input, **kwargs
            )  # noqa: E501
            return data

    def patch_workspace_projects_with_http_info(self, workspace_id, project_ids, patch_input, **kwargs):  # noqa: E501
        """WorkspaceProjects  # noqa: E501

        Bulk editing workspace projects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_workspace_projects_with_http_info(workspace_id, project_ids, patch_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str project_ids: Numeric IDs of project ids, separated by comma. E.g.: `204301830,202700150,202687559` (required)
        :param ProjectsPatchPost patch_input: Array of batch operations (required)
        :return: ProjectsPatchOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_ids", "patch_input"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method patch_workspace_projects" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `patch_workspace_projects`"
            )  # noqa: E501
        # verify the required parameter "project_ids" is set
        if self.api_client.client_side_validation and (
            "project_ids" not in params or params["project_ids"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `project_ids` when calling `patch_workspace_projects`"
            )  # noqa: E501
        # verify the required parameter "patch_input" is set
        if self.api_client.client_side_validation and (
            "patch_input" not in params or params["patch_input"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `patch_input` when calling `patch_workspace_projects`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "project_ids" in params:
            path_params["project_ids"] = params["project_ids"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "patch_input" in params:
            body_params = params["patch_input"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/projects/{project_ids}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ProjectsPatchOutput",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_project_create(self, workspace_id, post_input, **kwargs):  # noqa: E501
        """WorkspaceProjects  # noqa: E501

        Create project for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_project_create(workspace_id, post_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param ProjectPayload post_input: Post parameters (required)
        :return: ModelsProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_project_create_with_http_info(workspace_id, post_input, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_project_create_with_http_info(workspace_id, post_input, **kwargs)  # noqa: E501
            return data

    def post_workspace_project_create_with_http_info(self, workspace_id, post_input, **kwargs):  # noqa: E501
        """WorkspaceProjects  # noqa: E501

        Create project for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_project_create_with_http_info(workspace_id, post_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param ProjectPayload post_input: Post parameters (required)
        :return: ModelsProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "post_input"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_workspace_project_create" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_project_create`"
            )  # noqa: E501
        # verify the required parameter "post_input" is set
        if self.api_client.client_side_validation and (
            "post_input" not in params or params["post_input"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `post_input` when calling `post_workspace_project_create`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post_input" in params:
            body_params = params["post_input"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/projects",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsProject",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_project_users(self, workspace_id, project_user, **kwargs):  # noqa: E501
        """Add an user into workspace projects users  # noqa: E501

        Include a project user for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_project_users(workspace_id, project_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param UserPostPayload project_user: Input data of the user. (required)
        :return: ModelsProjectUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_project_users_with_http_info(workspace_id, project_user, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_project_users_with_http_info(workspace_id, project_user, **kwargs)  # noqa: E501
            return data

    def post_workspace_project_users_with_http_info(self, workspace_id, project_user, **kwargs):  # noqa: E501
        """Add an user into workspace projects users  # noqa: E501

        Include a project user for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_project_users_with_http_info(workspace_id, project_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param UserPostPayload project_user: Input data of the user. (required)
        :return: ModelsProjectUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_user"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_workspace_project_users" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_project_users`"
            )  # noqa: E501
        # verify the required parameter "project_user" is set
        if self.api_client.client_side_validation and (
            "project_user" not in params or params["project_user"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `project_user` when calling `post_workspace_project_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "project_user" in params:
            body_params = params["project_user"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/project_users",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsProjectUser",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_workspace_project(self, workspace_id, project_id, post_input, **kwargs):  # noqa: E501
        """WorkspaceProject  # noqa: E501

        Update project for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_project(workspace_id, project_id, post_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :param ProjectPayload post_input: Post parameters (required)
        :return: ModelsProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_workspace_project_with_http_info(workspace_id, project_id, post_input, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workspace_project_with_http_info(workspace_id, project_id, post_input, **kwargs)  # noqa: E501
            return data

    def put_workspace_project_with_http_info(self, workspace_id, project_id, post_input, **kwargs):  # noqa: E501
        """WorkspaceProject  # noqa: E501

        Update project for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_project_with_http_info(workspace_id, project_id, post_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :param ProjectPayload post_input: Post parameters (required)
        :return: ModelsProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_id", "post_input"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_workspace_project" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `put_workspace_project`"
            )  # noqa: E501
        # verify the required parameter "project_id" is set
        if self.api_client.client_side_validation and (
            "project_id" not in params or params["project_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `put_workspace_project`")  # noqa: E501
        # verify the required parameter "post_input" is set
        if self.api_client.client_side_validation and (
            "post_input" not in params or params["post_input"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `post_input` when calling `put_workspace_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "project_id" in params:
            path_params["project_id"] = params["project_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post_input" in params:
            body_params = params["post_input"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/projects/{project_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsProject",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_workspace_project_users(self, workspace_id, project_user_id, project_user, **kwargs):  # noqa: E501
        """Update an user into workspace projects users  # noqa: E501

        Update the data for a project user for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_project_users(workspace_id, project_user_id, project_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_user_id: Numeric ID of the project user (required)
        :param UserPutPayload project_user: Input data of the user. (required)
        :return: ModelsProjectUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_workspace_project_users_with_http_info(
                workspace_id, project_user_id, project_user, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_workspace_project_users_with_http_info(
                workspace_id, project_user_id, project_user, **kwargs
            )  # noqa: E501
            return data

    def put_workspace_project_users_with_http_info(self, workspace_id, project_user_id, project_user, **kwargs):  # noqa: E501
        """Update an user into workspace projects users  # noqa: E501

        Update the data for a project user for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_project_users_with_http_info(workspace_id, project_user_id, project_user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_user_id: Numeric ID of the project user (required)
        :param UserPutPayload project_user: Input data of the user. (required)
        :return: ModelsProjectUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_user_id", "project_user"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_workspace_project_users" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `put_workspace_project_users`"
            )  # noqa: E501
        # verify the required parameter "project_user_id" is set
        if self.api_client.client_side_validation and (
            "project_user_id" not in params or params["project_user_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `project_user_id` when calling `put_workspace_project_users`"
            )  # noqa: E501
        # verify the required parameter "project_user" is set
        if self.api_client.client_side_validation and (
            "project_user" not in params or params["project_user"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `project_user` when calling `put_workspace_project_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "project_user_id" in params:
            path_params["project_user_id"] = params["project_user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "project_user" in params:
            body_params = params["project_user"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/project_users/{project_user_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsProjectUser",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def workspaces_workspace_id_projects_billable_amounts_post(self, workspace_id, post_input, **kwargs):  # noqa: E501
        """Projects  # noqa: E501

        Get projects billable amounts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspaces_workspace_id_projects_billable_amounts_post(workspace_id, post_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param ProjectsPayload post_input: Project IDs (required)
        :return: list[ModelsProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.workspaces_workspace_id_projects_billable_amounts_post_with_http_info(
                workspace_id, post_input, **kwargs
            )  # noqa: E501
        else:
            (data) = self.workspaces_workspace_id_projects_billable_amounts_post_with_http_info(
                workspace_id, post_input, **kwargs
            )  # noqa: E501
            return data

    def workspaces_workspace_id_projects_billable_amounts_post_with_http_info(
        self, workspace_id, post_input, **kwargs
    ):  # noqa: E501
        """Projects  # noqa: E501

        Get projects billable amounts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspaces_workspace_id_projects_billable_amounts_post_with_http_info(workspace_id, post_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param ProjectsPayload post_input: Project IDs (required)
        :return: list[ModelsProject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "post_input"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspaces_workspace_id_projects_billable_amounts_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `workspaces_workspace_id_projects_billable_amounts_post`"
            )  # noqa: E501
        # verify the required parameter "post_input" is set
        if self.api_client.client_side_validation and (
            "post_input" not in params or params["post_input"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `post_input` when calling `workspaces_workspace_id_projects_billable_amounts_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post_input" in params:
            body_params = params["post_input"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/projects/billable-amounts",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsProject]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def workspaces_workspace_id_projects_project_id_get(self, workspace_id, project_id, **kwargs):  # noqa: E501
        """WorkspaceProject  # noqa: E501

        Get project for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspaces_workspace_id_projects_project_id_get(workspace_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :return: ModelsProject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.workspaces_workspace_id_projects_project_id_get_with_http_info(
                workspace_id, project_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.workspaces_workspace_id_projects_project_id_get_with_http_info(
                workspace_id, project_id, **kwargs
            )  # noqa: E501
            return data

    def workspaces_workspace_id_projects_project_id_get_with_http_info(self, workspace_id, project_id, **kwargs):  # noqa: E501
        """WorkspaceProject  # noqa: E501

        Get project for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspaces_workspace_id_projects_project_id_get_with_http_info(workspace_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :return: ModelsProject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspaces_workspace_id_projects_project_id_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `workspaces_workspace_id_projects_project_id_get`"
            )  # noqa: E501
        # verify the required parameter "project_id" is set
        if self.api_client.client_side_validation and (
            "project_id" not in params or params["project_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `project_id` when calling `workspaces_workspace_id_projects_project_id_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "project_id" in params:
            path_params["project_id"] = params["project_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/projects/{project_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsProject",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def workspaces_workspace_id_projects_project_id_statistics_get(self, workspace_id, project_id, **kwargs):  # noqa: E501
        """WorkspaceProject  # noqa: E501

        Get statistics for given workspace and project. For time entry related information, this endpoint does not consider running ones.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspaces_workspace_id_projects_project_id_statistics_get(workspace_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :return: ModelsProjectStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.workspaces_workspace_id_projects_project_id_statistics_get_with_http_info(
                workspace_id, project_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.workspaces_workspace_id_projects_project_id_statistics_get_with_http_info(
                workspace_id, project_id, **kwargs
            )  # noqa: E501
            return data

    def workspaces_workspace_id_projects_project_id_statistics_get_with_http_info(
        self, workspace_id, project_id, **kwargs
    ):  # noqa: E501
        """WorkspaceProject  # noqa: E501

        Get statistics for given workspace and project. For time entry related information, this endpoint does not consider running ones.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspaces_workspace_id_projects_project_id_statistics_get_with_http_info(workspace_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :return: ModelsProjectStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspaces_workspace_id_projects_project_id_statistics_get" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `workspaces_workspace_id_projects_project_id_statistics_get`"
            )  # noqa: E501
        # verify the required parameter "project_id" is set
        if self.api_client.client_side_validation and (
            "project_id" not in params or params["project_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `project_id` when calling `workspaces_workspace_id_projects_project_id_statistics_get`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "project_id" in params:
            path_params["project_id"] = params["project_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/projects/{project_id}/statistics",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsProjectStatistics",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
