"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient


class RatesApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_rate(self, workspace_id, rate_post, **kwargs):  # noqa: E501
        """Rates creation  # noqa: E501

        Creates a new rate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rate(workspace_id, rate_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param DtoCreationRequest rate_post: Rate attributes (required)
        :return: DtoGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_rate_with_http_info(workspace_id, rate_post, **kwargs)  # noqa: E501
        else:
            (data) = self.create_rate_with_http_info(workspace_id, rate_post, **kwargs)  # noqa: E501
            return data

    def create_rate_with_http_info(self, workspace_id, rate_post, **kwargs):  # noqa: E501
        """Rates creation  # noqa: E501

        Creates a new rate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rate_with_http_info(workspace_id, rate_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param DtoCreationRequest rate_post: Rate attributes (required)
        :return: DtoGetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "rate_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method create_rate" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `workspace_id` when calling `create_rate`")  # noqa: E501
        # verify the required parameter "rate_post" is set
        if self.api_client.client_side_validation and ("rate_post" not in params or params["rate_post"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rate_post` when calling `create_rate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "rate_post" in params:
            body_params = params["rate_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/rates",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DtoGetResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_rate(self, workspace_id, rate_id, **kwargs):  # noqa: E501
        """Rates delete  # noqa: E501

        Removes a rate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_rate(workspace_id, rate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int rate_id: Numeric ID of the rate (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_rate_with_http_info(workspace_id, rate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_rate_with_http_info(workspace_id, rate_id, **kwargs)  # noqa: E501
            return data

    def delete_rate_with_http_info(self, workspace_id, rate_id, **kwargs):  # noqa: E501
        """Rates delete  # noqa: E501

        Removes a rate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_rate_with_http_info(workspace_id, rate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int rate_id: Numeric ID of the rate (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "rate_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_rate" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `workspace_id` when calling `delete_rate`")  # noqa: E501
        # verify the required parameter "rate_id" is set
        if self.api_client.client_side_validation and ("rate_id" not in params or params["rate_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rate_id` when calling `delete_rate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "rate_id" in params:
            path_params["rate_id"] = params["rate_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/rates/{rate_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_rates_by_level(self, workspace_id, level, level_id, **kwargs):  # noqa: E501
        """Rates list  # noqa: E501

        Get rates by level(workspace|project|user).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rates_by_level(workspace_id, level, level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str level: Rates level: workspace, project or user (required)
        :param int level_id: Numeric ID of the entity level (required)
        :return: list[DtoGetResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_rates_by_level_with_http_info(workspace_id, level, level_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rates_by_level_with_http_info(workspace_id, level, level_id, **kwargs)  # noqa: E501
            return data

    def get_rates_by_level_with_http_info(self, workspace_id, level, level_id, **kwargs):  # noqa: E501
        """Rates list  # noqa: E501

        Get rates by level(workspace|project|user).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rates_by_level_with_http_info(workspace_id, level, level_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str level: Rates level: workspace, project or user (required)
        :param int level_id: Numeric ID of the entity level (required)
        :return: list[DtoGetResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "level", "level_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_rates_by_level" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_rates_by_level`")  # noqa: E501
        # verify the required parameter "level" is set
        if self.api_client.client_side_validation and ("level" not in params or params["level"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `level` when calling `get_rates_by_level`")  # noqa: E501
        # verify the required parameter "level_id" is set
        if self.api_client.client_side_validation and ("level_id" not in params or params["level_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `level_id` when calling `get_rates_by_level`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "level" in params:
            path_params["level"] = params["level"]  # noqa: E501
        if "level_id" in params:
            path_params["level_id"] = params["level_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/rates/{level}/{level_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[DtoGetResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
