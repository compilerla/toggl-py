"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient


class ReportsApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_saved_report_resource(self, workspace_id, report_id, **kwargs):  # noqa: E501
        """models.SavedReport  # noqa: E501

        Delete saved report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_saved_report_resource(workspace_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int report_id: Numeric ID of the report. (required)
        :return: ModelsSavedReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_saved_report_resource_with_http_info(workspace_id, report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_saved_report_resource_with_http_info(workspace_id, report_id, **kwargs)  # noqa: E501
            return data

    def delete_saved_report_resource_with_http_info(self, workspace_id, report_id, **kwargs):  # noqa: E501
        """models.SavedReport  # noqa: E501

        Delete saved report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_saved_report_resource_with_http_info(workspace_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int report_id: Numeric ID of the report. (required)
        :return: ModelsSavedReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "report_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_saved_report_resource" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `delete_saved_report_resource`"  # noqa: E501
            )
        # verify the required parameter "report_id" is set
        if self.api_client.client_side_validation and ("report_id" not in params or params["report_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `report_id` when calling `delete_saved_report_resource`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "report_id" in params:
            path_params["report_id"] = params["report_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/reports/shared/{report_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsSavedReport",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_workspace_scheduled_reports(self, workspace_id, report_id, **kwargs):  # noqa: E501
        """ScheduledReport  # noqa: E501

        Endpoint for delete a scheduled report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_scheduled_reports(workspace_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int report_id: Numeric ID of the report (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_workspace_scheduled_reports_with_http_info(workspace_id, report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_scheduled_reports_with_http_info(workspace_id, report_id, **kwargs)  # noqa: E501
            return data

    def delete_workspace_scheduled_reports_with_http_info(self, workspace_id, report_id, **kwargs):  # noqa: E501
        """ScheduledReport  # noqa: E501

        Endpoint for delete a scheduled report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_scheduled_reports_with_http_info(workspace_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int report_id: Numeric ID of the report (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "report_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method delete_workspace_scheduled_reports" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `delete_workspace_scheduled_reports`"  # noqa: E501
            )
        # verify the required parameter "report_id" is set
        if self.api_client.client_side_validation and ("report_id" not in params or params["report_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `report_id` when calling `delete_workspace_scheduled_reports`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "report_id" in params:
            path_params["report_id"] = params["report_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/scheduled_reports/{report_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_saved_report_resource(self, workspace_id, report_id, **kwargs):  # noqa: E501
        """models.SavedReport  # noqa: E501

        Get saved report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_saved_report_resource(workspace_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int report_id: Numeric ID of the report. (required)
        :return: ModelsSavedReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_saved_report_resource_with_http_info(workspace_id, report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_saved_report_resource_with_http_info(workspace_id, report_id, **kwargs)  # noqa: E501
            return data

    def get_saved_report_resource_with_http_info(self, workspace_id, report_id, **kwargs):  # noqa: E501
        """models.SavedReport  # noqa: E501

        Get saved report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_saved_report_resource_with_http_info(workspace_id, report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int report_id: Numeric ID of the report. (required)
        :return: ModelsSavedReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "report_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_saved_report_resource" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_saved_report_resource`"  # noqa: E501
            )
        # verify the required parameter "report_id" is set
        if self.api_client.client_side_validation and ("report_id" not in params or params["report_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `report_id` when calling `get_saved_report_resource`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "report_id" in params:
            path_params["report_id"] = params["report_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/reports/shared/{report_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsSavedReport",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_shared_report(self, workspace_id, **kwargs):  # noqa: E501
        """workspace.SharedReport  # noqa: E501

        Get shared report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shared_report(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param bool fixed_dates:
        :param str name:
        :param int page:
        :param int per_page:
        :param bool public:
        :param bool scheduled:
        :param str sort_direction:
        :param str sort_field:
        :return: list[ModelsSavedReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_shared_report_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_shared_report_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_shared_report_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """workspace.SharedReport  # noqa: E501

        Get shared report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_shared_report_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param bool fixed_dates:
        :param str name:
        :param int page:
        :param int per_page:
        :param bool public:
        :param bool scheduled:
        :param str sort_direction:
        :param str sort_field:
        :return: list[ModelsSavedReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "workspace_id",
            "fixed_dates",
            "name",
            "page",
            "per_page",
            "public",
            "scheduled",
            "sort_direction",
            "sort_field",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_shared_report" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_shared_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []
        if "fixed_dates" in params:
            query_params.append(("fixed_dates", params["fixed_dates"]))  # noqa: E501
        if "name" in params:
            query_params.append(("name", params["name"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "public" in params:
            query_params.append(("public", params["public"]))  # noqa: E501
        if "scheduled" in params:
            query_params.append(("scheduled", params["scheduled"]))  # noqa: E501
        if "sort_direction" in params:
            query_params.append(("sort_direction", params["sort_direction"]))  # noqa: E501
        if "sort_field" in params:
            query_params.append(("sort_field", params["sort_field"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/reports/shared",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsSavedReport]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_scheduled_reports(self, workspace_id, **kwargs):  # noqa: E501
        """ScheduledReports  # noqa: E501

        Lists scheduled reports.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_scheduled_reports(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: list[ModelsScheduledReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_scheduled_reports_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_scheduled_reports_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_scheduled_reports_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """ScheduledReports  # noqa: E501

        Lists scheduled reports.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_scheduled_reports_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: list[ModelsScheduledReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_scheduled_reports" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_scheduled_reports`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/scheduled_reports",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsScheduledReport]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_shared_report(self, workspace_id, saved_report_payload, **kwargs):  # noqa: E501
        """workspace.SharedReport  # noqa: E501

        Add shared report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_shared_report(workspace_id, saved_report_payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param SavedPayload saved_report_payload: Saved Report Payload (required)
        :return: ModelsSavedReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_shared_report_with_http_info(workspace_id, saved_report_payload, **kwargs)  # noqa: E501
        else:
            (data) = self.post_shared_report_with_http_info(workspace_id, saved_report_payload, **kwargs)  # noqa: E501
            return data

    def post_shared_report_with_http_info(self, workspace_id, saved_report_payload, **kwargs):  # noqa: E501
        """workspace.SharedReport  # noqa: E501

        Add shared report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_shared_report_with_http_info(workspace_id, saved_report_payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param SavedPayload saved_report_payload: Saved Report Payload (required)
        :return: ModelsSavedReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "saved_report_payload"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_shared_report" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `workspace_id` when calling `post_shared_report`")  # noqa: E501
        # verify the required parameter "saved_report_payload" is set
        if self.api_client.client_side_validation and (
            "saved_report_payload" not in params or params["saved_report_payload"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `saved_report_payload` when calling `post_shared_report`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "saved_report_payload" in params:
            body_params = params["saved_report_payload"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/reports/shared",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsSavedReport",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_scheduled_reports(self, workspace_id, workspace_id2, **kwargs):  # noqa: E501
        """ScheduledReports  # noqa: E501

        Endpoint for setting up a scheduled report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_scheduled_reports(workspace_id, workspace_id2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param ScheduledPayload workspace_id2: Comment from the client on the pricing plan change (required)
        :return: ModelsScheduledReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_scheduled_reports_with_http_info(workspace_id, workspace_id2, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_scheduled_reports_with_http_info(workspace_id, workspace_id2, **kwargs)  # noqa: E501
            return data

    def post_workspace_scheduled_reports_with_http_info(self, workspace_id, workspace_id2, **kwargs):  # noqa: E501
        """ScheduledReports  # noqa: E501

        Endpoint for setting up a scheduled report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_scheduled_reports_with_http_info(workspace_id, workspace_id2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param ScheduledPayload workspace_id2: Comment from the client on the pricing plan change (required)
        :return: ModelsScheduledReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "workspace_id2"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_workspace_scheduled_reports" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_scheduled_reports`"  # noqa: E501
            )
        # verify the required parameter "workspace_id2" is set
        if self.api_client.client_side_validation and (
            "workspace_id2" not in params or params["workspace_id2"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id2` when calling `post_workspace_scheduled_reports`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "workspace_id2" in params:
            body_params = params["workspace_id2"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/scheduled_reports",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsScheduledReport",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_saved_report_resource(self, workspace_id, report_id, saved_report_payload, **kwargs):  # noqa: E501
        """models.SavedReport  # noqa: E501

        Change saved report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_saved_report_resource(workspace_id, report_id, saved_report_payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int report_id: Numeric ID of the report. (required)
        :param SavedPayload saved_report_payload: Saved Report Payload (required)
        :return: ModelsSavedReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_saved_report_resource_with_http_info(
                workspace_id, report_id, saved_report_payload, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_saved_report_resource_with_http_info(
                workspace_id, report_id, saved_report_payload, **kwargs
            )  # noqa: E501
            return data

    def put_saved_report_resource_with_http_info(self, workspace_id, report_id, saved_report_payload, **kwargs):  # noqa: E501
        """models.SavedReport  # noqa: E501

        Change saved report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_saved_report_resource_with_http_info(workspace_id, report_id, saved_report_payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int report_id: Numeric ID of the report. (required)
        :param SavedPayload saved_report_payload: Saved Report Payload (required)
        :return: ModelsSavedReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "report_id", "saved_report_payload"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_saved_report_resource" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `put_saved_report_resource`"  # noqa: E501
            )
        # verify the required parameter "report_id" is set
        if self.api_client.client_side_validation and ("report_id" not in params or params["report_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `report_id` when calling `put_saved_report_resource`"  # noqa: E501
            )
        # verify the required parameter "saved_report_payload" is set
        if self.api_client.client_side_validation and (
            "saved_report_payload" not in params or params["saved_report_payload"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `saved_report_payload` when calling `put_saved_report_resource`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "report_id" in params:
            path_params["report_id"] = params["report_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "saved_report_payload" in params:
            body_params = params["saved_report_payload"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/reports/shared/{report_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsSavedReport",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_shared_report(self, workspace_id, report_id, saved_report_payload, **kwargs):  # noqa: E501
        """workspace.SharedReport  # noqa: E501

        Change shared report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_shared_report(workspace_id, report_id, saved_report_payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int report_id: Numeric ID of the report. (required)
        :param list[SavedPayload] saved_report_payload: Saved Report Payload (required)
        :return: ModelsSavedReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_shared_report_with_http_info(workspace_id, report_id, saved_report_payload, **kwargs)  # noqa: E501
        else:
            (data) = self.put_shared_report_with_http_info(
                workspace_id, report_id, saved_report_payload, **kwargs
            )  # noqa: E501
            return data

    def put_shared_report_with_http_info(self, workspace_id, report_id, saved_report_payload, **kwargs):  # noqa: E501
        """workspace.SharedReport  # noqa: E501

        Change shared report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_shared_report_with_http_info(workspace_id, report_id, saved_report_payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int report_id: Numeric ID of the report. (required)
        :param list[SavedPayload] saved_report_payload: Saved Report Payload (required)
        :return: ModelsSavedReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "report_id", "saved_report_payload"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_shared_report" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `workspace_id` when calling `put_shared_report`")  # noqa: E501
        # verify the required parameter "report_id" is set
        if self.api_client.client_side_validation and ("report_id" not in params or params["report_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `report_id` when calling `put_shared_report`")  # noqa: E501
        # verify the required parameter "saved_report_payload" is set
        if self.api_client.client_side_validation and (
            "saved_report_payload" not in params or params["saved_report_payload"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `saved_report_payload` when calling `put_shared_report`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "report_id" in params:
            path_params["report_id"] = params["report_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "saved_report_payload" in params:
            body_params = params["saved_report_payload"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/reports/shared",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsSavedReport",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
