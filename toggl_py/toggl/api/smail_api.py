"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient


class SmailApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def post_smail_contact(self, email_info, **kwargs):  # noqa: E501
        """Send an email to a contact  # noqa: E501

        Send an email to a contact  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_smail_contact(email_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SmailContactPayload email_info: Email informations (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_smail_contact_with_http_info(email_info, **kwargs)  # noqa: E501
        else:
            (data) = self.post_smail_contact_with_http_info(email_info, **kwargs)  # noqa: E501
            return data

    def post_smail_contact_with_http_info(self, email_info, **kwargs):  # noqa: E501
        """Send an email to a contact  # noqa: E501

        Send an email to a contact  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_smail_contact_with_http_info(email_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SmailContactPayload email_info: Email informations (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["email_info"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_smail_contact" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "email_info" is set
        if self.api_client.client_side_validation and (
            "email_info" not in params or params["email_info"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `email_info` when calling `post_smail_contact`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "email_info" in params:
            body_params = params["email_info"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/smail/contact",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_smail_demo(self, email_info, **kwargs):  # noqa: E501
        """Send an email for a demo  # noqa: E501

        Send an email for a demo  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_smail_demo(email_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SmailDemoPayload email_info: Email informations (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_smail_demo_with_http_info(email_info, **kwargs)  # noqa: E501
        else:
            (data) = self.post_smail_demo_with_http_info(email_info, **kwargs)  # noqa: E501
            return data

    def post_smail_demo_with_http_info(self, email_info, **kwargs):  # noqa: E501
        """Send an email for a demo  # noqa: E501

        Send an email for a demo  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_smail_demo_with_http_info(email_info, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SmailDemoPayload email_info: Email informations (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["email_info"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_smail_demo" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "email_info" is set
        if self.api_client.client_side_validation and (
            "email_info" not in params or params["email_info"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `email_info` when calling `post_smail_demo`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "email_info" in params:
            body_params = params["email_info"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/smail/demo",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_smail_meet(self, email_location, **kwargs):  # noqa: E501
        """Send an email for meet  # noqa: E501

        Send an email for meet with message and location  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_smail_meet(email_location, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SmailMeetPayload email_location: Email and Location (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_smail_meet_with_http_info(email_location, **kwargs)  # noqa: E501
        else:
            (data) = self.post_smail_meet_with_http_info(email_location, **kwargs)  # noqa: E501
            return data

    def post_smail_meet_with_http_info(self, email_location, **kwargs):  # noqa: E501
        """Send an email for meet  # noqa: E501

        Send an email for meet with message and location  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_smail_meet_with_http_info(email_location, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SmailMeetPayload email_location: Email and Location (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["email_location"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_smail_meet" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "email_location" is set
        if self.api_client.client_side_validation and (
            "email_location" not in params or params["email_location"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `email_location` when calling `post_smail_meet`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "email_location" in params:
            body_params = params["email_location"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/smail/meet",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
