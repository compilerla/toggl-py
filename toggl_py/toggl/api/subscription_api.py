"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import re  # noqa: F401

from toggl.api_client import ApiClient


class SubscriptionApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_organization_subscription(self, organization_id, immediate_cancel, **kwargs):  # noqa: E501
        """Subscription  # noqa: E501

        Cancels an existing subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_subscription(organization_id, immediate_cancel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param str immediate_cancel: If true, the subscription is canceled immediately otherwise canceled at period end (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_organization_subscription_with_http_info(
                organization_id, immediate_cancel, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_organization_subscription_with_http_info(
                organization_id, immediate_cancel, **kwargs
            )  # noqa: E501
            return data

    def delete_organization_subscription_with_http_info(self, organization_id, immediate_cancel, **kwargs):  # noqa: E501
        """Subscription  # noqa: E501

        Cancels an existing subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_subscription_with_http_info(organization_id, immediate_cancel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param str immediate_cancel: If true, the subscription is canceled immediately otherwise canceled at period end (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "immediate_cancel"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_organization_subscription" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_organization_subscription`"
            )  # noqa: E501
        # verify the required parameter "immediate_cancel" is set
        if self.api_client.client_side_validation and (
            "immediate_cancel" not in params or params["immediate_cancel"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `immediate_cancel` when calling `delete_organization_subscription`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "immediate_cancel" in params:
            query_params.append(("immediateCancel", params["immediate_cancel"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/subscription",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_workspace_subscription(self, workspace_id, subscription_id, feedback_data, **kwargs):  # noqa: E501
        """Subscription  # noqa: E501

        Cancels the subscription and saves feedback if present.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_subscription(workspace_id, subscription_id, feedback_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int subscription_id: Numeric ID of the subscription. (required)
        :param ModelsPlanChangeFeedback feedback_data: Feedback data. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_workspace_subscription_with_http_info(
                workspace_id, subscription_id, feedback_data, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_workspace_subscription_with_http_info(
                workspace_id, subscription_id, feedback_data, **kwargs
            )  # noqa: E501
            return data

    def delete_workspace_subscription_with_http_info(
        self, workspace_id, subscription_id, feedback_data, **kwargs
    ):  # noqa: E501
        """Subscription  # noqa: E501

        Cancels the subscription and saves feedback if present.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_subscription_with_http_info(workspace_id, subscription_id, feedback_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int subscription_id: Numeric ID of the subscription. (required)
        :param ModelsPlanChangeFeedback feedback_data: Feedback data. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "subscription_id", "feedback_data"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_workspace_subscription" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `delete_workspace_subscription`"
            )  # noqa: E501
        # verify the required parameter "subscription_id" is set
        if self.api_client.client_side_validation and (
            "subscription_id" not in params or params["subscription_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `subscription_id` when calling `delete_workspace_subscription`"
            )  # noqa: E501
        # verify the required parameter "feedback_data" is set
        if self.api_client.client_side_validation and (
            "feedback_data" not in params or params["feedback_data"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `feedback_data` when calling `delete_workspace_subscription`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "subscription_id" in params:
            path_params["subscription_id"] = params["subscription_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "feedback_data" in params:
            body_params = params["feedback_data"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/subscription/{subscription_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_currencies(self, **kwargs):  # noqa: E501
        """Currencies  # noqa: E501

        Returns a list of available currencies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_currencies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ModelsCurrency]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_currencies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_currencies_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_currencies_with_http_info(self, **kwargs):  # noqa: E501
        """Currencies  # noqa: E501

        Returns a list of available currencies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_currencies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ModelsCurrency]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_currencies" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/currencies",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsCurrency]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_invoice(self, organization_id, invoice_uid, **kwargs):  # noqa: E501
        """InvoicePdf  # noqa: E501

        Returns a Invoice document in PDF form.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_invoice(organization_id, invoice_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param str invoice_uid: Numeric ID or string ID of the invoice. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_invoice_with_http_info(organization_id, invoice_uid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_invoice_with_http_info(organization_id, invoice_uid, **kwargs)  # noqa: E501
            return data

    def get_organization_invoice_with_http_info(self, organization_id, invoice_uid, **kwargs):  # noqa: E501
        """InvoicePdf  # noqa: E501

        Returns a Invoice document in PDF form.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_invoice_with_http_info(organization_id, invoice_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param str invoice_uid: Numeric ID or string ID of the invoice. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "invoice_uid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_organization_invoice" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organization_invoice`"
            )  # noqa: E501
        # verify the required parameter "invoice_uid" is set
        if self.api_client.client_side_validation and (
            "invoice_uid" not in params or params["invoice_uid"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `invoice_uid` when calling `get_organization_invoice`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "invoice_uid" in params:
            path_params["invoice_uid"] = params["invoice_uid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/pdf"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/invoices/{invoice_uid}.pdf",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_invoice_summary(self, organization_id, **kwargs):  # noqa: E501
        """Invoice Summary  # noqa: E501

        Returns a summary of the next invoice for an Organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_invoice_summary(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param int quantity: Quantity of the subscription
        :param str pricing_plan_tag: Pricing plan tag
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_invoice_summary_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_invoice_summary_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def get_organization_invoice_summary_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """Invoice Summary  # noqa: E501

        Returns a summary of the next invoice for an Organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_invoice_summary_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param int quantity: Quantity of the subscription
        :param str pricing_plan_tag: Pricing plan tag
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "quantity", "pricing_plan_tag"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_organization_invoice_summary" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organization_invoice_summary`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "quantity" in params:
            query_params.append(("quantity", params["quantity"]))  # noqa: E501
        if "pricing_plan_tag" in params:
            query_params.append(("pricing_plan_tag", params["pricing_plan_tag"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/subscription/invoice_summary",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_subscription(self, organization_id, **kwargs):  # noqa: E501
        """Subscription  # noqa: E501

        Returns subscription data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_subscription(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :return: SubscriptionOutData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_subscription_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_subscription_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def get_organization_subscription_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """Subscription  # noqa: E501

        Returns subscription data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_subscription_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :return: SubscriptionOutData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_organization_subscription" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organization_subscription`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/subscription",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SubscriptionOutData",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_public_subscription_plans(self, **kwargs):  # noqa: E501
        """Public Subscription Plans  # noqa: E501

        Lists Public subscription plans.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_subscription_plans(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[BillingFancyPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_public_subscription_plans_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_public_subscription_plans_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_public_subscription_plans_with_http_info(self, **kwargs):  # noqa: E501
        """Public Subscription Plans  # noqa: E501

        Lists Public subscription plans.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_subscription_plans_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[BillingFancyPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_public_subscription_plans" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/plans",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[BillingFancyPlan]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_currencies(self, workspace_id, **kwargs):  # noqa: E501
        """Get workspace currencies  # noqa: E501

        Get the currencies for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_currencies(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_currencies_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_currencies_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_currencies_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Get workspace currencies  # noqa: E501

        Get the currencies for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_currencies_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_currencies" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_currencies`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/currencies",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[str]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_customer(self, workspace_id, **kwargs):  # noqa: E501
        """Customer  # noqa: E501

        Allows to fetch customer data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_customer(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: ModelsCustomer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_customer_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_customer_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_customer_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Customer  # noqa: E501

        Allows to fetch customer data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_customer_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: ModelsCustomer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_customer" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_customer`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/customer",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsCustomer",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_features(self, workspace_id, **kwargs):  # noqa: E501
        """Features  # noqa: E501

        Returns list of the features available for a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_features(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :return: SubscriptionFeatureReturn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_features_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_features_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_features_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Features  # noqa: E501

        Returns list of the features available for a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_features_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :return: SubscriptionFeatureReturn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_features" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_features`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/subscription/features",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SubscriptionFeatureReturn",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_features_selected(self, workspace_id, **kwargs):  # noqa: E501
        """SelectedFeatures  # noqa: E501

        Returns list of the features assigned to the workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_features_selected(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :return: SubscriptionFeatureReturn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_features_selected_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_features_selected_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_features_selected_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """SelectedFeatures  # noqa: E501

        Returns list of the features assigned to the workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_features_selected_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :return: SubscriptionFeatureReturn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_features_selected" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_features_selected`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/subscription/selected_features",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SubscriptionFeatureReturn",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_invoices(self, workspace_id, invoice_id, **kwargs):  # noqa: E501
        """InvoicePdf  # noqa: E501

        Returns an Invoice document in PDF form.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_invoices(workspace_id, invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int invoice_id: Numeric ID of the invoice. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_invoices_with_http_info(workspace_id, invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_invoices_with_http_info(workspace_id, invoice_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_invoices_with_http_info(self, workspace_id, invoice_id, **kwargs):  # noqa: E501
        """InvoicePdf  # noqa: E501

        Returns an Invoice document in PDF form.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_invoices_with_http_info(workspace_id, invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int invoice_id: Numeric ID of the invoice. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "invoice_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_invoices" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_invoices`"
            )  # noqa: E501
        # verify the required parameter "invoice_id" is set
        if self.api_client.client_side_validation and (
            "invoice_id" not in params or params["invoice_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `invoice_id` when calling `get_workspace_invoices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "invoice_id" in params:
            path_params["invoice_id"] = params["invoice_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/pdf"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/invoices/{invoice_id}.pdf",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_payment_receipts(self, workspace_id, payment_id, **kwargs):  # noqa: E501
        """PaymentReceipts  # noqa: E501

        Returns payment receipt pdf file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_payment_receipts(workspace_id, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int payment_id: Numeric ID of the receipt (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_payment_receipts_with_http_info(workspace_id, payment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_payment_receipts_with_http_info(workspace_id, payment_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_payment_receipts_with_http_info(self, workspace_id, payment_id, **kwargs):  # noqa: E501
        """PaymentReceipts  # noqa: E501

        Returns payment receipt pdf file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_payment_receipts_with_http_info(workspace_id, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int payment_id: Numeric ID of the receipt (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "payment_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_payment_receipts" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_payment_receipts`"
            )  # noqa: E501
        # verify the required parameter "payment_id" is set
        if self.api_client.client_side_validation and (
            "payment_id" not in params or params["payment_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `payment_id` when calling `get_workspace_payment_receipts`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "payment_id" in params:
            path_params["payment_id"] = params["payment_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/pdf"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/payment_receipts/{payment_id}.pdf",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_payment_records(self, workspace_id, **kwargs):  # noqa: E501
        """PaymentRecords  # noqa: E501

        Returns payment records.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_payment_records(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: list[ModelsPaymentRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_payment_records_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_payment_records_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_payment_records_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """PaymentRecords  # noqa: E501

        Returns payment records.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_payment_records_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: list[ModelsPaymentRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_payment_records" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_payment_records`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/payment_records",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsPaymentRecord]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_plans(self, workspace_id, **kwargs):  # noqa: E501
        """WorkspacePlans  # noqa: E501

        Returns pricing plans for a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_plans(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_plans_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_plans_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_plans_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """WorkspacePlans  # noqa: E501

        Returns pricing plans for a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_plans_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_plans" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_workspace_plans`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/plans",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_plans_pricing(self, workspace_id, plan_id, **kwargs):  # noqa: E501
        """WorkspacePlan  # noqa: E501

        Returns plans fitered by plan ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_plans_pricing(workspace_id, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int plan_id: Numeric ID of the plan to get (required)
        :return: list[BillingFancyPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_plans_pricing_with_http_info(workspace_id, plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_plans_pricing_with_http_info(workspace_id, plan_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_plans_pricing_with_http_info(self, workspace_id, plan_id, **kwargs):  # noqa: E501
        """WorkspacePlan  # noqa: E501

        Returns plans fitered by plan ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_plans_pricing_with_http_info(workspace_id, plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int plan_id: Numeric ID of the plan to get (required)
        :return: list[BillingFancyPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "plan_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_plans_pricing" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_plans_pricing`"
            )  # noqa: E501
        # verify the required parameter "plan_id" is set
        if self.api_client.client_side_validation and ("plan_id" not in params or params["plan_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `plan_id` when calling `get_workspace_plans_pricing`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "plan_id" in params:
            path_params["plan_id"] = params["plan_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/plans/{plan_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[BillingFancyPlan]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_purchase_order_pdf(self, workspace_id, purchase_order_id, **kwargs):  # noqa: E501
        """PurchaseOrderPdf  # noqa: E501

        Returns a Purchase Order document in PDF form.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_purchase_order_pdf(workspace_id, purchase_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int purchase_order_id: Numeric ID of the purchase order. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_purchase_order_pdf_with_http_info(
                workspace_id, purchase_order_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_workspace_purchase_order_pdf_with_http_info(
                workspace_id, purchase_order_id, **kwargs
            )  # noqa: E501
            return data

    def get_workspace_purchase_order_pdf_with_http_info(self, workspace_id, purchase_order_id, **kwargs):  # noqa: E501
        """PurchaseOrderPdf  # noqa: E501

        Returns a Purchase Order document in PDF form.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_purchase_order_pdf_with_http_info(workspace_id, purchase_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int purchase_order_id: Numeric ID of the purchase order. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "purchase_order_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_purchase_order_pdf" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_purchase_order_pdf`"
            )  # noqa: E501
        # verify the required parameter "purchase_order_id" is set
        if self.api_client.client_side_validation and (
            "purchase_order_id" not in params or params["purchase_order_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `purchase_order_id` when calling `get_workspace_purchase_order_pdf`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "purchase_order_id" in params:
            path_params["purchase_order_id"] = params["purchase_order_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/pdf"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/subscription/purchase_orders/{purchase_order_id}.pdf",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_subscription(self, workspace_id, **kwargs):  # noqa: E501
        """Subscription  # noqa: E501

        Returns subscription data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_subscription(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :return: SubscriptionOutData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_subscription_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_subscription_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_subscription_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Subscription  # noqa: E501

        Returns subscription data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_subscription_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :return: SubscriptionOutData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_subscription" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_subscription`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/subscription",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SubscriptionOutData",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organization_plans_pricing_feedback(self, organization_id, pricing_plan_id, **kwargs):  # noqa: E501
        """Feedback  # noqa: E501

        Endpoint for client's feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_plans_pricing_feedback(organization_id, pricing_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int pricing_plan_id: Numeric ID of the old pricing_plan_id (required)
        :param ModelsPlanChangeFeedback comment: Comment from the client on the pricing plan change
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organization_plans_pricing_feedback_with_http_info(
                organization_id, pricing_plan_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_organization_plans_pricing_feedback_with_http_info(
                organization_id, pricing_plan_id, **kwargs
            )  # noqa: E501
            return data

    def post_organization_plans_pricing_feedback_with_http_info(
        self, organization_id, pricing_plan_id, **kwargs
    ):  # noqa: E501
        """Feedback  # noqa: E501

        Endpoint for client's feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_plans_pricing_feedback_with_http_info(organization_id, pricing_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int pricing_plan_id: Numeric ID of the old pricing_plan_id (required)
        :param ModelsPlanChangeFeedback comment: Comment from the client on the pricing plan change
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "pricing_plan_id", "comment"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method post_organization_plans_pricing_feedback" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organization_plans_pricing_feedback`"
            )  # noqa: E501
        # verify the required parameter "pricing_plan_id" is set
        if self.api_client.client_side_validation and (
            "pricing_plan_id" not in params or params["pricing_plan_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `pricing_plan_id` when calling `post_organization_plans_pricing_feedback`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "pricing_plan_id" in params:
            path_params["pricing_plan_id"] = params["pricing_plan_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "comment" in params:
            body_params = params["comment"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/pricing_plans/{pricing_plan_id}/feedback",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organization_purchase_order(self, organization_id, organization_purchase_order_request, **kwargs):  # noqa: E501
        """PurchaseOrders  # noqa: E501

        Create a Purchase Order document for an organization and send an email to the customer with a reference to the document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_purchase_order(organization_id, organization_purchase_order_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param PurchaseordersPayload organization_purchase_order_request: Input data for purchase order creation. (required)
        :return: AccountingPurchaseOrderListItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organization_purchase_order_with_http_info(
                organization_id, organization_purchase_order_request, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_organization_purchase_order_with_http_info(
                organization_id, organization_purchase_order_request, **kwargs
            )  # noqa: E501
            return data

    def post_organization_purchase_order_with_http_info(
        self, organization_id, organization_purchase_order_request, **kwargs
    ):  # noqa: E501
        """PurchaseOrders  # noqa: E501

        Create a Purchase Order document for an organization and send an email to the customer with a reference to the document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_purchase_order_with_http_info(organization_id, organization_purchase_order_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param PurchaseordersPayload organization_purchase_order_request: Input data for purchase order creation. (required)
        :return: AccountingPurchaseOrderListItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "organization_purchase_order_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_organization_purchase_order" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organization_purchase_order`"
            )  # noqa: E501
        # verify the required parameter "organization_purchase_order_request" is set
        if self.api_client.client_side_validation and (
            "organization_purchase_order_request" not in params or params["organization_purchase_order_request"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_purchase_order_request` when calling `post_organization_purchase_order`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "organization_purchase_order_request" in params:
            body_params = params["organization_purchase_order_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/subscription/purchase_orders",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AccountingPurchaseOrderListItem",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organization_subscription(self, organization_id, organization_subscription_request, **kwargs):  # noqa: E501
        """Subscription  # noqa: E501

        Allows to create a new unified subscription for an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_subscription(organization_id, organization_subscription_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param SubscriptionCreateUnifiedSubsRequest organization_subscription_request: Input data for subscription creation. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organization_subscription_with_http_info(
                organization_id, organization_subscription_request, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_organization_subscription_with_http_info(
                organization_id, organization_subscription_request, **kwargs
            )  # noqa: E501
            return data

    def post_organization_subscription_with_http_info(
        self, organization_id, organization_subscription_request, **kwargs
    ):  # noqa: E501
        """Subscription  # noqa: E501

        Allows to create a new unified subscription for an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_subscription_with_http_info(organization_id, organization_subscription_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param SubscriptionCreateUnifiedSubsRequest organization_subscription_request: Input data for subscription creation. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "organization_subscription_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_organization_subscription" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organization_subscription`"
            )  # noqa: E501
        # verify the required parameter "organization_subscription_request" is set
        if self.api_client.client_side_validation and (
            "organization_subscription_request" not in params or params["organization_subscription_request"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_subscription_request` when calling `post_organization_subscription`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "organization_subscription_request" in params:
            body_params = params["organization_subscription_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/subscription",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organization_subscription_0(self, organization_id, **kwargs):  # noqa: E501
        """Subscription  # noqa: E501

        Allows to create a new unified subscription on initial 30-day trial for an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_subscription_0(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organization_subscription_0_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_organization_subscription_0_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def post_organization_subscription_0_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """Subscription  # noqa: E501

        Allows to create a new unified subscription on initial 30-day trial for an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_subscription_0_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_organization_subscription_0" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organization_subscription_0`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/subscription/trial",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_customer(self, workspace_id, contact_detail_request, **kwargs):  # noqa: E501
        """ContactDetails  # noqa: E501

        Allows to save contact details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_customer(workspace_id, contact_detail_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param SubscriptionContactDetailRequest contact_detail_request: Input data for contact details. (required)
        :return: ModelsContactDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_customer_with_http_info(workspace_id, contact_detail_request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_customer_with_http_info(workspace_id, contact_detail_request, **kwargs)  # noqa: E501
            return data

    def post_workspace_customer_with_http_info(self, workspace_id, contact_detail_request, **kwargs):  # noqa: E501
        """ContactDetails  # noqa: E501

        Allows to save contact details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_customer_with_http_info(workspace_id, contact_detail_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param SubscriptionContactDetailRequest contact_detail_request: Input data for contact details. (required)
        :return: ModelsContactDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "contact_detail_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_workspace_customer" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_customer`"
            )  # noqa: E501
        # verify the required parameter "contact_detail_request" is set
        if self.api_client.client_side_validation and (
            "contact_detail_request" not in params or params["contact_detail_request"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `contact_detail_request` when calling `post_workspace_customer`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "contact_detail_request" in params:
            body_params = params["contact_detail_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/customer/contact_detail",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsContactDetail",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_plans_pricing_feedback(self, workspace_id, pricing_plan_id, **kwargs):  # noqa: E501
        """Feedback  # noqa: E501

        Endpoint for client's feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_plans_pricing_feedback(workspace_id, pricing_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int pricing_plan_id: Numeric ID of the old pricing_plan_id (required)
        :param ModelsPlanChangeFeedback comment: Comment from the client on the pricing plan change
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_plans_pricing_feedback_with_http_info(
                workspace_id, pricing_plan_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_workspace_plans_pricing_feedback_with_http_info(
                workspace_id, pricing_plan_id, **kwargs
            )  # noqa: E501
            return data

    def post_workspace_plans_pricing_feedback_with_http_info(self, workspace_id, pricing_plan_id, **kwargs):  # noqa: E501
        """Feedback  # noqa: E501

        Endpoint for client's feedback on change of a pricing plan. It triggers an e-mail message with comment content to support.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_plans_pricing_feedback_with_http_info(workspace_id, pricing_plan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int pricing_plan_id: Numeric ID of the old pricing_plan_id (required)
        :param ModelsPlanChangeFeedback comment: Comment from the client on the pricing plan change
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "pricing_plan_id", "comment"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method post_workspace_plans_pricing_feedback" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_plans_pricing_feedback`"
            )  # noqa: E501
        # verify the required parameter "pricing_plan_id" is set
        if self.api_client.client_side_validation and (
            "pricing_plan_id" not in params or params["pricing_plan_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `pricing_plan_id` when calling `post_workspace_plans_pricing_feedback`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "pricing_plan_id" in params:
            path_params["pricing_plan_id"] = params["pricing_plan_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "comment" in params:
            body_params = params["comment"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/pricing_plans/{pricing_plan_id}/feedback",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_purchase_order(self, workspace_id, workspace_purchase_order_request, **kwargs):  # noqa: E501
        """PurchaseOrders  # noqa: E501

        Create a Purchase Order document for a workspace and send an email to the customer with a reference to the document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_purchase_order(workspace_id, workspace_purchase_order_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param PurchaseordersPayload workspace_purchase_order_request: Input data for purchase order creation. (required)
        :return: AccountingPurchaseOrderListItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_purchase_order_with_http_info(
                workspace_id, workspace_purchase_order_request, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_workspace_purchase_order_with_http_info(
                workspace_id, workspace_purchase_order_request, **kwargs
            )  # noqa: E501
            return data

    def post_workspace_purchase_order_with_http_info(
        self, workspace_id, workspace_purchase_order_request, **kwargs
    ):  # noqa: E501
        """PurchaseOrders  # noqa: E501

        Create a Purchase Order document for a workspace and send an email to the customer with a reference to the document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_purchase_order_with_http_info(workspace_id, workspace_purchase_order_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param PurchaseordersPayload workspace_purchase_order_request: Input data for purchase order creation. (required)
        :return: AccountingPurchaseOrderListItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "workspace_purchase_order_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_workspace_purchase_order" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_purchase_order`"
            )  # noqa: E501
        # verify the required parameter "workspace_purchase_order_request" is set
        if self.api_client.client_side_validation and (
            "workspace_purchase_order_request" not in params or params["workspace_purchase_order_request"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_purchase_order_request` when calling `post_workspace_purchase_order`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "workspace_purchase_order_request" in params:
            body_params = params["workspace_purchase_order_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/subscription/purchase_orders",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AccountingPurchaseOrderListItem",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_subscription(self, workspace_id, workspace_subscription_request, **kwargs):  # noqa: E501
        """Subscription  # noqa: E501

        Allows to create a new subscription, cancel existing one or change the pricing plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_subscription(workspace_id, workspace_subscription_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param SubscriptionPayload workspace_subscription_request: Input data for purchase order creation. (required)
        :return: ModelsSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_subscription_with_http_info(
                workspace_id, workspace_subscription_request, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_workspace_subscription_with_http_info(
                workspace_id, workspace_subscription_request, **kwargs
            )  # noqa: E501
            return data

    def post_workspace_subscription_with_http_info(self, workspace_id, workspace_subscription_request, **kwargs):  # noqa: E501
        """Subscription  # noqa: E501

        Allows to create a new subscription, cancel existing one or change the pricing plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_subscription_with_http_info(workspace_id, workspace_subscription_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param SubscriptionPayload workspace_subscription_request: Input data for purchase order creation. (required)
        :return: ModelsSubscription
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "workspace_subscription_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_workspace_subscription" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_subscription`"
            )  # noqa: E501
        # verify the required parameter "workspace_subscription_request" is set
        if self.api_client.client_side_validation and (
            "workspace_subscription_request" not in params or params["workspace_subscription_request"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_subscription_request` when calling `post_workspace_subscription`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "workspace_subscription_request" in params:
            body_params = params["workspace_subscription_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/subscription",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsSubscription",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_subscription_calculate(self, workspace_id, calculation_data_request, **kwargs):  # noqa: E501
        """SubscriptionCalculation  # noqa: E501

        Returns calculation of the subscription price for given pricing plan, period count, user count, currency, taxes etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_subscription_calculate(workspace_id, calculation_data_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param SubscriptionCalculateRequest calculation_data_request: Input data for calculation. (required)
        :return: SubscriptionCalculatedData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_subscription_calculate_with_http_info(
                workspace_id, calculation_data_request, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_workspace_subscription_calculate_with_http_info(
                workspace_id, calculation_data_request, **kwargs
            )  # noqa: E501
            return data

    def post_workspace_subscription_calculate_with_http_info(
        self, workspace_id, calculation_data_request, **kwargs
    ):  # noqa: E501
        """SubscriptionCalculation  # noqa: E501

        Returns calculation of the subscription price for given pricing plan, period count, user count, currency, taxes etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_subscription_calculate_with_http_info(workspace_id, calculation_data_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param SubscriptionCalculateRequest calculation_data_request: Input data for calculation. (required)
        :return: SubscriptionCalculatedData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "calculation_data_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method post_workspace_subscription_calculate" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_subscription_calculate`"
            )  # noqa: E501
        # verify the required parameter "calculation_data_request" is set
        if self.api_client.client_side_validation and (
            "calculation_data_request" not in params or params["calculation_data_request"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `calculation_data_request` when calling `post_workspace_subscription_calculate`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "calculation_data_request" in params:
            body_params = params["calculation_data_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/subscription/calculate",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SubscriptionCalculatedData",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_subscription_inc_accept(self, workspace_id, **kwargs):  # noqa: E501
        """IncAccept  # noqa: E501

        Records user acceptance of Terms of Service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_subscription_inc_accept(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_subscription_inc_accept_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_subscription_inc_accept_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def post_workspace_subscription_inc_accept_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """IncAccept  # noqa: E501

        Records user acceptance of Terms of Service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_subscription_inc_accept_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method post_workspace_subscription_inc_accept" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_subscription_inc_accept`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/subscription/inc_accept",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organization_subscription(self, organization_id, organization_subscription_request, **kwargs):  # noqa: E501
        """Subscription  # noqa: E501

        Allows to update existing unified subscription for an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_subscription(organization_id, organization_subscription_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param SubscriptionUpdateUnifiedSubsRequest organization_subscription_request: Input data for updating subscription. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organization_subscription_with_http_info(
                organization_id, organization_subscription_request, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_organization_subscription_with_http_info(
                organization_id, organization_subscription_request, **kwargs
            )  # noqa: E501
            return data

    def put_organization_subscription_with_http_info(
        self, organization_id, organization_subscription_request, **kwargs
    ):  # noqa: E501
        """Subscription  # noqa: E501

        Allows to update existing unified subscription for an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_subscription_with_http_info(organization_id, organization_subscription_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization. (required)
        :param SubscriptionUpdateUnifiedSubsRequest organization_subscription_request: Input data for updating subscription. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "organization_subscription_request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_organization_subscription" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organization_subscription`"
            )  # noqa: E501
        # verify the required parameter "organization_subscription_request" is set
        if self.api_client.client_side_validation and (
            "organization_subscription_request" not in params or params["organization_subscription_request"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_subscription_request` when calling `put_organization_subscription`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "organization_subscription_request" in params:
            body_params = params["organization_subscription_request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/subscription",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_workspace_profile(self, workspace_id, profile_id, **kwargs):  # noqa: E501
        """Profile  # noqa: E501

        Allows to change profile (subscription). This endpoint will be deprecated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_profile(workspace_id, profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int profile_id: Numeric ID of the profile (pricing plan). (required)
        :param ModelsPlanChangeFeedback feedback_data: Feedback data.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_workspace_profile_with_http_info(workspace_id, profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workspace_profile_with_http_info(workspace_id, profile_id, **kwargs)  # noqa: E501
            return data

    def put_workspace_profile_with_http_info(self, workspace_id, profile_id, **kwargs):  # noqa: E501
        """Profile  # noqa: E501

        Allows to change profile (subscription). This endpoint will be deprecated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_profile_with_http_info(workspace_id, profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int profile_id: Numeric ID of the profile (pricing plan). (required)
        :param ModelsPlanChangeFeedback feedback_data: Feedback data.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "profile_id", "feedback_data"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_workspace_profile" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `put_workspace_profile`"
            )  # noqa: E501
        # verify the required parameter "profile_id" is set
        if self.api_client.client_side_validation and (
            "profile_id" not in params or params["profile_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `profile_id` when calling `put_workspace_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "profile_id" in params:
            path_params["profile_id"] = params["profile_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "feedback_data" in params:
            body_params = params["feedback_data"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/profile/{profile_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
