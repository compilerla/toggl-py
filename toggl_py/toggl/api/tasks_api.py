"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient
from toggl.models.models_task import ModelsTask  # noqa: F401
from toggl.models.task_patch_input import TaskPatchInput  # noqa: F401
from toggl.models.task_patch_output import TaskPatchOutput  # noqa: F401
from toggl.models.task_payload import TaskPayload  # noqa: F401
from toggl.models.task_response import TaskResponse  # noqa: F401


class TasksApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_workspace_project_task(self, workspace_id: int, project_id: int, task_id: int, **kwargs) -> str:  # noqa: E501
        """WorkspaceProjectTask  # noqa: E501

        Delete projects task for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_project_task(workspace_id, project_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :param int task_id: Numeric ID of the task (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_workspace_project_task_with_http_info(workspace_id, project_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_project_task_with_http_info(
                workspace_id, project_id, task_id, **kwargs
            )  # noqa: E501
            return data

    def delete_workspace_project_task_with_http_info(
        self, workspace_id: int, project_id: int, task_id: int, **kwargs
    ) -> str:  # noqa: E501
        """WorkspaceProjectTask  # noqa: E501

        Delete projects task for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_project_task_with_http_info(workspace_id, project_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :param int task_id: Numeric ID of the task (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_id", "task_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_workspace_project_task" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `delete_workspace_project_task`"  # noqa: E501
            )
        # verify the required parameter "project_id" is set
        if self.api_client.client_side_validation and (
            "project_id" not in params or params["project_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `project_id` when calling `delete_workspace_project_task`"  # noqa: E501
            )
        # verify the required parameter "task_id" is set
        if self.api_client.client_side_validation and ("task_id" not in params or params["task_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `task_id` when calling `delete_workspace_project_task`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "project_id" in params:
            path_params["project_id"] = params["project_id"]  # noqa: E501
        if "task_id" in params:
            path_params["task_id"] = params["task_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_project_task(
        self, workspace_id: int, project_id: int, task_id: int, **kwargs
    ) -> ModelsTask:  # noqa: E501
        """WorkspaceProjectTask  # noqa: E501

        Get project task for given task id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_project_task(workspace_id, project_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :param int task_id: Numeric ID of the task (required)
        :return: ModelsTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_project_task_with_http_info(workspace_id, project_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_project_task_with_http_info(workspace_id, project_id, task_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_project_task_with_http_info(
        self, workspace_id: int, project_id: int, task_id: int, **kwargs
    ) -> ModelsTask:  # noqa: E501
        """WorkspaceProjectTask  # noqa: E501

        Get project task for given task id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_project_task_with_http_info(workspace_id, project_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :param int task_id: Numeric ID of the task (required)
        :return: ModelsTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_id", "task_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_project_task" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_project_task`"  # noqa: E501
            )
        # verify the required parameter "project_id" is set
        if self.api_client.client_side_validation and (
            "project_id" not in params or params["project_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `project_id` when calling `get_workspace_project_task`"  # noqa: E501
            )
        # verify the required parameter "task_id" is set
        if self.api_client.client_side_validation and ("task_id" not in params or params["task_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `task_id` when calling `get_workspace_project_task`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "project_id" in params:
            path_params["project_id"] = params["project_id"]  # noqa: E501
        if "task_id" in params:
            path_params["task_id"] = params["task_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsTask",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_project_tasks(self, workspace_id: int, project_id: int, **kwargs) -> ModelsTask:  # noqa: E501
        """WorkspaceProjectTasks  # noqa: E501

        Get project tasks for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_project_tasks(workspace_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :return: ModelsTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_project_tasks_with_http_info(workspace_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_project_tasks_with_http_info(workspace_id, project_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_project_tasks_with_http_info(
        self, workspace_id: int, project_id: int, **kwargs
    ) -> ModelsTask:  # noqa: E501
        """WorkspaceProjectTasks  # noqa: E501

        Get project tasks for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_project_tasks_with_http_info(workspace_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :return: ModelsTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_project_tasks" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_project_tasks`"  # noqa: E501
            )
        # verify the required parameter "project_id" is set
        if self.api_client.client_side_validation and (
            "project_id" not in params or params["project_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `project_id` when calling `get_workspace_project_tasks`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "project_id" in params:
            path_params["project_id"] = params["project_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/projects/{project_id}/tasks",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsTask",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_tasks(self, workspace_id: int, **kwargs) -> TaskResponse:  # noqa: E501
        """Tasks  # noqa: E501

        List Workspace tasks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_tasks(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int since: Retrieve tasks created/modified/deleted since this date using UNIX timestamp.
        :param int page: Page number, default 1
        :param int per_page: Number of items per page, default 50
        :param str sort_order: Sort order, default ASC
        :param str sort_field: Field used for sorting
        :param bool active: Filter by active state
        :param int pid: Filter by project id
        :param date start_date: Smallest boundary date in the format YYYY-MM-DD
        :param date end_date: Biggest boundary date in the format YYYY-MM-DD
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_tasks_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_tasks_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_tasks_with_http_info(self, workspace_id: int, **kwargs) -> TaskResponse:  # noqa: E501
        """Tasks  # noqa: E501

        List Workspace tasks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_tasks_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int since: Retrieve tasks created/modified/deleted since this date using UNIX timestamp.
        :param int page: Page number, default 1
        :param int per_page: Number of items per page, default 50
        :param str sort_order: Sort order, default ASC
        :param str sort_field: Field used for sorting
        :param bool active: Filter by active state
        :param int pid: Filter by project id
        :param date start_date: Smallest boundary date in the format YYYY-MM-DD
        :param date end_date: Biggest boundary date in the format YYYY-MM-DD
        :return: TaskResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "workspace_id",
            "since",
            "page",
            "per_page",
            "sort_order",
            "sort_field",
            "active",
            "pid",
            "start_date",
            "end_date",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_tasks" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_workspace_tasks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []
        if "since" in params:
            query_params.append(("since", params["since"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501
        if "sort_field" in params:
            query_params.append(("sort_field", params["sort_field"]))  # noqa: E501
        if "active" in params:
            query_params.append(("active", params["active"]))  # noqa: E501
        if "pid" in params:
            query_params.append(("pid", params["pid"]))  # noqa: E501
        if "start_date" in params:
            query_params.append(("start_date", params["start_date"]))  # noqa: E501
        if "end_date" in params:
            query_params.append(("end_date", params["end_date"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/tasks",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="TaskResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def patch_workspace_project_tasks(
        self, workspace_id: int, project_id: int, task_ids: str, patch_input: list[TaskPatchInput], **kwargs
    ) -> TaskPatchOutput:  # noqa: E501
        """WorkspaceProjectTasks  # noqa: E501

        Patch project tasks for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_workspace_project_tasks(workspace_id, project_id, task_ids, patch_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :param str task_ids: Numeric IDs of project tasks separated by comma (required)
        :param list[TaskPatchInput] patch_input: Patch operations (required)
        :return: TaskPatchOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.patch_workspace_project_tasks_with_http_info(
                workspace_id, project_id, task_ids, patch_input, **kwargs
            )  # noqa: E501
        else:
            (data) = self.patch_workspace_project_tasks_with_http_info(
                workspace_id, project_id, task_ids, patch_input, **kwargs
            )  # noqa: E501
            return data

    def patch_workspace_project_tasks_with_http_info(
        self, workspace_id: int, project_id: int, task_ids: str, patch_input: list[TaskPatchInput], **kwargs
    ) -> TaskPatchOutput:  # noqa: E501
        """WorkspaceProjectTasks  # noqa: E501

        Patch project tasks for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_workspace_project_tasks_with_http_info(workspace_id, project_id, task_ids, patch_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :param str task_ids: Numeric IDs of project tasks separated by comma (required)
        :param list[TaskPatchInput] patch_input: Patch operations (required)
        :return: TaskPatchOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_id", "task_ids", "patch_input"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method patch_workspace_project_tasks" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `patch_workspace_project_tasks`"  # noqa: E501
            )
        # verify the required parameter "project_id" is set
        if self.api_client.client_side_validation and (
            "project_id" not in params or params["project_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `project_id` when calling `patch_workspace_project_tasks`"  # noqa: E501
            )
        # verify the required parameter "task_ids" is set
        if self.api_client.client_side_validation and ("task_ids" not in params or params["task_ids"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `task_ids` when calling `patch_workspace_project_tasks`"  # noqa: E501
            )
        # verify the required parameter "patch_input" is set
        if self.api_client.client_side_validation and (
            "patch_input" not in params or params["patch_input"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `patch_input` when calling `patch_workspace_project_tasks`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "project_id" in params:
            path_params["project_id"] = params["project_id"]  # noqa: E501
        if "task_ids" in params:
            path_params["task_ids"] = params["task_ids"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "patch_input" in params:
            body_params = params["patch_input"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_ids}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="TaskPatchOutput",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_project_tasks(
        self, workspace_id: int, project_id: int, post_input: TaskPayload, **kwargs
    ) -> ModelsTask:  # noqa: E501
        """WorkspaceProjectTasks  # noqa: E501

        Post project tasks for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_project_tasks(workspace_id, project_id, post_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :param TaskPayload post_input: Post parameters (required)
        :return: ModelsTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_project_tasks_with_http_info(
                workspace_id, project_id, post_input, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_workspace_project_tasks_with_http_info(
                workspace_id, project_id, post_input, **kwargs
            )  # noqa: E501
            return data

    def post_workspace_project_tasks_with_http_info(
        self, workspace_id: int, project_id: int, post_input: TaskPayload, **kwargs
    ) -> ModelsTask:  # noqa: E501
        """WorkspaceProjectTasks  # noqa: E501

        Post project tasks for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_project_tasks_with_http_info(workspace_id, project_id, post_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :param TaskPayload post_input: Post parameters (required)
        :return: ModelsTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_id", "post_input"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_workspace_project_tasks" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_project_tasks`"  # noqa: E501
            )
        # verify the required parameter "project_id" is set
        if self.api_client.client_side_validation and (
            "project_id" not in params or params["project_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `project_id` when calling `post_workspace_project_tasks`"  # noqa: E501
            )
        # verify the required parameter "post_input" is set
        if self.api_client.client_side_validation and (
            "post_input" not in params or params["post_input"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `post_input` when calling `post_workspace_project_tasks`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "project_id" in params:
            path_params["project_id"] = params["project_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post_input" in params:
            body_params = params["post_input"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/projects/{project_id}/tasks",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsTask",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_workspace_project_task(
        self, workspace_id: int, project_id: int, task_id: str, patch_input: TaskPayload, **kwargs
    ) -> ModelsTask:  # noqa: E501
        """WorkspaceProjectTask  # noqa: E501

        Put project task for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_project_task(workspace_id, project_id, task_id, patch_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :param str task_id: Numeric ID of project task (required)
        :param TaskPayload patch_input: Put parameters (required)
        :return: ModelsTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_workspace_project_task_with_http_info(
                workspace_id, project_id, task_id, patch_input, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_workspace_project_task_with_http_info(
                workspace_id, project_id, task_id, patch_input, **kwargs
            )  # noqa: E501
            return data

    def put_workspace_project_task_with_http_info(
        self, workspace_id: int, project_id: int, task_id: str, patch_input: TaskPayload, **kwargs
    ) -> ModelsTask:  # noqa: E501
        """WorkspaceProjectTask  # noqa: E501

        Put project task for given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_project_task_with_http_info(workspace_id, project_id, task_id, patch_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int project_id: Numeric ID of the project (required)
        :param str task_id: Numeric ID of project task (required)
        :param TaskPayload patch_input: Put parameters (required)
        :return: ModelsTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_id", "task_id", "patch_input"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_workspace_project_task" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `put_workspace_project_task`"  # noqa: E501
            )
        # verify the required parameter "project_id" is set
        if self.api_client.client_side_validation and (
            "project_id" not in params or params["project_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `project_id` when calling `put_workspace_project_task`"  # noqa: E501
            )
        # verify the required parameter "task_id" is set
        if self.api_client.client_side_validation and ("task_id" not in params or params["task_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `task_id` when calling `put_workspace_project_task`"  # noqa: E501
            )
        # verify the required parameter "patch_input" is set
        if self.api_client.client_side_validation and (
            "patch_input" not in params or params["patch_input"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `patch_input` when calling `put_workspace_project_task`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "project_id" in params:
            path_params["project_id"] = params["project_id"]  # noqa: E501
        if "task_id" in params:
            path_params["task_id"] = params["task_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "patch_input" in params:
            body_params = params["patch_input"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/projects/{project_id}/tasks/{task_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsTask",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
