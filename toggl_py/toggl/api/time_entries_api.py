"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient
from toggl.models.models_time_entry import ModelsTimeEntry  # noqa: F401
from toggl.models.models_time_entry_notes import ModelsTimeEntryNotes  # noqa: F401
from toggl.models.timeentries_get_tim_entry_invitations_response import TimeentriesGetTimEntryInvitationsResponse  # noqa: F401
from toggl.models.timeentries_patch_post import TimeentriesPatchPost  # noqa: F401
from toggl.models.timeentry_patch_output import TimeentryPatchOutput  # noqa: F401
from toggl.models.timeentry_payload import TimeentryPayload  # noqa: F401


class TimeEntriesApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_workspace_time_entries(self, workspace_id: int, time_entry_id: int, **kwargs) -> str:  # noqa: E501
        """TimeEntries  # noqa: E501

        Deletes a workspace time entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_time_entries(workspace_id, time_entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int time_entry_id: TimeEntry ID. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_workspace_time_entries_with_http_info(workspace_id, time_entry_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_time_entries_with_http_info(workspace_id, time_entry_id, **kwargs)  # noqa: E501
            return data

    def delete_workspace_time_entries_with_http_info(
        self, workspace_id: int, time_entry_id: int, **kwargs
    ) -> str:  # noqa: E501
        """TimeEntries  # noqa: E501

        Deletes a workspace time entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_time_entries_with_http_info(workspace_id, time_entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int time_entry_id: TimeEntry ID. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "time_entry_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_workspace_time_entries" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `delete_workspace_time_entries`"  # noqa: E501
            )
        # verify the required parameter "time_entry_id" is set
        if self.api_client.client_side_validation and (
            "time_entry_id" not in params or params["time_entry_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `time_entry_id` when calling `delete_workspace_time_entries`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "time_entry_id" in params:
            path_params["time_entry_id"] = params["time_entry_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/time_entries/{time_entry_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_current_time_entry(self, **kwargs) -> ModelsTimeEntry:  # noqa: E501
        """Get current time entry  # noqa: E501

        Load running time entry for user ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_time_entry(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ModelsTimeEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_current_time_entry_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_current_time_entry_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_current_time_entry_with_http_info(self, **kwargs) -> ModelsTimeEntry:  # noqa: E501
        """Get current time entry  # noqa: E501

        Load running time entry for user ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_time_entry_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ModelsTimeEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_current_time_entry" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/time_entries/current",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsTimeEntry",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_time_entries(self, **kwargs) -> list[ModelsTimeEntry]:  # noqa: E501
        """TimeEntries  # noqa: E501

        Lists latest time entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_time_entries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int since: Get entries modified since this date using UNIX timestamp, including deleted ones.
        :param str before: Get entries with start time, before given date (YYYY-MM-DD) or with time in RFC3339 format.
        :param str start_date: Get entries with start time, from start_date YYYY-MM-DD or with time in RFC3339 format. To be used with end_date.
        :param str end_date: Get entries with start time, until end_date YYYY-MM-DD or with time in RFC3339 format. To be used with start_date.
        :param bool meta: Should the response contain data for meta entities
        :param bool include_sharing: Include sharing details in the response
        :return: list[ModelsTimeEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_time_entries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_time_entries_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_time_entries_with_http_info(self, **kwargs) -> list[ModelsTimeEntry]:  # noqa: E501
        """TimeEntries  # noqa: E501

        Lists latest time entries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_time_entries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int since: Get entries modified since this date using UNIX timestamp, including deleted ones.
        :param str before: Get entries with start time, before given date (YYYY-MM-DD) or with time in RFC3339 format.
        :param str start_date: Get entries with start time, from start_date YYYY-MM-DD or with time in RFC3339 format. To be used with end_date.
        :param str end_date: Get entries with start time, until end_date YYYY-MM-DD or with time in RFC3339 format. To be used with start_date.
        :param bool meta: Should the response contain data for meta entities
        :param bool include_sharing: Include sharing details in the response
        :return: list[ModelsTimeEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["since", "before", "start_date", "end_date", "meta", "include_sharing"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_time_entries" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "meta" in params:
            query_params.append(("meta", params["meta"]))  # noqa: E501
        if "include_sharing" in params:
            query_params.append(("include_sharing", params["include_sharing"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if "since" in params:
            form_params.append(("since", params["since"]))  # noqa: E501
        if "before" in params:
            form_params.append(("before", params["before"]))  # noqa: E501
        if "start_date" in params:
            form_params.append(("start_date", params["start_date"]))  # noqa: E501
        if "end_date" in params:
            form_params.append(("end_date", params["end_date"]))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/time_entries",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsTimeEntry]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_time_entry_by_id(self, time_entry_id: int, **kwargs) -> ModelsTimeEntry:  # noqa: E501
        """Get a time entry by ID.  # noqa: E501

        Load time entry by ID that is accessible by the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_time_entry_by_id(time_entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int time_entry_id: TimeEntry ID. (required)
        :param bool meta: Should the response contain data for meta entities
        :param bool include_sharing: Include sharing details in the response
        :return: ModelsTimeEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_time_entry_by_id_with_http_info(time_entry_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_time_entry_by_id_with_http_info(time_entry_id, **kwargs)  # noqa: E501
            return data

    def get_time_entry_by_id_with_http_info(self, time_entry_id: int, **kwargs) -> ModelsTimeEntry:  # noqa: E501
        """Get a time entry by ID.  # noqa: E501

        Load time entry by ID that is accessible by the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_time_entry_by_id_with_http_info(time_entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int time_entry_id: TimeEntry ID. (required)
        :param bool meta: Should the response contain data for meta entities
        :param bool include_sharing: Include sharing details in the response
        :return: ModelsTimeEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["time_entry_id", "meta", "include_sharing"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_time_entry_by_id" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "time_entry_id" is set
        if self.api_client.client_side_validation and (
            "time_entry_id" not in params or params["time_entry_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `time_entry_id` when calling `get_time_entry_by_id`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "time_entry_id" in params:
            path_params["time_entry_id"] = params["time_entry_id"]  # noqa: E501

        query_params = []
        if "meta" in params:
            query_params.append(("meta", params["meta"]))  # noqa: E501
        if "include_sharing" in params:
            query_params.append(("include_sharing", params["include_sharing"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/time_entries/{time_entry_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsTimeEntry",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_time_notes_entry_notes_by_id(self, time_entry_id: int, **kwargs) -> ModelsTimeEntryNotes:  # noqa: E501
        """Get a time entries' notes by ID.  # noqa: E501

        Load time entry by ID that is accessible by the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_time_notes_entry_notes_by_id(time_entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int time_entry_id: TimeEntry ID. (required)
        :return: ModelsTimeEntryNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_time_notes_entry_notes_by_id_with_http_info(time_entry_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_time_notes_entry_notes_by_id_with_http_info(time_entry_id, **kwargs)  # noqa: E501
            return data

    def get_time_notes_entry_notes_by_id_with_http_info(
        self, time_entry_id: int, **kwargs
    ) -> ModelsTimeEntryNotes:  # noqa: E501
        """Get a time entries' notes by ID.  # noqa: E501

        Load time entry by ID that is accessible by the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_time_notes_entry_notes_by_id_with_http_info(time_entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int time_entry_id: TimeEntry ID. (required)
        :return: ModelsTimeEntryNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["time_entry_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_time_notes_entry_notes_by_id" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "time_entry_id" is set
        if self.api_client.client_side_validation and (
            "time_entry_id" not in params or params["time_entry_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `time_entry_id` when calling `get_time_notes_entry_notes_by_id`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "time_entry_id" in params:
            path_params["time_entry_id"] = params["time_entry_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/time_entries/{time_entry_id}/notes",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsTimeEntryNotes",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_time_entry_invitations(
        self, workspace_id: int, **kwargs
    ) -> list[TimeentriesGetTimEntryInvitationsResponse]:  # noqa: E501
        """TimeEntries  # noqa: E501

        Get invitations for time entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_time_entry_invitations(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: list[TimeentriesGetTimEntryInvitationsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_time_entry_invitations_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_time_entry_invitations_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_time_entry_invitations_with_http_info(
        self, workspace_id: int, **kwargs
    ) -> list[TimeentriesGetTimEntryInvitationsResponse]:  # noqa: E501
        """TimeEntries  # noqa: E501

        Get invitations for time entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_time_entry_invitations_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: list[TimeentriesGetTimEntryInvitationsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_workspace_time_entry_invitations" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_time_entry_invitations`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/time_entry_invitations",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[TimeentriesGetTimEntryInvitationsResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def patch_time_entries(
        self, workspace_id: int, time_entry_ids: str, patch_input: TimeentriesPatchPost, **kwargs
    ) -> TimeentryPatchOutput:  # noqa: E501
        """Bulk editing time entries  # noqa: E501

        In short: http://tools.ietf.org/html/rfc6902 and http://tools.ietf.org/html/rfc6901 with some additions. Patch will be executed partially when there are errors with some records. No transaction, no rollback.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_time_entries(workspace_id, time_entry_ids, patch_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str time_entry_ids: Numeric IDs of time_entries, separated by comma. E.g.: `204301830,202700150,202687559`. The limit is 100 IDs per request. (required)
        :param TimeentriesPatchPost patch_input: Array of batch operations (required)
        :param bool meta: Should the response contain data for meta entities
        :return: TimeentryPatchOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.patch_time_entries_with_http_info(workspace_id, time_entry_ids, patch_input, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_time_entries_with_http_info(workspace_id, time_entry_ids, patch_input, **kwargs)  # noqa: E501
            return data

    def patch_time_entries_with_http_info(
        self, workspace_id: int, time_entry_ids: str, patch_input: TimeentriesPatchPost, **kwargs
    ) -> TimeentryPatchOutput:  # noqa: E501
        """Bulk editing time entries  # noqa: E501

        In short: http://tools.ietf.org/html/rfc6902 and http://tools.ietf.org/html/rfc6901 with some additions. Patch will be executed partially when there are errors with some records. No transaction, no rollback.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_time_entries_with_http_info(workspace_id, time_entry_ids, patch_input, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str time_entry_ids: Numeric IDs of time_entries, separated by comma. E.g.: `204301830,202700150,202687559`. The limit is 100 IDs per request. (required)
        :param TimeentriesPatchPost patch_input: Array of batch operations (required)
        :param bool meta: Should the response contain data for meta entities
        :return: TimeentryPatchOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "time_entry_ids", "patch_input", "meta"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method patch_time_entries" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `workspace_id` when calling `patch_time_entries`")  # noqa: E501
        # verify the required parameter "time_entry_ids" is set
        if self.api_client.client_side_validation and (
            "time_entry_ids" not in params or params["time_entry_ids"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `time_entry_ids` when calling `patch_time_entries`")  # noqa: E501
        # verify the required parameter "patch_input" is set
        if self.api_client.client_side_validation and (
            "patch_input" not in params or params["patch_input"] is None  # noqa: E501
        ):
            raise ValueError("Missing the required parameter `patch_input` when calling `patch_time_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "time_entry_ids" in params:
            path_params["time_entry_ids"] = params["time_entry_ids"]  # noqa: E501

        query_params = []
        if "meta" in params:
            query_params.append(("meta", params["meta"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "patch_input" in params:
            body_params = params["patch_input"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/time_entries/{time_entry_ids}",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="TimeentryPatchOutput",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def patch_workspace_stop_time_entry_handler(
        self, workspace_id: int, time_entry_id: int, **kwargs
    ) -> ModelsTimeEntry:  # noqa: E501
        """Stop TimeEntry  # noqa: E501

        Stops a workspace time entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_workspace_stop_time_entry_handler(workspace_id, time_entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int time_entry_id: TimeEntry ID. (required)
        :return: ModelsTimeEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.patch_workspace_stop_time_entry_handler_with_http_info(
                workspace_id, time_entry_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.patch_workspace_stop_time_entry_handler_with_http_info(
                workspace_id, time_entry_id, **kwargs
            )  # noqa: E501
            return data

    def patch_workspace_stop_time_entry_handler_with_http_info(
        self, workspace_id: int, time_entry_id: int, **kwargs
    ) -> ModelsTimeEntry:  # noqa: E501
        """Stop TimeEntry  # noqa: E501

        Stops a workspace time entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_workspace_stop_time_entry_handler_with_http_info(workspace_id, time_entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int time_entry_id: TimeEntry ID. (required)
        :return: ModelsTimeEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "time_entry_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method patch_workspace_stop_time_entry_handler" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `patch_workspace_stop_time_entry_handler`"  # noqa: E501
            )
        # verify the required parameter "time_entry_id" is set
        if self.api_client.client_side_validation and (
            "time_entry_id" not in params or params["time_entry_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `time_entry_id` when calling `patch_workspace_stop_time_entry_handler`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "time_entry_id" in params:
            path_params["time_entry_id"] = params["time_entry_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/time_entries/{time_entry_id}/stop",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsTimeEntry",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_time_entries(
        self, workspace_id: int, workspace_time_entry_post: TimeentryPayload, **kwargs
    ) -> ModelsTimeEntry:  # noqa: E501
        """TimeEntries  # noqa: E501

        Creates a new workspace TimeEntry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_time_entries(workspace_id, workspace_time_entry_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param TimeentryPayload workspace_time_entry_post: TimeEntry parameters. (required)
        :param bool meta: Should the response contain data for meta entities
        :return: ModelsTimeEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_time_entries_with_http_info(
                workspace_id, workspace_time_entry_post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_workspace_time_entries_with_http_info(
                workspace_id, workspace_time_entry_post, **kwargs
            )  # noqa: E501
            return data

    def post_workspace_time_entries_with_http_info(
        self, workspace_id: int, workspace_time_entry_post: TimeentryPayload, **kwargs
    ) -> ModelsTimeEntry:  # noqa: E501
        """TimeEntries  # noqa: E501

        Creates a new workspace TimeEntry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_time_entries_with_http_info(workspace_id, workspace_time_entry_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param TimeentryPayload workspace_time_entry_post: TimeEntry parameters. (required)
        :param bool meta: Should the response contain data for meta entities
        :return: ModelsTimeEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "workspace_time_entry_post", "meta"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_workspace_time_entries" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_time_entries`"  # noqa: E501
            )
        # verify the required parameter "workspace_time_entry_post" is set
        if self.api_client.client_side_validation and (
            "workspace_time_entry_post" not in params or params["workspace_time_entry_post"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_time_entry_post` when calling `post_workspace_time_entries`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []
        if "meta" in params:
            query_params.append(("meta", params["meta"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "workspace_time_entry_post" in params:
            body_params = params["workspace_time_entry_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/time_entries",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsTimeEntry",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_time_entry_invitation_action(
        self, workspace_id: int, time_entry_invitation_id: int, **kwargs
    ) -> str:  # noqa: E501
        """TimeEntries  # noqa: E501

        Accept or reject an invitation for a time entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_time_entry_invitation_action(workspace_id, time_entry_invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int time_entry_invitation_id: Numeric ID of the time entry invitation (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_time_entry_invitation_action_with_http_info(
                workspace_id, time_entry_invitation_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_workspace_time_entry_invitation_action_with_http_info(
                workspace_id, time_entry_invitation_id, **kwargs
            )  # noqa: E501
            return data

    def post_workspace_time_entry_invitation_action_with_http_info(
        self, workspace_id: int, time_entry_invitation_id: int, **kwargs
    ) -> str:  # noqa: E501
        """TimeEntries  # noqa: E501

        Accept or reject an invitation for a time entry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_time_entry_invitation_action_with_http_info(workspace_id, time_entry_invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int time_entry_invitation_id: Numeric ID of the time entry invitation (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "time_entry_invitation_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method post_workspace_time_entry_invitation_action" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_time_entry_invitation_action`"  # noqa: E501
            )
        # verify the required parameter "time_entry_invitation_id" is set
        if self.api_client.client_side_validation and (
            "time_entry_invitation_id" not in params or params["time_entry_invitation_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `time_entry_invitation_id` when calling `post_workspace_time_entry_invitation_action`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "time_entry_invitation_id" in params:
            path_params["time_entry_invitation_id"] = params["time_entry_invitation_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/time_entry_invitations/{time_entry_invitation_id}/{action}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_time_entry_notes_by_id(self, time_entry_id: int, **kwargs) -> ModelsTimeEntryNotes:  # noqa: E501
        """Put a time entry notes by ID.  # noqa: E501

        Load time entry notes by ID that is accessible by the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_time_entry_notes_by_id(time_entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int time_entry_id: TimeEntry ID. (required)
        :return: ModelsTimeEntryNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_time_entry_notes_by_id_with_http_info(time_entry_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_time_entry_notes_by_id_with_http_info(time_entry_id, **kwargs)  # noqa: E501
            return data

    def put_time_entry_notes_by_id_with_http_info(self, time_entry_id: int, **kwargs) -> ModelsTimeEntryNotes:  # noqa: E501
        """Put a time entry notes by ID.  # noqa: E501

        Load time entry notes by ID that is accessible by the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_time_entry_notes_by_id_with_http_info(time_entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int time_entry_id: TimeEntry ID. (required)
        :return: ModelsTimeEntryNotes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["time_entry_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_time_entry_notes_by_id" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "time_entry_id" is set
        if self.api_client.client_side_validation and (
            "time_entry_id" not in params or params["time_entry_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `time_entry_id` when calling `put_time_entry_notes_by_id`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "time_entry_id" in params:
            path_params["time_entry_id"] = params["time_entry_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/time_entries/{time_entry_id}/notes",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsTimeEntryNotes",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_workspace_time_entry_handler(
        self, workspace_id: int, time_entry_id: int, workspace_time_entry_post: TimeentryPayload, **kwargs
    ) -> ModelsTimeEntry:  # noqa: E501
        """TimeEntries  # noqa: E501

        Updates a workspace time entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_time_entry_handler(workspace_id, time_entry_id, workspace_time_entry_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int time_entry_id: TimeEntry ID. (required)
        :param TimeentryPayload workspace_time_entry_post: TimeEntry parameters. (required)
        :param bool meta: Should the response contain data for meta entities
        :param bool include_sharing: Should the response contain time entry sharing details
        :return: ModelsTimeEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_workspace_time_entry_handler_with_http_info(
                workspace_id, time_entry_id, workspace_time_entry_post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_workspace_time_entry_handler_with_http_info(
                workspace_id, time_entry_id, workspace_time_entry_post, **kwargs
            )  # noqa: E501
            return data

    def put_workspace_time_entry_handler_with_http_info(
        self, workspace_id: int, time_entry_id: int, workspace_time_entry_post: TimeentryPayload, **kwargs
    ) -> ModelsTimeEntry:  # noqa: E501
        """TimeEntries  # noqa: E501

        Updates a workspace time entry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_time_entry_handler_with_http_info(workspace_id, time_entry_id, workspace_time_entry_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int time_entry_id: TimeEntry ID. (required)
        :param TimeentryPayload workspace_time_entry_post: TimeEntry parameters. (required)
        :param bool meta: Should the response contain data for meta entities
        :param bool include_sharing: Should the response contain time entry sharing details
        :return: ModelsTimeEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "time_entry_id", "workspace_time_entry_post", "meta", "include_sharing"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_workspace_time_entry_handler" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `put_workspace_time_entry_handler`"  # noqa: E501
            )
        # verify the required parameter "time_entry_id" is set
        if self.api_client.client_side_validation and (
            "time_entry_id" not in params or params["time_entry_id"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `time_entry_id` when calling `put_workspace_time_entry_handler`"  # noqa: E501
            )
        # verify the required parameter "workspace_time_entry_post" is set
        if self.api_client.client_side_validation and (
            "workspace_time_entry_post" not in params or params["workspace_time_entry_post"] is None  # noqa: E501
        ):
            raise ValueError(
                "Missing the required parameter `workspace_time_entry_post` when calling `put_workspace_time_entry_handler`"  # noqa: E501
            )

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "time_entry_id" in params:
            path_params["time_entry_id"] = params["time_entry_id"]  # noqa: E501

        query_params = []
        if "meta" in params:
            query_params.append(("meta", params["meta"]))  # noqa: E501
        if "include_sharing" in params:
            query_params.append(("include_sharing", params["include_sharing"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "workspace_time_entry_post" in params:
            body_params = params["workspace_time_entry_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/time_entries/{time_entry_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsTimeEntry",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
