"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient


class UsersApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_organization_users_leave(self, organization_id, **kwargs):  # noqa: E501
        """Leaves organization  # noqa: E501

        Leaves organization, effectively delete user account in org and delete organization if it is last user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_users_leave(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_organization_users_leave_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_organization_users_leave_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def delete_organization_users_leave_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """Leaves organization  # noqa: E501

        Leaves organization, effectively delete user account in org and delete organization if it is last user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_users_leave_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_organization_users_leave" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `delete_organization_users_leave`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/users/leave",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_workspace_user(self, workspace_id, workspace_user_id, **kwargs):  # noqa: E501
        """Delete workspace user  # noqa: E501

        Removes user from workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_user(workspace_id, workspace_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int workspace_user_id: Numeric ID of the workspace user. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_workspace_user_with_http_info(workspace_id, workspace_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_user_with_http_info(workspace_id, workspace_user_id, **kwargs)  # noqa: E501
            return data

    def delete_workspace_user_with_http_info(self, workspace_id, workspace_user_id, **kwargs):  # noqa: E501
        """Delete workspace user  # noqa: E501

        Removes user from workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_user_with_http_info(workspace_id, workspace_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int workspace_user_id: Numeric ID of the workspace user. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "workspace_user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_workspace_user" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `delete_workspace_user`"
            )  # noqa: E501
        # verify the required parameter "workspace_user_id" is set
        if self.api_client.client_side_validation and (
            "workspace_user_id" not in params or params["workspace_user_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_user_id` when calling `delete_workspace_user`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "workspace_user_id" in params:
            path_params["workspace_user_id"] = params["workspace_user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/workspace_users/{workspace_user_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_users(self, organization_id, **kwargs):  # noqa: E501
        """List of users in organization  # noqa: E501

        Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_users(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param str filter: Returns records where name or email contains this string
        :param str active_status: List of `active` `inactive` `invited` comma separated(if not present, all statuses)
        :param str only_admins: If true returns admins only
        :param str groups: Comma-separated list of groups ids, returns users belonging to these groups only
        :param str workspaces: Comma-separated list of workspaces ids, returns users belonging to this workspaces only
        :param int page: Page number, default 1
        :param int per_page: Number of items per page, default 50
        :param str sort_dir: Values 'asc' or 'desc', result is sorted on 'names' column, default 'asc'
        :return: list[ModelsOrgUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_users_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_users_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def get_organization_users_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """List of users in organization  # noqa: E501

        Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_users_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param str filter: Returns records where name or email contains this string
        :param str active_status: List of `active` `inactive` `invited` comma separated(if not present, all statuses)
        :param str only_admins: If true returns admins only
        :param str groups: Comma-separated list of groups ids, returns users belonging to these groups only
        :param str workspaces: Comma-separated list of workspaces ids, returns users belonging to this workspaces only
        :param int page: Page number, default 1
        :param int per_page: Number of items per page, default 50
        :param str sort_dir: Values 'asc' or 'desc', result is sorted on 'names' column, default 'asc'
        :return: list[ModelsOrgUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "filter",
            "active_status",
            "only_admins",
            "groups",
            "workspaces",
            "page",
            "per_page",
            "sort_dir",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_organization_users" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organization_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "filter" in params:
            query_params.append(("filter", params["filter"]))  # noqa: E501
        if "active_status" in params:
            query_params.append(("active_status", params["active_status"]))  # noqa: E501
        if "only_admins" in params:
            query_params.append(("only_admins", params["only_admins"]))  # noqa: E501
        if "groups" in params:
            query_params.append(("groups", params["groups"]))  # noqa: E501
        if "workspaces" in params:
            query_params.append(("workspaces", params["workspaces"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "sort_dir" in params:
            query_params.append(("sort_dir", params["sort_dir"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsOrgUser]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_users_detailed(self, organization_id, **kwargs):  # noqa: E501
        """List of users in organization with details  # noqa: E501

        Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_users_detailed(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param str filter: Returns records where name or email contains this string
        :param str active_status: List of `active` `inactive` `invited` comma separated(if not present, all statuses)
        :param str only_admins: If true returns admins only
        :param str groups: Comma-separated list of groups ids, returns users belonging to these groups only
        :param str workspaces: Comma-separated list of workspaces ids, returns users belonging to this workspaces only
        :param int page: Page number, default 1
        :param int per_page: Number of items per page, default 50
        :param str sort_dir: Values 'asc' or 'desc', result is sorted on 'names' column, default 'asc'
        :return: list[ModelsOrgUserDetailed]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_users_detailed_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_users_detailed_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def get_organization_users_detailed_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """List of users in organization with details  # noqa: E501

        Returns list of users in organization based on set of url parameters: Result is paginated. Pagination params are returned in headers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_users_detailed_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param str filter: Returns records where name or email contains this string
        :param str active_status: List of `active` `inactive` `invited` comma separated(if not present, all statuses)
        :param str only_admins: If true returns admins only
        :param str groups: Comma-separated list of groups ids, returns users belonging to these groups only
        :param str workspaces: Comma-separated list of workspaces ids, returns users belonging to this workspaces only
        :param int page: Page number, default 1
        :param int per_page: Number of items per page, default 50
        :param str sort_dir: Values 'asc' or 'desc', result is sorted on 'names' column, default 'asc'
        :return: list[ModelsOrgUserDetailed]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "organization_id",
            "filter",
            "active_status",
            "only_admins",
            "groups",
            "workspaces",
            "page",
            "per_page",
            "sort_dir",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_organization_users_detailed" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organization_users_detailed`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []
        if "filter" in params:
            query_params.append(("filter", params["filter"]))  # noqa: E501
        if "active_status" in params:
            query_params.append(("active_status", params["active_status"]))  # noqa: E501
        if "only_admins" in params:
            query_params.append(("only_admins", params["only_admins"]))  # noqa: E501
        if "groups" in params:
            query_params.append(("groups", params["groups"]))  # noqa: E501
        if "workspaces" in params:
            query_params.append(("workspaces", params["workspaces"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "sort_dir" in params:
            query_params.append(("sort_dir", params["sort_dir"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/users/detailed",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsOrgUserDetailed]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_workspaces_workspaceusers(self, organization_id, workspace_id, name, **kwargs):  # noqa: E501
        """List of users who belong to the given workspace.  # noqa: E501

        Returns any users who belong to the workspace directly or through at least one group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_workspaces_workspaceusers(organization_id, workspace_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :param str name: Workspace user name to filter by (required)
        :return: list[ModelsOrganizationWorkspaceUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_workspaces_workspaceusers_with_http_info(
                organization_id, workspace_id, name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_organization_workspaces_workspaceusers_with_http_info(
                organization_id, workspace_id, name, **kwargs
            )  # noqa: E501
            return data

    def get_organization_workspaces_workspaceusers_with_http_info(
        self, organization_id, workspace_id, name, **kwargs
    ):  # noqa: E501
        """List of users who belong to the given workspace.  # noqa: E501

        Returns any users who belong to the workspace directly or through at least one group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_workspaces_workspaceusers_with_http_info(organization_id, workspace_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :param str name: Workspace user name to filter by (required)
        :return: list[ModelsOrganizationWorkspaceUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "workspace_id", "name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_organization_workspaces_workspaceusers" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organization_workspaces_workspaceusers`"
            )  # noqa: E501
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_organization_workspaces_workspaceusers`"
            )  # noqa: E501
        # verify the required parameter "name" is set
        if self.api_client.client_side_validation and ("name" not in params or params["name"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `get_organization_workspaces_workspaceusers`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/workspaces/{workspace_id}/workspace_users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsOrganizationWorkspaceUser]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_users(self, workspace_id, **kwargs):  # noqa: E501
        """Get workspace users  # noqa: E501

        List all users for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_users(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: list[ModelsSimpleWorkspaceUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_users_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_users_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_users_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Get workspace users  # noqa: E501

        List all users for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_users_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: list[ModelsSimpleWorkspaceUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_users" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_workspace_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsSimpleWorkspaceUser]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_workspace_users(self, workspace_id, include_indirect, **kwargs):  # noqa: E501
        """Get workspace workspace-users  # noqa: E501

        List all workspace_users for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_workspace_users(workspace_id, include_indirect, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str include_indirect: If true, includes indirect users (i.e. users assigned via group) to workspace user list (required)
        :return: list[ModelsWorkspaceUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_workspace_users_with_http_info(workspace_id, include_indirect, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_workspace_users_with_http_info(workspace_id, include_indirect, **kwargs)  # noqa: E501
            return data

    def get_workspace_workspace_users_with_http_info(self, workspace_id, include_indirect, **kwargs):  # noqa: E501
        """Get workspace workspace-users  # noqa: E501

        List all workspace_users for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_workspace_users_with_http_info(workspace_id, include_indirect, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param str include_indirect: If true, includes indirect users (i.e. users assigned via group) to workspace user list (required)
        :return: list[ModelsWorkspaceUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "include_indirect"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_workspace_users" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_workspace_users`"
            )  # noqa: E501
        # verify the required parameter "include_indirect" is set
        if self.api_client.client_side_validation and (
            "include_indirect" not in params or params["include_indirect"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `include_indirect` when calling `get_workspace_workspace_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []
        if "include_indirect" in params:
            query_params.append(("includeIndirect", params["include_indirect"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/workspace_users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsWorkspaceUser]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def patch_organization_users(self, organization_id, params, **kwargs):  # noqa: E501
        """Apply changes in bulk to users in an organization  # noqa: E501

        Apply changes in bulk to users in an organization (currently deletion only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_organization_users(organization_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param UserPatchParams params: Input data of the users to be patched. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.patch_organization_users_with_http_info(organization_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_organization_users_with_http_info(organization_id, params, **kwargs)  # noqa: E501
            return data

    def patch_organization_users_with_http_info(self, organization_id, params, **kwargs):  # noqa: E501
        """Apply changes in bulk to users in an organization  # noqa: E501

        Apply changes in bulk to users in an organization (currently deletion only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_organization_users_with_http_info(organization_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param UserPatchParams params: Input data of the users to be patched. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "params"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method patch_organization_users" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `patch_organization_users`"
            )  # noqa: E501
        # verify the required parameter "params" is set
        if self.api_client.client_side_validation and ("params" not in params or params["params"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `params` when calling `patch_organization_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "params" in params:
            body_params = params["params"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/users",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def patch_organization_workspace_users(self, organization_id, workspace_id, params, **kwargs):  # noqa: E501
        """Changes the users in a workspace.  # noqa: E501

        Changes the users in a workspace (currently deletion only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_organization_workspace_users(organization_id, workspace_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace (required)
        :param WorkspaceUsersPatchParams params: Input data of the users to be patched. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.patch_organization_workspace_users_with_http_info(
                organization_id, workspace_id, params, **kwargs
            )  # noqa: E501
        else:
            (data) = self.patch_organization_workspace_users_with_http_info(
                organization_id, workspace_id, params, **kwargs
            )  # noqa: E501
            return data

    def patch_organization_workspace_users_with_http_info(self, organization_id, workspace_id, params, **kwargs):  # noqa: E501
        """Changes the users in a workspace.  # noqa: E501

        Changes the users in a workspace (currently deletion only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_organization_workspace_users_with_http_info(organization_id, workspace_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace (required)
        :param WorkspaceUsersPatchParams params: Input data of the users to be patched. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "workspace_id", "params"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method patch_organization_workspace_users" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `patch_organization_workspace_users`"
            )  # noqa: E501
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `patch_organization_workspace_users`"
            )  # noqa: E501
        # verify the required parameter "params" is set
        if self.api_client.client_side_validation and ("params" not in params or params["params"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `params` when calling `patch_organization_workspace_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "params" in params:
            body_params = params["params"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/workspaces/{workspace_id}/workspace_users",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_users_lost_password(self, workspace_id, user_id, **kwargs):  # noqa: E501
        """Change a lost password  # noqa: E501

        Request a change password action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_users_lost_password(workspace_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int user_id: Numeric ID of the user (required)
        :return: UsersLostPasswordURL
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_users_lost_password_with_http_info(workspace_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_users_lost_password_with_http_info(workspace_id, user_id, **kwargs)  # noqa: E501
            return data

    def post_workspace_users_lost_password_with_http_info(self, workspace_id, user_id, **kwargs):  # noqa: E501
        """Change a lost password  # noqa: E501

        Request a change password action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_users_lost_password_with_http_info(workspace_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int user_id: Numeric ID of the user (required)
        :return: UsersLostPasswordURL
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method post_workspace_users_lost_password" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_users_lost_password`"
            )  # noqa: E501
        # verify the required parameter "user_id" is set
        if self.api_client.client_side_validation and ("user_id" not in params or params["user_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `user_id` when calling `post_workspace_users_lost_password`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "user_id" in params:
            path_params["user_id"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/users/{user_id}/lost_password",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UsersLostPasswordURL",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organization_users(self, organization_id, params, **kwargs):  # noqa: E501
        """Changes a single organization-user  # noqa: E501

        Changes a single organization-user. Can affect the following values:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_users(organization_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param UserPayload params: Input data of the organization user to be changed. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organization_users_with_http_info(organization_id, params, **kwargs)  # noqa: E501
        else:
            (data) = self.put_organization_users_with_http_info(organization_id, params, **kwargs)  # noqa: E501
            return data

    def put_organization_users_with_http_info(self, organization_id, params, **kwargs):  # noqa: E501
        """Changes a single organization-user  # noqa: E501

        Changes a single organization-user. Can affect the following values:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_users_with_http_info(organization_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param UserPayload params: Input data of the organization user to be changed. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "params"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_organization_users" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organization_users`"
            )  # noqa: E501
        # verify the required parameter "params" is set
        if self.api_client.client_side_validation and ("params" not in params or params["params"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `params` when calling `put_organization_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "params" in params:
            body_params = params["params"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/users/{organization_user_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organization_workspaces_assignments(self, organization_id, workspace_id, post, **kwargs):  # noqa: E501
        """Change assignments of users within a workspace.  # noqa: E501

        Assign or remove users to/from a workspace or to/from groups belonging to said workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_workspaces_assignments(organization_id, workspace_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :param UserAssignmentsPayload post: Describes the change in assignment (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organization_workspaces_assignments_with_http_info(
                organization_id, workspace_id, post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_organization_workspaces_assignments_with_http_info(
                organization_id, workspace_id, post, **kwargs
            )  # noqa: E501
            return data

    def put_organization_workspaces_assignments_with_http_info(
        self, organization_id, workspace_id, post, **kwargs
    ):  # noqa: E501
        """Change assignments of users within a workspace.  # noqa: E501

        Assign or remove users to/from a workspace or to/from groups belonging to said workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_workspaces_assignments_with_http_info(organization_id, workspace_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :param UserAssignmentsPayload post: Describes the change in assignment (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "workspace_id", "post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method put_organization_workspaces_assignments" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organization_workspaces_assignments`"
            )  # noqa: E501
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `put_organization_workspaces_assignments`"
            )  # noqa: E501
        # verify the required parameter "post" is set
        if self.api_client.client_side_validation and ("post" not in params or params["post"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `post` when calling `put_organization_workspaces_assignments`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post" in params:
            body_params = params["post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/workspaces/{workspace_id}/assignments",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_workspace_users(self, workspace_id, user_id, **kwargs):  # noqa: E501
        """Update workspace user  # noqa: E501

        Update the data for a user in a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_users(workspace_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int user_id: Numeric ID of the user (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_workspace_users_with_http_info(workspace_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workspace_users_with_http_info(workspace_id, user_id, **kwargs)  # noqa: E501
            return data

    def put_workspace_users_with_http_info(self, workspace_id, user_id, **kwargs):  # noqa: E501
        """Update workspace user  # noqa: E501

        Update the data for a user in a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_users_with_http_info(workspace_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int user_id: Numeric ID of the user (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_workspace_users" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_id` when calling `put_workspace_users`")  # noqa: E501
        # verify the required parameter "user_id" is set
        if self.api_client.client_side_validation and ("user_id" not in params or params["user_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `put_workspace_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "user_id" in params:
            path_params["user_id"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/users/{user_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_workspace_workspace_users(self, workspace_id, workspace_user_id, post, **kwargs):  # noqa: E501
        """Update workspace-user  # noqa: E501

        Update the data for a workspace_user in a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_workspace_users(workspace_id, workspace_user_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int workspace_user_id: Numeric ID of the workspace user (required)
        :param UserPayload post: Changes that need to be applied to the user data. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_workspace_workspace_users_with_http_info(
                workspace_id, workspace_user_id, post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_workspace_workspace_users_with_http_info(
                workspace_id, workspace_user_id, post, **kwargs
            )  # noqa: E501
            return data

    def put_workspace_workspace_users_with_http_info(self, workspace_id, workspace_user_id, post, **kwargs):  # noqa: E501
        """Update workspace-user  # noqa: E501

        Update the data for a workspace_user in a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_workspace_users_with_http_info(workspace_id, workspace_user_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int workspace_user_id: Numeric ID of the workspace user (required)
        :param UserPayload post: Changes that need to be applied to the user data. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "workspace_user_id", "post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_workspace_workspace_users" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `put_workspace_workspace_users`"
            )  # noqa: E501
        # verify the required parameter "workspace_user_id" is set
        if self.api_client.client_side_validation and (
            "workspace_user_id" not in params or params["workspace_user_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_user_id` when calling `put_workspace_workspace_users`"
            )  # noqa: E501
        # verify the required parameter "post" is set
        if self.api_client.client_side_validation and ("post" not in params or params["post"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `post` when calling `put_workspace_workspace_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "workspace_user_id" in params:
            path_params["workspace_user_id"] = params["workspace_user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post" in params:
            body_params = params["post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/workspace_users/{workspace_user_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
