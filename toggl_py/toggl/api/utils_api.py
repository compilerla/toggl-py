"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient


class UtilsApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def reports_api_v3_workspace_workspace_id_action_tasks_auth_post(self, workspace_id, action, **kwargs):  # noqa: E501
        """List tasks  # noqa: E501

        Returns filtered tasks from workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_action_tasks_auth_post(workspace_id, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param str action: search,filters (required)
        :param TasksTasksPost tasks_post: Task search conditions
        :return: list[ModelsTask]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_action_tasks_auth_post_with_http_info(
                workspace_id, action, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_action_tasks_auth_post_with_http_info(
                workspace_id, action, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_action_tasks_auth_post_with_http_info(
        self, workspace_id, action, **kwargs
    ):  # noqa: E501
        """List tasks  # noqa: E501

        Returns filtered tasks from workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_action_tasks_auth_post_with_http_info(workspace_id, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param str action: search,filters (required)
        :param TasksTasksPost tasks_post: Task search conditions
        :return: list[ModelsTask]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "action", "tasks_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_action_tasks_auth_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_action_tasks_auth_post`"
            )  # noqa: E501
        # verify the required parameter "action" is set
        if self.api_client.client_side_validation and ("action" not in params or params["action"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `action` when calling `reports_api_v3_workspace_workspace_id_action_tasks_auth_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "action" in params:
            path_params["action"] = params["action"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "tasks_post" in params:
            body_params = params["tasks_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/{action}/tasks_auth",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsTask]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_action_tasks_post(self, workspace_id, action, **kwargs):  # noqa: E501
        """List tasks  # noqa: E501

        Returns filtered tasks from workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_action_tasks_post(workspace_id, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param str action: search,filters (required)
        :param TasksTasksPost tasks_post: Task search conditions
        :return: list[ModelsTask]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_action_tasks_post_with_http_info(
                workspace_id, action, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_action_tasks_post_with_http_info(
                workspace_id, action, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_action_tasks_post_with_http_info(
        self, workspace_id, action, **kwargs
    ):  # noqa: E501
        """List tasks  # noqa: E501

        Returns filtered tasks from workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_action_tasks_post_with_http_info(workspace_id, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param str action: search,filters (required)
        :param TasksTasksPost tasks_post: Task search conditions
        :return: list[ModelsTask]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "action", "tasks_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_action_tasks_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_action_tasks_post`"
            )  # noqa: E501
        # verify the required parameter "action" is set
        if self.api_client.client_side_validation and ("action" not in params or params["action"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `action` when calling `reports_api_v3_workspace_workspace_id_action_tasks_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "action" in params:
            path_params["action"] = params["action"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "tasks_post" in params:
            body_params = params["tasks_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/{action}/tasks",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsTask]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_filters_clients_post(self, workspace_id, **kwargs):  # noqa: E501
        """List clients  # noqa: E501

        Returns filtered clients from a workspace (only ID and name).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_filters_clients_post(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param ClientsClientsPost clients_post: Clients filter conditions
        :return: list[ClientsClientsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_filters_clients_post_with_http_info(
                workspace_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_filters_clients_post_with_http_info(
                workspace_id, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_filters_clients_post_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """List clients  # noqa: E501

        Returns filtered clients from a workspace (only ID and name).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_filters_clients_post_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param ClientsClientsPost clients_post: Clients filter conditions
        :return: list[ClientsClientsResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "clients_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_filters_clients_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_filters_clients_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "clients_post" in params:
            body_params = params["clients_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/filters/clients",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ClientsClientsResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_filters_project_groups_post(self, workspace_id, **kwargs):  # noqa: E501
        """List project groups filter  # noqa: E501

        Returns the project groups from a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_filters_project_groups_post(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param GroupsProjectGroupsPost project_groups_post: Project groups filter conditions
        :return: list[GroupsProjectGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_filters_project_groups_post_with_http_info(
                workspace_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_filters_project_groups_post_with_http_info(
                workspace_id, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_filters_project_groups_post_with_http_info(
        self, workspace_id, **kwargs
    ):  # noqa: E501
        """List project groups filter  # noqa: E501

        Returns the project groups from a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_filters_project_groups_post_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param GroupsProjectGroupsPost project_groups_post: Project groups filter conditions
        :return: list[GroupsProjectGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "project_groups_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_filters_project_groups_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_filters_project_groups_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "project_groups_post" in params:
            body_params = params["project_groups_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/filters/project_groups",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[GroupsProjectGroup]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_filters_project_users_post(
        self, workspace_id, status_post, **kwargs
    ):  # noqa: E501
        """List project users  # noqa: E501

        Returns filtered user projects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_filters_project_users_post(workspace_id, status_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param UsersProjectUsersPost status_post: User projects filter conditions (required)
        :return: list[UsersProjectUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_filters_project_users_post_with_http_info(
                workspace_id, status_post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_filters_project_users_post_with_http_info(
                workspace_id, status_post, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_filters_project_users_post_with_http_info(
        self, workspace_id, status_post, **kwargs
    ):  # noqa: E501
        """List project users  # noqa: E501

        Returns filtered user projects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_filters_project_users_post_with_http_info(workspace_id, status_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param UsersProjectUsersPost status_post: User projects filter conditions (required)
        :return: list[UsersProjectUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "status_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_filters_project_users_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_filters_project_users_post`"
            )  # noqa: E501
        # verify the required parameter "status_post" is set
        if self.api_client.client_side_validation and (
            "status_post" not in params or params["status_post"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `status_post` when calling `reports_api_v3_workspace_workspace_id_filters_project_users_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "status_post" in params:
            body_params = params["status_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/filters/project_users",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[UsersProjectUser]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_filters_projects_post(self, workspace_id, **kwargs):  # noqa: E501
        """List projects  # noqa: E501

        Returns filtered projects from a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_filters_projects_post(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param ProjectsProjectsPost projects_post: Projects filter conditions
        :return: list[ProjectsProjectResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_filters_projects_post_with_http_info(
                workspace_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_filters_projects_post_with_http_info(
                workspace_id, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_filters_projects_post_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """List projects  # noqa: E501

        Returns filtered projects from a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_filters_projects_post_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param ProjectsProjectsPost projects_post: Projects filter conditions
        :return: list[ProjectsProjectResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "projects_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_filters_projects_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_filters_projects_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "projects_post" in params:
            body_params = params["projects_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/filters/projects",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ProjectsProjectResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_filters_projects_status_post(self, workspace_id, **kwargs):  # noqa: E501
        """List projects statuses  # noqa: E501

        Returns filtered projects statuses from a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_filters_projects_status_post(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param DtoProjectStatusParamsRequest status_filter_params: Projects statuses filter conditions
        :return: list[DtoProjectStatusResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_filters_projects_status_post_with_http_info(
                workspace_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_filters_projects_status_post_with_http_info(
                workspace_id, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_filters_projects_status_post_with_http_info(
        self, workspace_id, **kwargs
    ):  # noqa: E501
        """List projects statuses  # noqa: E501

        Returns filtered projects statuses from a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_filters_projects_status_post_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param DtoProjectStatusParamsRequest status_filter_params: Projects statuses filter conditions
        :return: list[DtoProjectStatusResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "status_filter_params"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_filters_projects_status_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_filters_projects_status_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "status_filter_params" in params:
            body_params = params["status_filter_params"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/filters/projects/status",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[DtoProjectStatusResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_filters_tasks_auth_status_post(
        self, workspace_id, tasks_status_post, **kwargs
    ):  # noqa: E501
        """List tasks statuses  # noqa: E501

        Filter tasks statuses from a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_filters_tasks_auth_status_post(workspace_id, tasks_status_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param TasksTasksStatusPost tasks_status_post: Task filter conditions (required)
        :return: list[TasksTaskStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_filters_tasks_auth_status_post_with_http_info(
                workspace_id, tasks_status_post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_filters_tasks_auth_status_post_with_http_info(
                workspace_id, tasks_status_post, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_filters_tasks_auth_status_post_with_http_info(
        self, workspace_id, tasks_status_post, **kwargs
    ):  # noqa: E501
        """List tasks statuses  # noqa: E501

        Filter tasks statuses from a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_filters_tasks_auth_status_post_with_http_info(workspace_id, tasks_status_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param TasksTasksStatusPost tasks_status_post: Task filter conditions (required)
        :return: list[TasksTaskStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "tasks_status_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_filters_tasks_auth_status_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_filters_tasks_auth_status_post`"
            )  # noqa: E501
        # verify the required parameter "tasks_status_post" is set
        if self.api_client.client_side_validation and (
            "tasks_status_post" not in params or params["tasks_status_post"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `tasks_status_post` when calling `reports_api_v3_workspace_workspace_id_filters_tasks_auth_status_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "tasks_status_post" in params:
            body_params = params["tasks_status_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/filters/tasks_auth/status",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[TasksTaskStatus]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_filters_tasks_status_post(
        self, workspace_id, tasks_status_post, **kwargs
    ):  # noqa: E501
        """List tasks statuses  # noqa: E501

        Filter tasks statuses from a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_filters_tasks_status_post(workspace_id, tasks_status_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param TasksTasksStatusPost tasks_status_post: Task filter conditions (required)
        :return: list[TasksTaskStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_filters_tasks_status_post_with_http_info(
                workspace_id, tasks_status_post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_filters_tasks_status_post_with_http_info(
                workspace_id, tasks_status_post, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_filters_tasks_status_post_with_http_info(
        self, workspace_id, tasks_status_post, **kwargs
    ):  # noqa: E501
        """List tasks statuses  # noqa: E501

        Filter tasks statuses from a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_filters_tasks_status_post_with_http_info(workspace_id, tasks_status_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param TasksTasksStatusPost tasks_status_post: Task filter conditions (required)
        :return: list[TasksTaskStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "tasks_status_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_filters_tasks_status_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_filters_tasks_status_post`"
            )  # noqa: E501
        # verify the required parameter "tasks_status_post" is set
        if self.api_client.client_side_validation and (
            "tasks_status_post" not in params or params["tasks_status_post"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `tasks_status_post` when calling `reports_api_v3_workspace_workspace_id_filters_tasks_status_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "tasks_status_post" in params:
            body_params = params["tasks_status_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/filters/tasks/status",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[TasksTaskStatus]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_filters_users_post(self, workspace_id, **kwargs):  # noqa: E501
        """List users  # noqa: E501

        Returns filtered users from a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_filters_users_post(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param DtoUserFilterParamsRequest users_filter: Users filter conditions
        :return: list[DtoUserFilterResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_filters_users_post_with_http_info(
                workspace_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_filters_users_post_with_http_info(
                workspace_id, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_filters_users_post_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """List users  # noqa: E501

        Returns filtered users from a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_filters_users_post_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param DtoUserFilterParamsRequest users_filter: Users filter conditions
        :return: list[DtoUserFilterResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "users_filter"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_filters_users_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_filters_users_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "users_filter" in params:
            body_params = params["users_filter"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/filters/users",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[DtoUserFilterResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_search_clients_post(self, workspace_id, clients_post, **kwargs):  # noqa: E501
        """Search clients  # noqa: E501

        Returns filtered clients from a workspace (whole client object).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_search_clients_post(workspace_id, clients_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param ClientsClientsPost clients_post: Clients search conditions (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_search_clients_post_with_http_info(
                workspace_id, clients_post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_search_clients_post_with_http_info(
                workspace_id, clients_post, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_search_clients_post_with_http_info(
        self, workspace_id, clients_post, **kwargs
    ):  # noqa: E501
        """Search clients  # noqa: E501

        Returns filtered clients from a workspace (whole client object).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_search_clients_post_with_http_info(workspace_id, clients_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param ClientsClientsPost clients_post: Clients search conditions (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "clients_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_search_clients_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_search_clients_post`"
            )  # noqa: E501
        # verify the required parameter "clients_post" is set
        if self.api_client.client_side_validation and (
            "clients_post" not in params or params["clients_post"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `clients_post` when calling `reports_api_v3_workspace_workspace_id_search_clients_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "clients_post" in params:
            body_params = params["clients_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/search/clients",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[object]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_search_projects_post(self, workspace_id, projects_post, **kwargs):  # noqa: E501
        """List projects  # noqa: E501

        Returns filtered projects from a workspace (whole project object).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_search_projects_post(workspace_id, projects_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param ProjectsProjectsPost projects_post: Projects list conditions (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_search_projects_post_with_http_info(
                workspace_id, projects_post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_search_projects_post_with_http_info(
                workspace_id, projects_post, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_search_projects_post_with_http_info(
        self, workspace_id, projects_post, **kwargs
    ):  # noqa: E501
        """List projects  # noqa: E501

        Returns filtered projects from a workspace (whole project object).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_search_projects_post_with_http_info(workspace_id, projects_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param ProjectsProjectsPost projects_post: Projects list conditions (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "projects_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_search_projects_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_search_projects_post`"
            )  # noqa: E501
        # verify the required parameter "projects_post" is set
        if self.api_client.client_side_validation and (
            "projects_post" not in params or params["projects_post"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `projects_post` when calling `reports_api_v3_workspace_workspace_id_search_projects_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "projects_post" in params:
            body_params = params["projects_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/search/projects",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[object]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def reports_api_v3_workspace_workspace_id_search_users_post(self, workspace_id, users_filter, **kwargs):  # noqa: E501
        """List users  # noqa: E501

        Returns filtered users from a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_search_users_post(workspace_id, users_filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param DtoUserFilterParamsRequest users_filter: Users list conditions (required)
        :return: list[DtoUserFilterResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.reports_api_v3_workspace_workspace_id_search_users_post_with_http_info(
                workspace_id, users_filter, **kwargs
            )  # noqa: E501
        else:
            (data) = self.reports_api_v3_workspace_workspace_id_search_users_post_with_http_info(
                workspace_id, users_filter, **kwargs
            )  # noqa: E501
            return data

    def reports_api_v3_workspace_workspace_id_search_users_post_with_http_info(
        self, workspace_id, users_filter, **kwargs
    ):  # noqa: E501
        """List users  # noqa: E501

        Returns filtered users from a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reports_api_v3_workspace_workspace_id_search_users_post_with_http_info(workspace_id, users_filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Workspace ID (required)
        :param DtoUserFilterParamsRequest users_filter: Users list conditions (required)
        :return: list[DtoUserFilterResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "users_filter"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reports_api_v3_workspace_workspace_id_search_users_post" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `reports_api_v3_workspace_workspace_id_search_users_post`"
            )  # noqa: E501
        # verify the required parameter "users_filter" is set
        if self.api_client.client_side_validation and (
            "users_filter" not in params or params["users_filter"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `users_filter` when calling `reports_api_v3_workspace_workspace_id_search_users_post`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "users_filter" in params:
            body_params = params["users_filter"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/reports/api/v3/workspace/{workspace_id}/search/users",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[DtoUserFilterResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
