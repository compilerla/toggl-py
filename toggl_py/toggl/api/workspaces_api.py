"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import re  # noqa: F401

from toggl.api_client import ApiClient


class WorkspacesApi:

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_alerts(self, **kwargs):  # noqa: E501
        """Alerts  # noqa: E501

        Handles DELETE alert requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_alerts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_alerts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_alerts_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_alerts_with_http_info(self, **kwargs):  # noqa: E501
        """Alerts  # noqa: E501

        Handles DELETE alert requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_alerts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_alerts" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/alerts/{alert_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_timesheet_setups(self, workspace_id, setup_id, **kwargs):  # noqa: E501
        """Delete a timesheet setup  # noqa: E501

        Delete a timesheet setup for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_timesheet_setups(workspace_id, setup_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int setup_id: Numeric ID of the timesheet setup (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_timesheet_setups_with_http_info(workspace_id, setup_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_timesheet_setups_with_http_info(workspace_id, setup_id, **kwargs)  # noqa: E501
            return data

    def delete_timesheet_setups_with_http_info(self, workspace_id, setup_id, **kwargs):  # noqa: E501
        """Delete a timesheet setup  # noqa: E501

        Delete a timesheet setup for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_timesheet_setups_with_http_info(workspace_id, setup_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int setup_id: Numeric ID of the timesheet setup (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "setup_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_timesheet_setups" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `delete_timesheet_setups`"
            )  # noqa: E501
        # verify the required parameter "setup_id" is set
        if self.api_client.client_side_validation and ("setup_id" not in params or params["setup_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `setup_id` when calling `delete_timesheet_setups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "setup_id" in params:
            path_params["setup_id"] = params["setup_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/timesheet_setups/{setup_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_workspace_track_reminder(self, workspace_id, reminder_id, **kwargs):  # noqa: E501
        """TrackReminder  # noqa: E501

        Deletes a workspace tracking reminder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_track_reminder(workspace_id, reminder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int reminder_id: Reminder ID. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_workspace_track_reminder_with_http_info(workspace_id, reminder_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_track_reminder_with_http_info(workspace_id, reminder_id, **kwargs)  # noqa: E501
            return data

    def delete_workspace_track_reminder_with_http_info(self, workspace_id, reminder_id, **kwargs):  # noqa: E501
        """TrackReminder  # noqa: E501

        Deletes a workspace tracking reminder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_track_reminder_with_http_info(workspace_id, reminder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int reminder_id: Reminder ID. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "reminder_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_workspace_track_reminder" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `delete_workspace_track_reminder`"
            )  # noqa: E501
        # verify the required parameter "reminder_id" is set
        if self.api_client.client_side_validation and (
            "reminder_id" not in params or params["reminder_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `reminder_id` when calling `delete_workspace_track_reminder`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "reminder_id" in params:
            path_params["reminder_id"] = params["reminder_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/track_reminders/{reminder_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_workspace_user(self, workspace_id, workspace_user_id, **kwargs):  # noqa: E501
        """Delete workspace user  # noqa: E501

        Removes user from workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_user(workspace_id, workspace_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int workspace_user_id: Numeric ID of the workspace user. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_workspace_user_with_http_info(workspace_id, workspace_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_workspace_user_with_http_info(workspace_id, workspace_user_id, **kwargs)  # noqa: E501
            return data

    def delete_workspace_user_with_http_info(self, workspace_id, workspace_user_id, **kwargs):  # noqa: E501
        """Delete workspace user  # noqa: E501

        Removes user from workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_workspace_user_with_http_info(workspace_id, workspace_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace. (required)
        :param int workspace_user_id: Numeric ID of the workspace user. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "workspace_user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method delete_workspace_user" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `delete_workspace_user`"
            )  # noqa: E501
        # verify the required parameter "workspace_user_id" is set
        if self.api_client.client_side_validation and (
            "workspace_user_id" not in params or params["workspace_user_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_user_id` when calling `delete_workspace_user`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "workspace_user_id" in params:
            path_params["workspace_user_id"] = params["workspace_user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/workspace_users/{workspace_user_id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_workspaces_groups(self, organization_id, workspace_id, **kwargs):  # noqa: E501
        """List of groups in a workspace within an organization with user assignments.  # noqa: E501

        Returns list of groups in a workspace based on set of url parameters. List is sorted by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_workspaces_groups(organization_id, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :return: list[GroupOrganizationGroupResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_workspaces_groups_with_http_info(
                organization_id, workspace_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_organization_workspaces_groups_with_http_info(
                organization_id, workspace_id, **kwargs
            )  # noqa: E501
            return data

    def get_organization_workspaces_groups_with_http_info(self, organization_id, workspace_id, **kwargs):  # noqa: E501
        """List of groups in a workspace within an organization with user assignments.  # noqa: E501

        Returns list of groups in a workspace based on set of url parameters. List is sorted by name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_workspaces_groups_with_http_info(organization_id, workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :return: list[GroupOrganizationGroupResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_organization_workspaces_groups" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organization_workspaces_groups`"
            )  # noqa: E501
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_organization_workspaces_groups`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/workspaces/{workspace_id}/groups",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[GroupOrganizationGroupResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_workspaces_statistics(self, **kwargs):  # noqa: E501
        """Statistics for all workspaces in the organization  # noqa: E501

        Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_workspaces_statistics(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, ModelsStatistics)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_workspaces_statistics_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_workspaces_statistics_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_organization_workspaces_statistics_with_http_info(self, **kwargs):  # noqa: E501
        """Statistics for all workspaces in the organization  # noqa: E501

        Returns map indexed by workspace ID where each map element contains workspace admins list, members count and groups count.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_workspaces_statistics_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, ModelsStatistics)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_organization_workspaces_statistics" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/workspaces/statistics",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="dict(str, ModelsStatistics)",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_organization_workspaces_workspaceusers(self, organization_id, workspace_id, name, **kwargs):  # noqa: E501
        """List of users who belong to the given workspace.  # noqa: E501

        Returns any users who belong to the workspace directly or through at least one group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_workspaces_workspaceusers(organization_id, workspace_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :param str name: Workspace user name to filter by (required)
        :return: list[ModelsOrganizationWorkspaceUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_organization_workspaces_workspaceusers_with_http_info(
                organization_id, workspace_id, name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_organization_workspaces_workspaceusers_with_http_info(
                organization_id, workspace_id, name, **kwargs
            )  # noqa: E501
            return data

    def get_organization_workspaces_workspaceusers_with_http_info(
        self, organization_id, workspace_id, name, **kwargs
    ):  # noqa: E501
        """List of users who belong to the given workspace.  # noqa: E501

        Returns any users who belong to the workspace directly or through at least one group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_workspaces_workspaceusers_with_http_info(organization_id, workspace_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :param str name: Workspace user name to filter by (required)
        :return: list[ModelsOrganizationWorkspaceUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "workspace_id", "name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_organization_workspaces_workspaceusers" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_organization_workspaces_workspaceusers`"
            )  # noqa: E501
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_organization_workspaces_workspaceusers`"
            )  # noqa: E501
        # verify the required parameter "name" is set
        if self.api_client.client_side_validation and ("name" not in params or params["name"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `name` when calling `get_organization_workspaces_workspaceusers`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "name" in params:
            form_params.append(("name", params["name"]))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/workspaces/{workspace_id}/workspace_users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsOrganizationWorkspaceUser]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_timesheet_setups(self, workspace_id, **kwargs):  # noqa: E501
        """Get timesheet setups  # noqa: E501

        Get timesheet setups for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_timesheet_setups(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int member_ids: Numeric ID of the members, comma-separated
        :param int approver_ids: Numeric ID of the approvers, comma-separated
        :param str sort_field: Field used for sorting, default start_date.
        :param str sort_order: Sort order.
        :return: TimesheetsetupsGetPaginatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_timesheet_setups_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_timesheet_setups_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_timesheet_setups_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Get timesheet setups  # noqa: E501

        Get timesheet setups for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_timesheet_setups_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int member_ids: Numeric ID of the members, comma-separated
        :param int approver_ids: Numeric ID of the approvers, comma-separated
        :param str sort_field: Field used for sorting, default start_date.
        :param str sort_order: Sort order.
        :return: TimesheetsetupsGetPaginatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "member_ids", "approver_ids", "sort_field", "sort_order"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_timesheet_setups" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_timesheet_setups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []
        if "member_ids" in params:
            query_params.append(("member_ids", params["member_ids"]))  # noqa: E501
        if "approver_ids" in params:
            query_params.append(("approver_ids", params["approver_ids"]))  # noqa: E501
        if "sort_field" in params:
            query_params.append(("sort_field", params["sort_field"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/timesheet_setups",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="TimesheetsetupsGetPaginatedResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace(self, workspace_id, **kwargs):  # noqa: E501
        """Get single workspace  # noqa: E501

        Get information of single workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric Workspace ID (required)
        :return: WorkspaceWorkspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Get single workspace  # noqa: E501

        Get information of single workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric Workspace ID (required)
        :return: WorkspaceWorkspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_workspace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WorkspaceWorkspace",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_statistics(self, **kwargs):  # noqa: E501
        """Workspace statistics  # noqa: E501

        Returns workspace admins list, members count and groups count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_statistics(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ModelsStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_statistics_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_statistics_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_workspace_statistics_with_http_info(self, **kwargs):  # noqa: E501
        """Workspace statistics  # noqa: E501

        Returns workspace admins list, members count and groups count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_statistics_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ModelsStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_statistics" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/statistics",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsStatistics",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_time_entry_constraints(self, workspace_id, **kwargs):  # noqa: E501
        """Get workspace time entry constraints  # noqa: E501

        Get the time entry constraints for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_time_entry_constraints(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: ModelsTimeEntryConstraints
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_time_entry_constraints_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_time_entry_constraints_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_time_entry_constraints_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Get workspace time entry constraints  # noqa: E501

        Get the time entry constraints for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_time_entry_constraints_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: ModelsTimeEntryConstraints
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_workspace_time_entry_constraints" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_time_entry_constraints`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/time_entry_constraints",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsTimeEntryConstraints",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_timesheet_hours_handler(self, workspace_id, payload, **kwargs):  # noqa: E501
        """Get timesheets hours  # noqa: E501

        Get timesheet working hours and total tracked seconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_timesheet_hours_handler(workspace_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param TimesheetsPostTimesheetHoursPayload payload: Array of timesheet setup IDs and start dates. (required)
        :return: list[TimesheetsTimesheetHoursResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_timesheet_hours_handler_with_http_info(workspace_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_timesheet_hours_handler_with_http_info(workspace_id, payload, **kwargs)  # noqa: E501
            return data

    def get_workspace_timesheet_hours_handler_with_http_info(self, workspace_id, payload, **kwargs):  # noqa: E501
        """Get timesheets hours  # noqa: E501

        Get timesheet working hours and total tracked seconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_timesheet_hours_handler_with_http_info(workspace_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param TimesheetsPostTimesheetHoursPayload payload: Array of timesheet setup IDs and start dates. (required)
        :return: list[TimesheetsTimesheetHoursResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "payload"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_workspace_timesheet_hours_handler" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_timesheet_hours_handler`"
            )  # noqa: E501
        # verify the required parameter "payload" is set
        if self.api_client.client_side_validation and ("payload" not in params or params["payload"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `payload` when calling `get_workspace_timesheet_hours_handler`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "payload" in params:
            body_params = params["payload"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/timesheets/hours",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[TimesheetsTimesheetHoursResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_timesheet_time_entries_handler(self, workspace_id, setup_id, start_date, **kwargs):  # noqa: E501
        """Get timesheet time entries  # noqa: E501

        Get the time entries from within a timesheet timeframe.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_timesheet_time_entries_handler(workspace_id, setup_id, start_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int setup_id: Numeric ID of the timesheet setup. (required)
        :param str start_date: Start date (YYYY-MM-DD) of the timesheet. (required)
        :return: list[ModelsTimeEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_timesheet_time_entries_handler_with_http_info(
                workspace_id, setup_id, start_date, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_workspace_timesheet_time_entries_handler_with_http_info(
                workspace_id, setup_id, start_date, **kwargs
            )  # noqa: E501
            return data

    def get_workspace_timesheet_time_entries_handler_with_http_info(
        self, workspace_id, setup_id, start_date, **kwargs
    ):  # noqa: E501
        """Get timesheet time entries  # noqa: E501

        Get the time entries from within a timesheet timeframe.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_timesheet_time_entries_handler_with_http_info(workspace_id, setup_id, start_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int setup_id: Numeric ID of the timesheet setup. (required)
        :param str start_date: Start date (YYYY-MM-DD) of the timesheet. (required)
        :return: list[ModelsTimeEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "setup_id", "start_date"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method get_workspace_timesheet_time_entries_handler" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_timesheet_time_entries_handler`"
            )  # noqa: E501
        # verify the required parameter "setup_id" is set
        if self.api_client.client_side_validation and ("setup_id" not in params or params["setup_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `setup_id` when calling `get_workspace_timesheet_time_entries_handler`"
            )  # noqa: E501
        # verify the required parameter "start_date" is set
        if self.api_client.client_side_validation and (
            "start_date" not in params or params["start_date"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `start_date` when calling `get_workspace_timesheet_time_entries_handler`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "setup_id" in params:
            path_params["setup_id"] = params["setup_id"]  # noqa: E501
        if "start_date" in params:
            path_params["start_date"] = params["start_date"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsTimeEntry]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_timesheets_handler(self, workspace_id, **kwargs):  # noqa: E501
        """Get timesheets  # noqa: E501

        Get timesheets applying various filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_timesheets_handler(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int member_ids: Numeric ID of the members, comma-separated
        :param int approver_ids: Numeric ID of the approvers, comma-separated
        :param int timesheet_setup_ids: Numeric ID for timesheet setup, comma-separated.
        :param int statuses: Timesheet status, comma-separated.
        :param int before: Timesheets starting before this date (YYYY-MM-DD).
        :param int after: Timesheets starting after this date (YYYY-MM-DD).
        :param int page: Page number, default 1.
        :param int per_page: Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000.
        :param str sort_field: Field used for sorting, default start_date.
        :param str sort_order: Sort order.
        :return: list[TimesheetsGetPaginatedResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_timesheets_handler_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_timesheets_handler_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_timesheets_handler_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Get timesheets  # noqa: E501

        Get timesheets applying various filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_timesheets_handler_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int member_ids: Numeric ID of the members, comma-separated
        :param int approver_ids: Numeric ID of the approvers, comma-separated
        :param int timesheet_setup_ids: Numeric ID for timesheet setup, comma-separated.
        :param int statuses: Timesheet status, comma-separated.
        :param int before: Timesheets starting before this date (YYYY-MM-DD).
        :param int after: Timesheets starting after this date (YYYY-MM-DD).
        :param int page: Page number, default 1.
        :param int per_page: Number of items per page, default 20. Also defaults to 20 if provided an greater than 1000.
        :param str sort_field: Field used for sorting, default start_date.
        :param str sort_order: Sort order.
        :return: list[TimesheetsGetPaginatedResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "workspace_id",
            "member_ids",
            "approver_ids",
            "timesheet_setup_ids",
            "statuses",
            "before",
            "after",
            "page",
            "per_page",
            "sort_field",
            "sort_order",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_timesheets_handler" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_timesheets_handler`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []
        if "member_ids" in params:
            query_params.append(("member_ids", params["member_ids"]))  # noqa: E501
        if "approver_ids" in params:
            query_params.append(("approver_ids", params["approver_ids"]))  # noqa: E501
        if "timesheet_setup_ids" in params:
            query_params.append(("timesheet_setup_ids", params["timesheet_setup_ids"]))  # noqa: E501
        if "statuses" in params:
            query_params.append(("statuses", params["statuses"]))  # noqa: E501
        if "before" in params:
            query_params.append(("before", params["before"]))  # noqa: E501
        if "after" in params:
            query_params.append(("after", params["after"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "per_page" in params:
            query_params.append(("per_page", params["per_page"]))  # noqa: E501
        if "sort_field" in params:
            query_params.append(("sort_field", params["sort_field"]))  # noqa: E501
        if "sort_order" in params:
            query_params.append(("sort_order", params["sort_order"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/timesheets",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[TimesheetsGetPaginatedResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_track_reminders(self, workspace_id, **kwargs):  # noqa: E501
        """TrackReminders  # noqa: E501

        Returns a list of track reminders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_track_reminders(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: list[ModelsTrackReminder]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_track_reminders_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_track_reminders_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_track_reminders_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """TrackReminders  # noqa: E501

        Returns a list of track reminders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_track_reminders_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: list[ModelsTrackReminder]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_track_reminders" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `get_workspace_track_reminders`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/track_reminders",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsTrackReminder]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspace_users(self, workspace_id, **kwargs):  # noqa: E501
        """Get workspace users  # noqa: E501

        List all users for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_users(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: list[ModelsSimpleWorkspaceUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspace_users_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_users_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_users_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Get workspace users  # noqa: E501

        List all users for a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_users_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :return: list[ModelsSimpleWorkspaceUser]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspace_users" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_workspace_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/users",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ModelsSimpleWorkspaceUser]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspaces(self, **kwargs):  # noqa: E501
        """Workspaces  # noqa: E501

        Lists workspaces for given user, including all workspaces in an organization for an adminj.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspaces(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int since: Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace.
        :return: list[WorkspaceWithActiveProjectCount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspaces_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_workspaces_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_workspaces_with_http_info(self, **kwargs):  # noqa: E501
        """Workspaces  # noqa: E501

        Lists workspaces for given user, including all workspaces in an organization for an adminj.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspaces_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int since: Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace.
        :return: list[WorkspaceWithActiveProjectCount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["since"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspaces" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "since" in params:
            form_params.append(("since", params["since"]))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/all_workspaces",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[WorkspaceWithActiveProjectCount]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_workspaces_0(self, **kwargs):  # noqa: E501
        """Workspaces  # noqa: E501

        Lists workspaces for given user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspaces_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int since: Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace.
        :return: list[WorkspaceWorkspace]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_workspaces_0_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_workspaces_0_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_workspaces_0_with_http_info(self, **kwargs):  # noqa: E501
        """Workspaces  # noqa: E501

        Lists workspaces for given user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspaces_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int since: Retrieve workspaces created/modified/deleted since this date using UNIX timestamp, including the dates a workspace member got added, removed or updated in the workspace.
        :return: list[WorkspaceWorkspace]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["since"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method get_workspaces_0" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if "since" in params:
            form_params.append(("since", params["since"]))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/me/workspaces",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[WorkspaceWorkspace]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def patch_organization_workspace_users(self, organization_id, workspace_id, params, **kwargs):  # noqa: E501
        """Changes the users in a workspace.  # noqa: E501

        Changes the users in a workspace (currently deletion only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_organization_workspace_users(organization_id, workspace_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace (required)
        :param WorkspaceUsersPatchParams params: Input data of the users to be patched. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.patch_organization_workspace_users_with_http_info(
                organization_id, workspace_id, params, **kwargs
            )  # noqa: E501
        else:
            (data) = self.patch_organization_workspace_users_with_http_info(
                organization_id, workspace_id, params, **kwargs
            )  # noqa: E501
            return data

    def patch_organization_workspace_users_with_http_info(self, organization_id, workspace_id, params, **kwargs):  # noqa: E501
        """Changes the users in a workspace.  # noqa: E501

        Changes the users in a workspace (currently deletion only).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_organization_workspace_users_with_http_info(organization_id, workspace_id, params, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace (required)
        :param WorkspaceUsersPatchParams params: Input data of the users to be patched. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "workspace_id", "params"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method patch_organization_workspace_users" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `patch_organization_workspace_users`"
            )  # noqa: E501
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `patch_organization_workspace_users`"
            )  # noqa: E501
        # verify the required parameter "params" is set
        if self.api_client.client_side_validation and ("params" not in params or params["params"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `params` when calling `patch_organization_workspace_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "params" in params:
            body_params = params["params"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/workspaces/{workspace_id}/workspace_users",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_alerts(self, request, **kwargs):  # noqa: E501
        """Alerts  # noqa: E501

        Handles POST alert requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_alerts(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object request: Alert data (required)
        :return: ModelsAlert
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_alerts_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_alerts_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def post_alerts_with_http_info(self, request, **kwargs):  # noqa: E501
        """Alerts  # noqa: E501

        Handles POST alert requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_alerts_with_http_info(request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object request: Alert data (required)
        :return: ModelsAlert
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["request"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_alerts" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "request" is set
        if self.api_client.client_side_validation and ("request" not in params or params["request"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `request` when calling `post_alerts`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "request" in params:
            body_params = params["request"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/alerts",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsAlert",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_organization_workspaces(self, organization_id, post, **kwargs):  # noqa: E501
        """Create a new workspace.  # noqa: E501

        Create a workspace within an existing organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_workspaces(organization_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param WorkspacePayload post: Parameters of the new workspace (required)
        :return: WorkspaceWorkspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_organization_workspaces_with_http_info(organization_id, post, **kwargs)  # noqa: E501
        else:
            (data) = self.post_organization_workspaces_with_http_info(organization_id, post, **kwargs)  # noqa: E501
            return data

    def post_organization_workspaces_with_http_info(self, organization_id, post, **kwargs):  # noqa: E501
        """Create a new workspace.  # noqa: E501

        Create a workspace within an existing organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_organization_workspaces_with_http_info(organization_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param WorkspacePayload post: Parameters of the new workspace (required)
        :return: WorkspaceWorkspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_organization_workspaces" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `post_organization_workspaces`"
            )  # noqa: E501
        # verify the required parameter "post" is set
        if self.api_client.client_side_validation and ("post" not in params or params["post"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `post` when calling `post_organization_workspaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post" in params:
            body_params = params["post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/workspaces",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WorkspaceWorkspace",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_timesheet_setups(self, workspace_id, payload, **kwargs):  # noqa: E501
        """Create a timesheet setup  # noqa: E501

        Create timesheet setups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_timesheet_setups(workspace_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param TimesheetsetupsCreatePayload payload: Arrays of setup creation parameters. (required)
        :return: list[TimesheetsetupsAPITimesheetSetup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_timesheet_setups_with_http_info(workspace_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.post_timesheet_setups_with_http_info(workspace_id, payload, **kwargs)  # noqa: E501
            return data

    def post_timesheet_setups_with_http_info(self, workspace_id, payload, **kwargs):  # noqa: E501
        """Create a timesheet setup  # noqa: E501

        Create timesheet setups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_timesheet_setups_with_http_info(workspace_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param TimesheetsetupsCreatePayload payload: Arrays of setup creation parameters. (required)
        :return: list[TimesheetsetupsAPITimesheetSetup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "payload"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_timesheet_setups" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_timesheet_setups`"
            )  # noqa: E501
        # verify the required parameter "payload" is set
        if self.api_client.client_side_validation and ("payload" not in params or params["payload"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `post_timesheet_setups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "payload" in params:
            body_params = params["payload"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/timesheet_setups",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[TimesheetsetupsAPITimesheetSetup]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_track_reminders(self, workspace_id, track_reminder_post, **kwargs):  # noqa: E501
        """TrackReminders  # noqa: E501

        Creates a workspace tracking reminder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_track_reminders(workspace_id, track_reminder_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param RemindersPayload track_reminder_post: Reminder parameters. (required)
        :return: ModelsTrackReminder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_track_reminders_with_http_info(
                workspace_id, track_reminder_post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_workspace_track_reminders_with_http_info(
                workspace_id, track_reminder_post, **kwargs
            )  # noqa: E501
            return data

    def post_workspace_track_reminders_with_http_info(self, workspace_id, track_reminder_post, **kwargs):  # noqa: E501
        """TrackReminders  # noqa: E501

        Creates a workspace tracking reminder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_track_reminders_with_http_info(workspace_id, track_reminder_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param RemindersPayload track_reminder_post: Reminder parameters. (required)
        :return: ModelsTrackReminder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "track_reminder_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_workspace_track_reminders" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_track_reminders`"
            )  # noqa: E501
        # verify the required parameter "track_reminder_post" is set
        if self.api_client.client_side_validation and (
            "track_reminder_post" not in params or params["track_reminder_post"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `track_reminder_post` when calling `post_workspace_track_reminders`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "track_reminder_post" in params:
            body_params = params["track_reminder_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/track_reminders",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsTrackReminder",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspace_users_lost_password(self, workspace_id, user_id, **kwargs):  # noqa: E501
        """Change a lost password  # noqa: E501

        Request a change password action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_users_lost_password(workspace_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int user_id: Numeric ID of the user (required)
        :return: UsersLostPasswordURL
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspace_users_lost_password_with_http_info(workspace_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workspace_users_lost_password_with_http_info(workspace_id, user_id, **kwargs)  # noqa: E501
            return data

    def post_workspace_users_lost_password_with_http_info(self, workspace_id, user_id, **kwargs):  # noqa: E501
        """Change a lost password  # noqa: E501

        Request a change password action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspace_users_lost_password_with_http_info(workspace_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int user_id: Numeric ID of the user (required)
        :return: UsersLostPasswordURL
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method post_workspace_users_lost_password" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `post_workspace_users_lost_password`"
            )  # noqa: E501
        # verify the required parameter "user_id" is set
        if self.api_client.client_side_validation and ("user_id" not in params or params["user_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `user_id` when calling `post_workspace_users_lost_password`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "user_id" in params:
            path_params["user_id"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/users/{user_id}/lost_password",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="UsersLostPasswordURL",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_workspaces(self, post, **kwargs):  # noqa: E501
        """Workspaces  # noqa: E501

        Change a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspaces(post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkspacePayload post: Change parameters (required)
        :return: WorkspaceWorkspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_workspaces_with_http_info(post, **kwargs)  # noqa: E501
        else:
            (data) = self.post_workspaces_with_http_info(post, **kwargs)  # noqa: E501
            return data

    def post_workspaces_with_http_info(self, post, **kwargs):  # noqa: E501
        """Workspaces  # noqa: E501

        Change a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_workspaces_with_http_info(post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkspacePayload post: Change parameters (required)
        :return: WorkspaceWorkspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method post_workspaces" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "post" is set
        if self.api_client.client_side_validation and ("post" not in params or params["post"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `post` when calling `post_workspaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post" in params:
            body_params = params["post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WorkspaceWorkspace",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_organization_workspaces_assignments(self, organization_id, workspace_id, post, **kwargs):  # noqa: E501
        """Change assignments of users within a workspace.  # noqa: E501

        Assign or remove users to/from a workspace or to/from groups belonging to said workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_workspaces_assignments(organization_id, workspace_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :param UserAssignmentsPayload post: Describes the change in assignment (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_organization_workspaces_assignments_with_http_info(
                organization_id, workspace_id, post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_organization_workspaces_assignments_with_http_info(
                organization_id, workspace_id, post, **kwargs
            )  # noqa: E501
            return data

    def put_organization_workspaces_assignments_with_http_info(
        self, organization_id, workspace_id, post, **kwargs
    ):  # noqa: E501
        """Change assignments of users within a workspace.  # noqa: E501

        Assign or remove users to/from a workspace or to/from groups belonging to said workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_organization_workspaces_assignments_with_http_info(organization_id, workspace_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: Numeric ID of the organization (required)
        :param int workspace_id: Numeric ID of the workspace within the organization (required)
        :param UserAssignmentsPayload post: Describes the change in assignment (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id", "workspace_id", "post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method put_organization_workspaces_assignments" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "organization_id" is set
        if self.api_client.client_side_validation and (
            "organization_id" not in params or params["organization_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `put_organization_workspaces_assignments`"
            )  # noqa: E501
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `put_organization_workspaces_assignments`"
            )  # noqa: E501
        # verify the required parameter "post" is set
        if self.api_client.client_side_validation and ("post" not in params or params["post"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `post` when calling `put_organization_workspaces_assignments`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organization_id"] = params["organization_id"]  # noqa: E501
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post" in params:
            body_params = params["post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["text/plain"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/organizations/{organization_id}/workspaces/{workspace_id}/assignments",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_timesheet_setups(self, workspace_id, setup_id, payload, **kwargs):  # noqa: E501
        """Update a timesheet setup  # noqa: E501

        Updates a timesheet setups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_timesheet_setups(workspace_id, setup_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int setup_id: Numeric ID of the timesheet setup (required)
        :param TimesheetsetupsUpdatePayload payload: Setup update parameters. (required)
        :return: TimesheetsetupsAPITimesheetSetup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_timesheet_setups_with_http_info(workspace_id, setup_id, payload, **kwargs)  # noqa: E501
        else:
            (data) = self.put_timesheet_setups_with_http_info(workspace_id, setup_id, payload, **kwargs)  # noqa: E501
            return data

    def put_timesheet_setups_with_http_info(self, workspace_id, setup_id, payload, **kwargs):  # noqa: E501
        """Update a timesheet setup  # noqa: E501

        Updates a timesheet setups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_timesheet_setups_with_http_info(workspace_id, setup_id, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int setup_id: Numeric ID of the timesheet setup (required)
        :param TimesheetsetupsUpdatePayload payload: Setup update parameters. (required)
        :return: TimesheetsetupsAPITimesheetSetup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "setup_id", "payload"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_timesheet_setups" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_id` when calling `put_timesheet_setups`")  # noqa: E501
        # verify the required parameter "setup_id" is set
        if self.api_client.client_side_validation and ("setup_id" not in params or params["setup_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `setup_id` when calling `put_timesheet_setups`")  # noqa: E501
        # verify the required parameter "payload" is set
        if self.api_client.client_side_validation and ("payload" not in params or params["payload"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `payload` when calling `put_timesheet_setups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "setup_id" in params:
            path_params["setup_id"] = params["setup_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "payload" in params:
            body_params = params["payload"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/timesheet_setups/{setup_id}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="TimesheetsetupsAPITimesheetSetup",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_workspace_timesheets_handler(self, workspace_id, setup_id, start_date, payload, **kwargs):  # noqa: E501
        """Update timesheets  # noqa: E501

        Updates a timesheet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_timesheets_handler(workspace_id, setup_id, start_date, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int setup_id: Numeric ID of the timesheet setup. (required)
        :param str start_date: Start date (YYYY-MM-DD) of the timesheet. (required)
        :param TimesheetsPutTimesheetPayload payload: Timesheet status and rejection comment. (required)
        :return: TimesheetsAPITimesheet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_workspace_timesheets_handler_with_http_info(
                workspace_id, setup_id, start_date, payload, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_workspace_timesheets_handler_with_http_info(
                workspace_id, setup_id, start_date, payload, **kwargs
            )  # noqa: E501
            return data

    def put_workspace_timesheets_handler_with_http_info(
        self, workspace_id, setup_id, start_date, payload, **kwargs
    ):  # noqa: E501
        """Update timesheets  # noqa: E501

        Updates a timesheet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_timesheets_handler_with_http_info(workspace_id, setup_id, start_date, payload, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int setup_id: Numeric ID of the timesheet setup. (required)
        :param str start_date: Start date (YYYY-MM-DD) of the timesheet. (required)
        :param TimesheetsPutTimesheetPayload payload: Timesheet status and rejection comment. (required)
        :return: TimesheetsAPITimesheet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "setup_id", "start_date", "payload"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_workspace_timesheets_handler" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `put_workspace_timesheets_handler`"
            )  # noqa: E501
        # verify the required parameter "setup_id" is set
        if self.api_client.client_side_validation and ("setup_id" not in params or params["setup_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `setup_id` when calling `put_workspace_timesheets_handler`"
            )  # noqa: E501
        # verify the required parameter "start_date" is set
        if self.api_client.client_side_validation and (
            "start_date" not in params or params["start_date"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `start_date` when calling `put_workspace_timesheets_handler`"
            )  # noqa: E501
        # verify the required parameter "payload" is set
        if self.api_client.client_side_validation and ("payload" not in params or params["payload"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `payload` when calling `put_workspace_timesheets_handler`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "setup_id" in params:
            path_params["setup_id"] = params["setup_id"]  # noqa: E501
        if "start_date" in params:
            path_params["start_date"] = params["start_date"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "payload" in params:
            body_params = params["payload"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/timesheets/{setup_id}/{start_date}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="TimesheetsAPITimesheet",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_workspace_track_reminder(self, workspace_id, reminder_id, track_reminder_post, **kwargs):  # noqa: E501
        """TrackReminder  # noqa: E501

        Updates a workspace tracking reminder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_track_reminder(workspace_id, reminder_id, track_reminder_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int reminder_id: Reminder ID. (required)
        :param RemindersPayload track_reminder_post: Reminder parameters. (required)
        :return: ModelsTrackReminder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_workspace_track_reminder_with_http_info(
                workspace_id, reminder_id, track_reminder_post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_workspace_track_reminder_with_http_info(
                workspace_id, reminder_id, track_reminder_post, **kwargs
            )  # noqa: E501
            return data

    def put_workspace_track_reminder_with_http_info(
        self, workspace_id, reminder_id, track_reminder_post, **kwargs
    ):  # noqa: E501
        """TrackReminder  # noqa: E501

        Updates a workspace tracking reminder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_track_reminder_with_http_info(workspace_id, reminder_id, track_reminder_post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int reminder_id: Reminder ID. (required)
        :param RemindersPayload track_reminder_post: Reminder parameters. (required)
        :return: ModelsTrackReminder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "reminder_id", "track_reminder_post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_workspace_track_reminder" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `put_workspace_track_reminder`"
            )  # noqa: E501
        # verify the required parameter "reminder_id" is set
        if self.api_client.client_side_validation and (
            "reminder_id" not in params or params["reminder_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `reminder_id` when calling `put_workspace_track_reminder`"
            )  # noqa: E501
        # verify the required parameter "track_reminder_post" is set
        if self.api_client.client_side_validation and (
            "track_reminder_post" not in params or params["track_reminder_post"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `track_reminder_post` when calling `put_workspace_track_reminder`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "reminder_id" in params:
            path_params["reminder_id"] = params["reminder_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "track_reminder_post" in params:
            body_params = params["track_reminder_post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/track_reminders/{reminder_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ModelsTrackReminder",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_workspace_users(self, workspace_id, user_id, **kwargs):  # noqa: E501
        """Update workspace user  # noqa: E501

        Update the data for a user in a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_users(workspace_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int user_id: Numeric ID of the user (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_workspace_users_with_http_info(workspace_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workspace_users_with_http_info(workspace_id, user_id, **kwargs)  # noqa: E501
            return data

    def put_workspace_users_with_http_info(self, workspace_id, user_id, **kwargs):  # noqa: E501
        """Update workspace user  # noqa: E501

        Update the data for a user in a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_users_with_http_info(workspace_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int user_id: Numeric ID of the user (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "user_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_workspace_users" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_id` when calling `put_workspace_users`")  # noqa: E501
        # verify the required parameter "user_id" is set
        if self.api_client.client_side_validation and ("user_id" not in params or params["user_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `put_workspace_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "user_id" in params:
            path_params["user_id"] = params["user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/users/{user_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_workspace_workspace_users(self, workspace_id, workspace_user_id, post, **kwargs):  # noqa: E501
        """Update workspace-user  # noqa: E501

        Update the data for a workspace_user in a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_workspace_users(workspace_id, workspace_user_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int workspace_user_id: Numeric ID of the workspace user (required)
        :param UserPayload post: Changes that need to be applied to the user data. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_workspace_workspace_users_with_http_info(
                workspace_id, workspace_user_id, post, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_workspace_workspace_users_with_http_info(
                workspace_id, workspace_user_id, post, **kwargs
            )  # noqa: E501
            return data

    def put_workspace_workspace_users_with_http_info(self, workspace_id, workspace_user_id, post, **kwargs):  # noqa: E501
        """Update workspace-user  # noqa: E501

        Update the data for a workspace_user in a given workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspace_workspace_users_with_http_info(workspace_id, workspace_user_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric ID of the workspace (required)
        :param int workspace_user_id: Numeric ID of the workspace user (required)
        :param UserPayload post: Changes that need to be applied to the user data. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "workspace_user_id", "post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_workspace_workspace_users" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_id` when calling `put_workspace_workspace_users`"
            )  # noqa: E501
        # verify the required parameter "workspace_user_id" is set
        if self.api_client.client_side_validation and (
            "workspace_user_id" not in params or params["workspace_user_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `workspace_user_id` when calling `put_workspace_workspace_users`"
            )  # noqa: E501
        # verify the required parameter "post" is set
        if self.api_client.client_side_validation and ("post" not in params or params["post"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `post` when calling `put_workspace_workspace_users`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501
        if "workspace_user_id" in params:
            path_params["workspace_user_id"] = params["workspace_user_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post" in params:
            body_params = params["post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}/workspace_users/{workspace_user_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_workspaces(self, workspace_id, post, **kwargs):  # noqa: E501
        """Update workspace  # noqa: E501

        Update a specific workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspaces(workspace_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric Workspace ID (required)
        :param WorkspacePayload post: Workspace parameters (required)
        :return: WorkspaceWorkspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_workspaces_with_http_info(workspace_id, post, **kwargs)  # noqa: E501
        else:
            (data) = self.put_workspaces_with_http_info(workspace_id, post, **kwargs)  # noqa: E501
            return data

    def put_workspaces_with_http_info(self, workspace_id, post, **kwargs):  # noqa: E501
        """Update workspace  # noqa: E501

        Update a specific workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_workspaces_with_http_info(workspace_id, post, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int workspace_id: Numeric Workspace ID (required)
        :param WorkspacePayload post: Workspace parameters (required)
        :return: WorkspaceWorkspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["workspace_id", "post"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method put_workspaces" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter "workspace_id" is set
        if self.api_client.client_side_validation and (
            "workspace_id" not in params or params["workspace_id"] is None
        ):  # noqa: E501
            raise ValueError("Missing the required parameter `workspace_id` when calling `put_workspaces`")  # noqa: E501
        # verify the required parameter "post" is set
        if self.api_client.client_side_validation and ("post" not in params or params["post"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `post` when calling `put_workspaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "workspace_id" in params:
            path_params["workspace_id"] = params["workspace_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "post" in params:
            body_params = params["post"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = ["BasicAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/workspaces/{workspace_id}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="WorkspaceWorkspace",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
