"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class BillingPricesStruct:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {"actual": "int", "base": "int", "with_tax": "int"}

    attribute_map = {"actual": "actual", "base": "base", "with_tax": "with_tax"}

    def __init__(self, actual=None, base=None, with_tax=None, _configuration=None):  # noqa: E501
        """BillingPricesStruct - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._actual = None
        self._base = None
        self._with_tax = None
        self.discriminator = None

        if actual is not None:
            self.actual = actual
        if base is not None:
            self.base = base
        if with_tax is not None:
            self.with_tax = with_tax

    @property
    def actual(self):
        """Gets the actual of this BillingPricesStruct.  # noqa: E501


        :return: The actual of this BillingPricesStruct.  # noqa: E501
        :rtype: int
        """
        return self._actual

    @actual.setter
    def actual(self, actual):
        """Sets the actual of this BillingPricesStruct.


        :param actual: The actual of this BillingPricesStruct.  # noqa: E501
        :type: int
        """

        self._actual = actual

    @property
    def base(self):
        """Gets the base of this BillingPricesStruct.  # noqa: E501


        :return: The base of this BillingPricesStruct.  # noqa: E501
        :rtype: int
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this BillingPricesStruct.


        :param base: The base of this BillingPricesStruct.  # noqa: E501
        :type: int
        """

        self._base = base

    @property
    def with_tax(self):
        """Gets the with_tax of this BillingPricesStruct.  # noqa: E501


        :return: The with_tax of this BillingPricesStruct.  # noqa: E501
        :rtype: int
        """
        return self._with_tax

    @with_tax.setter
    def with_tax(self, with_tax):
        """Sets the with_tax of this BillingPricesStruct.


        :param with_tax: The with_tax of this BillingPricesStruct.  # noqa: E501
        :type: int
        """

        self._with_tax = with_tax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(BillingPricesStruct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingPricesStruct):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BillingPricesStruct):
            return True

        return self.to_dict() != other.to_dict()
