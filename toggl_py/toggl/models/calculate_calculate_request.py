"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class CalculateCalculateRequest:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {"period": "int", "pricing_plan_id": "int", "user_count": "int"}

    attribute_map = {"period": "period", "pricing_plan_id": "pricing_plan_id", "user_count": "user_count"}

    def __init__(self, period=None, pricing_plan_id=None, user_count=None, _configuration=None):  # noqa: E501
        """CalculateCalculateRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._period = None
        self._pricing_plan_id = None
        self._user_count = None
        self.discriminator = None

        self.period = period
        self.pricing_plan_id = pricing_plan_id
        self.user_count = user_count

    @property
    def period(self):
        """Gets the period of this CalculateCalculateRequest.  # noqa: E501

        Can be only 1 or 12  # noqa: E501

        :return: The period of this CalculateCalculateRequest.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this CalculateCalculateRequest.

        Can be only 1 or 12  # noqa: E501

        :param period: The period of this CalculateCalculateRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")  # noqa: E501

        self._period = period

    @property
    def pricing_plan_id(self):
        """Gets the pricing_plan_id of this CalculateCalculateRequest.  # noqa: E501


        :return: The pricing_plan_id of this CalculateCalculateRequest.  # noqa: E501
        :rtype: int
        """
        return self._pricing_plan_id

    @pricing_plan_id.setter
    def pricing_plan_id(self, pricing_plan_id):
        """Sets the pricing_plan_id of this CalculateCalculateRequest.


        :param pricing_plan_id: The pricing_plan_id of this CalculateCalculateRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and pricing_plan_id is None:
            raise ValueError("Invalid value for `pricing_plan_id`, must not be `None`")  # noqa: E501

        self._pricing_plan_id = pricing_plan_id

    @property
    def user_count(self):
        """Gets the user_count of this CalculateCalculateRequest.  # noqa: E501


        :return: The user_count of this CalculateCalculateRequest.  # noqa: E501
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this CalculateCalculateRequest.


        :param user_count: The user_count of this CalculateCalculateRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and user_count is None:
            raise ValueError("Invalid value for `user_count`, must not be `None`")  # noqa: E501

        self._user_count = user_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(CalculateCalculateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalculateCalculateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CalculateCalculateRequest):
            return True

        return self.to_dict() != other.to_dict()
