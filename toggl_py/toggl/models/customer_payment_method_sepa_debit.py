"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

from __future__ import annotations  # noqa: F401
import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration


class CustomerPaymentMethodSEPADebit:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {"bank_code": "str", "country": "str", "last4": "str"}

    attribute_map = {"bank_code": "bank_code", "country": "country", "last4": "last4"}

    def __init__(
        self, bank_code: str = None, country: str = None, last4: str = None, _configuration: Configuration = None  # noqa: E501
    ):
        """
        CustomerPaymentMethodSEPADebit - a model defined in Swagger

        Parameters:
          bank_code (str): Optional
          country (str): Optional
          last4 (str): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bank_code = None
        self._country = None
        self._last4 = None
        self.discriminator = None

        if bank_code is not None:
            self.bank_code = bank_code
        if country is not None:
            self.country = country
        if last4 is not None:
            self.last4 = last4

    @property
    def bank_code(self) -> str:
        """Gets the bank_code of this CustomerPaymentMethodSEPADebit.  # noqa: E501


        :return: The bank_code of this CustomerPaymentMethodSEPADebit.  # noqa: E501
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code: str):
        """Sets the bank_code of this CustomerPaymentMethodSEPADebit.


        :param bank_code: The bank_code of this CustomerPaymentMethodSEPADebit.  # noqa: E501
        :type: str
        """

        self._bank_code = bank_code

    @property
    def country(self) -> str:
        """Gets the country of this CustomerPaymentMethodSEPADebit.  # noqa: E501


        :return: The country of this CustomerPaymentMethodSEPADebit.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this CustomerPaymentMethodSEPADebit.


        :param country: The country of this CustomerPaymentMethodSEPADebit.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def last4(self) -> str:
        """Gets the last4 of this CustomerPaymentMethodSEPADebit.  # noqa: E501


        :return: The last4 of this CustomerPaymentMethodSEPADebit.  # noqa: E501
        :rtype: str
        """
        return self._last4

    @last4.setter
    def last4(self, last4: str):
        """Sets the last4 of this CustomerPaymentMethodSEPADebit.


        :param last4: The last4 of this CustomerPaymentMethodSEPADebit.  # noqa: E501
        :type: str
        """

        self._last4 = last4

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(CustomerPaymentMethodSEPADebit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerPaymentMethodSEPADebit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomerPaymentMethodSEPADebit):
            return True

        return self.to_dict() != other.to_dict()
