"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

from __future__ import annotations  # noqa: F401
import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from toggl.models.customer_discount_response import CustomerDiscountResponse  # noqa: F401
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from toggl.models.customer_payment_method import CustomerPaymentMethod  # noqa: F401


class CustomerUnifiedCustomerResponse:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "address_line": "str",
        "country_id": "str",
        "currency": "str",
        "customer_name": "str",
        "default_payment_method": "CustomerPaymentMethod",
        "discount": "CustomerDiscountResponse",
        "id": "str",
        "postal_code": "str",
        "site": "str",
        "state": "str",
        "tax_number": "str",
        "toggl_user_email": "str",
        "toggl_user_id": "int",
    }

    attribute_map = {
        "address_line": "address_line",
        "country_id": "country_id",
        "currency": "currency",
        "customer_name": "customer_name",
        "default_payment_method": "default_payment_method",
        "discount": "discount",
        "id": "id",
        "postal_code": "postal_code",
        "site": "site",
        "state": "state",
        "tax_number": "tax_number",
        "toggl_user_email": "toggl_user_email",
        "toggl_user_id": "toggl_user_id",
    }

    def __init__(
        self,
        address_line: str = None,
        country_id: str = None,
        currency: str = None,
        customer_name: str = None,
        default_payment_method: CustomerPaymentMethod = None,
        discount: CustomerDiscountResponse = None,
        id: str = None,
        postal_code: str = None,
        site: str = None,
        state: str = None,
        tax_number: str = None,
        toggl_user_email: str = None,
        toggl_user_id: int = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        CustomerUnifiedCustomerResponse - a model defined in Swagger

        Parameters:
          address_line (str): Optional
          country_id (str): Optional
          currency (str): Optional
          customer_name (str): Optional
          default_payment_method (CustomerPaymentMethod): Optional
          discount (CustomerDiscountResponse): Optional
          id (str): Optional
          postal_code (str): Optional
          site (str): Optional
          state (str): Optional
          tax_number (str): Optional
          toggl_user_email (str): Optional
          toggl_user_id (int): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address_line = None
        self._country_id = None
        self._currency = None
        self._customer_name = None
        self._default_payment_method = None
        self._discount = None
        self._id = None
        self._postal_code = None
        self._site = None
        self._state = None
        self._tax_number = None
        self._toggl_user_email = None
        self._toggl_user_id = None
        self.discriminator = None

        if address_line is not None:
            self.address_line = address_line
        if country_id is not None:
            self.country_id = country_id
        if currency is not None:
            self.currency = currency
        if customer_name is not None:
            self.customer_name = customer_name
        if default_payment_method is not None:
            self.default_payment_method = default_payment_method
        if discount is not None:
            self.discount = discount
        if id is not None:
            self.id = id
        if postal_code is not None:
            self.postal_code = postal_code
        if site is not None:
            self.site = site
        if state is not None:
            self.state = state
        if tax_number is not None:
            self.tax_number = tax_number
        if toggl_user_email is not None:
            self.toggl_user_email = toggl_user_email
        if toggl_user_id is not None:
            self.toggl_user_id = toggl_user_id

    @property
    def address_line(self) -> str:
        """Gets the address_line of this CustomerUnifiedCustomerResponse.  # noqa: E501


        :return: The address_line of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :rtype: str
        """
        return self._address_line

    @address_line.setter
    def address_line(self, address_line: str):
        """Sets the address_line of this CustomerUnifiedCustomerResponse.


        :param address_line: The address_line of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :type: str
        """

        self._address_line = address_line

    @property
    def country_id(self) -> str:
        """Gets the country_id of this CustomerUnifiedCustomerResponse.  # noqa: E501


        :return: The country_id of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :rtype: str
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id: str):
        """Sets the country_id of this CustomerUnifiedCustomerResponse.


        :param country_id: The country_id of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :type: str
        """

        self._country_id = country_id

    @property
    def currency(self) -> str:
        """Gets the currency of this CustomerUnifiedCustomerResponse.  # noqa: E501


        :return: The currency of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this CustomerUnifiedCustomerResponse.


        :param currency: The currency of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def customer_name(self) -> str:
        """Gets the customer_name of this CustomerUnifiedCustomerResponse.  # noqa: E501


        :return: The customer_name of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name: str):
        """Sets the customer_name of this CustomerUnifiedCustomerResponse.


        :param customer_name: The customer_name of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def default_payment_method(self) -> CustomerPaymentMethod:
        """Gets the default_payment_method of this CustomerUnifiedCustomerResponse.  # noqa: E501


        :return: The default_payment_method of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :rtype: CustomerPaymentMethod
        """
        return self._default_payment_method

    @default_payment_method.setter
    def default_payment_method(self, default_payment_method: CustomerPaymentMethod):
        """Sets the default_payment_method of this CustomerUnifiedCustomerResponse.


        :param default_payment_method: The default_payment_method of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :type: CustomerPaymentMethod
        """

        self._default_payment_method = default_payment_method

    @property
    def discount(self) -> CustomerDiscountResponse:
        """Gets the discount of this CustomerUnifiedCustomerResponse.  # noqa: E501


        :return: The discount of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :rtype: CustomerDiscountResponse
        """
        return self._discount

    @discount.setter
    def discount(self, discount: CustomerDiscountResponse):
        """Sets the discount of this CustomerUnifiedCustomerResponse.


        :param discount: The discount of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :type: CustomerDiscountResponse
        """

        self._discount = discount

    @property
    def id(self) -> str:
        """Gets the id of this CustomerUnifiedCustomerResponse.  # noqa: E501


        :return: The id of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this CustomerUnifiedCustomerResponse.


        :param id: The id of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def postal_code(self) -> str:
        """Gets the postal_code of this CustomerUnifiedCustomerResponse.  # noqa: E501


        :return: The postal_code of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code: str):
        """Sets the postal_code of this CustomerUnifiedCustomerResponse.


        :param postal_code: The postal_code of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def site(self) -> str:
        """Gets the site of this CustomerUnifiedCustomerResponse.  # noqa: E501


        :return: The site of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site: str):
        """Sets the site of this CustomerUnifiedCustomerResponse.


        :param site: The site of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :type: str
        """

        self._site = site

    @property
    def state(self) -> str:
        """Gets the state of this CustomerUnifiedCustomerResponse.  # noqa: E501


        :return: The state of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this CustomerUnifiedCustomerResponse.


        :param state: The state of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def tax_number(self) -> str:
        """Gets the tax_number of this CustomerUnifiedCustomerResponse.  # noqa: E501


        :return: The tax_number of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :rtype: str
        """
        return self._tax_number

    @tax_number.setter
    def tax_number(self, tax_number: str):
        """Sets the tax_number of this CustomerUnifiedCustomerResponse.


        :param tax_number: The tax_number of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :type: str
        """

        self._tax_number = tax_number

    @property
    def toggl_user_email(self) -> str:
        """Gets the toggl_user_email of this CustomerUnifiedCustomerResponse.  # noqa: E501


        :return: The toggl_user_email of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :rtype: str
        """
        return self._toggl_user_email

    @toggl_user_email.setter
    def toggl_user_email(self, toggl_user_email: str):
        """Sets the toggl_user_email of this CustomerUnifiedCustomerResponse.


        :param toggl_user_email: The toggl_user_email of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :type: str
        """

        self._toggl_user_email = toggl_user_email

    @property
    def toggl_user_id(self) -> int:
        """Gets the toggl_user_id of this CustomerUnifiedCustomerResponse.  # noqa: E501


        :return: The toggl_user_id of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :rtype: int
        """
        return self._toggl_user_id

    @toggl_user_id.setter
    def toggl_user_id(self, toggl_user_id: int):
        """Sets the toggl_user_id of this CustomerUnifiedCustomerResponse.


        :param toggl_user_id: The toggl_user_id of this CustomerUnifiedCustomerResponse.  # noqa: E501
        :type: int
        """

        self._toggl_user_id = toggl_user_id

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(CustomerUnifiedCustomerResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerUnifiedCustomerResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomerUnifiedCustomerResponse):
            return True

        return self.to_dict() != other.to_dict()
