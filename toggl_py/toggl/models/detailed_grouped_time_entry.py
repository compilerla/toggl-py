"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration
from toggl.models.detailed_single_time_entry import DetailedSingleTimeEntry  # noqa: F401


class DetailedGroupedTimeEntry:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "billable": "bool",
        "billable_amount_in_cents": "int",
        "client_name": "str",
        "currency": "str",
        "description": "str",
        "email": "str",
        "hourly_rate_in_cents": "int",
        "project_color": "str",
        "project_hex": "str",
        "project_id": "int",
        "project_name": "str",
        "row_number": "int",
        "tag_ids": "list[int]",
        "tag_names": "list[str]",
        "task_id": "int",
        "task_name": "str",
        "time_entries": "list[DetailedSingleTimeEntry]",
        "user_id": "int",
        "username": "str",
    }

    attribute_map = {
        "billable": "billable",
        "billable_amount_in_cents": "billable_amount_in_cents",
        "client_name": "client_name",
        "currency": "currency",
        "description": "description",
        "email": "email",
        "hourly_rate_in_cents": "hourly_rate_in_cents",
        "project_color": "project_color",
        "project_hex": "project_hex",
        "project_id": "project_id",
        "project_name": "project_name",
        "row_number": "row_number",
        "tag_ids": "tag_ids",
        "tag_names": "tag_names",
        "task_id": "task_id",
        "task_name": "task_name",
        "time_entries": "time_entries",
        "user_id": "user_id",
        "username": "username",
    }

    def __init__(
        self,
        billable: bool = None,
        billable_amount_in_cents: int = None,
        client_name: str = None,
        currency: str = None,
        description: str = None,
        email: str = None,
        hourly_rate_in_cents: int = None,
        project_color: str = None,
        project_hex: str = None,
        project_id: int = None,
        project_name: str = None,
        row_number: int = None,
        tag_ids: list[int] = None,
        tag_names: list[str] = None,
        task_id: int = None,
        task_name: str = None,
        time_entries: list[DetailedSingleTimeEntry] = None,
        user_id: int = None,
        username: str = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        DetailedGroupedTimeEntry - a model defined in Swagger

        Parameters:
          billable (bool): Optional
          billable_amount_in_cents (int): Optional
          client_name (str): Optional
          currency (str): Optional
          description (str): Optional
          email (str): Optional
          hourly_rate_in_cents (int): Optional
          project_color (str): Optional
          project_hex (str): Optional
          project_id (int): Optional
          project_name (str): Optional
          row_number (int): Optional
          tag_ids (list[int]): Optional
          tag_names (list[str]): Optional
          task_id (int): Optional
          task_name (str): Optional
          time_entries (list[DetailedSingleTimeEntry]): Optional
          user_id (int): Optional
          username (str): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._billable = None
        self._billable_amount_in_cents = None
        self._client_name = None
        self._currency = None
        self._description = None
        self._email = None
        self._hourly_rate_in_cents = None
        self._project_color = None
        self._project_hex = None
        self._project_id = None
        self._project_name = None
        self._row_number = None
        self._tag_ids = None
        self._tag_names = None
        self._task_id = None
        self._task_name = None
        self._time_entries = None
        self._user_id = None
        self._username = None
        self.discriminator = None

        if billable is not None:
            self.billable = billable
        if billable_amount_in_cents is not None:
            self.billable_amount_in_cents = billable_amount_in_cents
        if client_name is not None:
            self.client_name = client_name
        if currency is not None:
            self.currency = currency
        if description is not None:
            self.description = description
        if email is not None:
            self.email = email
        if hourly_rate_in_cents is not None:
            self.hourly_rate_in_cents = hourly_rate_in_cents
        if project_color is not None:
            self.project_color = project_color
        if project_hex is not None:
            self.project_hex = project_hex
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if row_number is not None:
            self.row_number = row_number
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if tag_names is not None:
            self.tag_names = tag_names
        if task_id is not None:
            self.task_id = task_id
        if task_name is not None:
            self.task_name = task_name
        if time_entries is not None:
            self.time_entries = time_entries
        if user_id is not None:
            self.user_id = user_id
        if username is not None:
            self.username = username

    @property
    def billable(self) -> bool:
        """Gets the billable of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The billable of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: bool
        """
        return self._billable

    @billable.setter
    def billable(self, billable: bool):
        """Sets the billable of this DetailedGroupedTimeEntry.


        :param billable: The billable of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: bool
        """

        self._billable = billable

    @property
    def billable_amount_in_cents(self) -> int:
        """Gets the billable_amount_in_cents of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The billable_amount_in_cents of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._billable_amount_in_cents

    @billable_amount_in_cents.setter
    def billable_amount_in_cents(self, billable_amount_in_cents: int):
        """Sets the billable_amount_in_cents of this DetailedGroupedTimeEntry.


        :param billable_amount_in_cents: The billable_amount_in_cents of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: int
        """

        self._billable_amount_in_cents = billable_amount_in_cents

    @property
    def client_name(self) -> str:
        """Gets the client_name of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The client_name of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name: str):
        """Sets the client_name of this DetailedGroupedTimeEntry.


        :param client_name: The client_name of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def currency(self) -> str:
        """Gets the currency of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The currency of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this DetailedGroupedTimeEntry.


        :param currency: The currency of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def description(self) -> str:
        """Gets the description of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The description of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this DetailedGroupedTimeEntry.


        :param description: The description of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def email(self) -> str:
        """Gets the email of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The email of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this DetailedGroupedTimeEntry.


        :param email: The email of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def hourly_rate_in_cents(self) -> int:
        """Gets the hourly_rate_in_cents of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The hourly_rate_in_cents of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._hourly_rate_in_cents

    @hourly_rate_in_cents.setter
    def hourly_rate_in_cents(self, hourly_rate_in_cents: int):
        """Sets the hourly_rate_in_cents of this DetailedGroupedTimeEntry.


        :param hourly_rate_in_cents: The hourly_rate_in_cents of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: int
        """

        self._hourly_rate_in_cents = hourly_rate_in_cents

    @property
    def project_color(self) -> str:
        """Gets the project_color of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The project_color of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._project_color

    @project_color.setter
    def project_color(self, project_color: str):
        """Sets the project_color of this DetailedGroupedTimeEntry.


        :param project_color: The project_color of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: str
        """

        self._project_color = project_color

    @property
    def project_hex(self) -> str:
        """Gets the project_hex of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The project_hex of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._project_hex

    @project_hex.setter
    def project_hex(self, project_hex: str):
        """Sets the project_hex of this DetailedGroupedTimeEntry.


        :param project_hex: The project_hex of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: str
        """

        self._project_hex = project_hex

    @property
    def project_id(self) -> int:
        """Gets the project_id of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The project_id of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: int):
        """Sets the project_id of this DetailedGroupedTimeEntry.


        :param project_id: The project_id of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def project_name(self) -> str:
        """Gets the project_name of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The project_name of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name: str):
        """Sets the project_name of this DetailedGroupedTimeEntry.


        :param project_name: The project_name of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def row_number(self) -> int:
        """Gets the row_number of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The row_number of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._row_number

    @row_number.setter
    def row_number(self, row_number: int):
        """Sets the row_number of this DetailedGroupedTimeEntry.


        :param row_number: The row_number of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: int
        """

        self._row_number = row_number

    @property
    def tag_ids(self) -> list[int]:
        """Gets the tag_ids of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The tag_ids of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids: list[int]):
        """Sets the tag_ids of this DetailedGroupedTimeEntry.


        :param tag_ids: The tag_ids of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def tag_names(self) -> list[str]:
        """Gets the tag_names of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The tag_names of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag_names

    @tag_names.setter
    def tag_names(self, tag_names: list[str]):
        """Sets the tag_names of this DetailedGroupedTimeEntry.


        :param tag_names: The tag_names of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: list[str]
        """

        self._tag_names = tag_names

    @property
    def task_id(self) -> int:
        """Gets the task_id of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The task_id of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id: int):
        """Sets the task_id of this DetailedGroupedTimeEntry.


        :param task_id: The task_id of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def task_name(self) -> str:
        """Gets the task_name of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The task_name of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name: str):
        """Sets the task_name of this DetailedGroupedTimeEntry.


        :param task_name: The task_name of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def time_entries(self) -> list[DetailedSingleTimeEntry]:
        """Gets the time_entries of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The time_entries of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: list[DetailedSingleTimeEntry]
        """
        return self._time_entries

    @time_entries.setter
    def time_entries(self, time_entries: list[DetailedSingleTimeEntry]):
        """Sets the time_entries of this DetailedGroupedTimeEntry.


        :param time_entries: The time_entries of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: list[DetailedSingleTimeEntry]
        """

        self._time_entries = time_entries

    @property
    def user_id(self) -> int:
        """Gets the user_id of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The user_id of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this DetailedGroupedTimeEntry.


        :param user_id: The user_id of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def username(self) -> str:
        """Gets the username of this DetailedGroupedTimeEntry.  # noqa: E501


        :return: The username of this DetailedGroupedTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this DetailedGroupedTimeEntry.


        :param username: The username of this DetailedGroupedTimeEntry.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(DetailedGroupedTimeEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetailedGroupedTimeEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DetailedGroupedTimeEntry):
            return True

        return self.to_dict() != other.to_dict()
