"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration
from toggl.models.dto_filter_request import DtoFilterRequest  # noqa: F401


class DtoFilterRequest:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
      conditions (list[DtoFilterRequest]) = None

      operator (str) = None

      _property (str) = None
    """

    swagger_types = {"conditions": "list[DtoFilterRequest]", "operator": "str", "_property": "str"}

    attribute_map = {"conditions": "conditions", "operator": "operator", "_property": "property"}

    def __init__(
        self,
        conditions: list[DtoFilterRequest] = None,
        operator: str = None,
        _property: str = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """DtoFilterRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._conditions = None
        self._operator = None
        self.__property = None
        self.discriminator = None

        if conditions is not None:
            self.conditions = conditions
        if operator is not None:
            self.operator = operator
        if _property is not None:
            self._property = _property

    @property
    def conditions(self) -> list[DtoFilterRequest]:
        """Gets the conditions of this DtoFilterRequest.  # noqa: E501


        :return: The conditions of this DtoFilterRequest.  # noqa: E501
        :rtype: list[DtoFilterRequest]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions: list[DtoFilterRequest]):
        """Sets the conditions of this DtoFilterRequest.


        :param conditions: The conditions of this DtoFilterRequest.  # noqa: E501
        :type: list[DtoFilterRequest]
        """

        self._conditions = conditions

    @property
    def operator(self) -> str:
        """Gets the operator of this DtoFilterRequest.  # noqa: E501


        :return: The operator of this DtoFilterRequest.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator: str):
        """Sets the operator of this DtoFilterRequest.


        :param operator: The operator of this DtoFilterRequest.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def _property(self) -> str:
        """Gets the _property of this DtoFilterRequest.  # noqa: E501


        :return: The _property of this DtoFilterRequest.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property: str):
        """Sets the _property of this DtoFilterRequest.


        :param _property: The _property of this DtoFilterRequest.  # noqa: E501
        :type: str
        """

        self.__property = _property

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(DtoFilterRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DtoFilterRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DtoFilterRequest):
            return True

        return self.to_dict() != other.to_dict()
