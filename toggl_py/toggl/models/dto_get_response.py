"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class DtoGetResponse:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "amount": "float",
        "created_at": "str",
        "deleted_at": "str",
        "end": "str",
        "id": "int",
        "project_id": "int",
        "project_user_id": "int",
        "start": "str",
        "updated_at": "str",
        "workspace_id": "int",
        "workspace_user_id": "int",
    }

    attribute_map = {
        "amount": "amount",
        "created_at": "created_at",
        "deleted_at": "deleted_at",
        "end": "end",
        "id": "id",
        "project_id": "project_id",
        "project_user_id": "project_user_id",
        "start": "start",
        "updated_at": "updated_at",
        "workspace_id": "workspace_id",
        "workspace_user_id": "workspace_user_id",
    }

    def __init__(
        self,
        amount=None,
        created_at=None,
        deleted_at=None,
        end=None,
        id=None,
        project_id=None,
        project_user_id=None,
        start=None,
        updated_at=None,
        workspace_id=None,
        workspace_user_id=None,
        _configuration=None,
    ):  # noqa: E501
        """DtoGetResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._amount = None
        self._created_at = None
        self._deleted_at = None
        self._end = None
        self._id = None
        self._project_id = None
        self._project_user_id = None
        self._start = None
        self._updated_at = None
        self._workspace_id = None
        self._workspace_user_id = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if created_at is not None:
            self.created_at = created_at
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if end is not None:
            self.end = end
        if id is not None:
            self.id = id
        if project_id is not None:
            self.project_id = project_id
        if project_user_id is not None:
            self.project_user_id = project_user_id
        if start is not None:
            self.start = start
        if updated_at is not None:
            self.updated_at = updated_at
        if workspace_id is not None:
            self.workspace_id = workspace_id
        if workspace_user_id is not None:
            self.workspace_user_id = workspace_user_id

    @property
    def amount(self):
        """Gets the amount of this DtoGetResponse.  # noqa: E501

        Amount of the rate  # noqa: E501

        :return: The amount of this DtoGetResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DtoGetResponse.

        Amount of the rate  # noqa: E501

        :param amount: The amount of this DtoGetResponse.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def created_at(self):
        """Gets the created_at of this DtoGetResponse.  # noqa: E501

        Creation date of the rate  # noqa: E501

        :return: The created_at of this DtoGetResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DtoGetResponse.

        Creation date of the rate  # noqa: E501

        :param created_at: The created_at of this DtoGetResponse.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this DtoGetResponse.  # noqa: E501

        Deletion date of the rate, in case that is null it means the rates is active  # noqa: E501

        :return: The deleted_at of this DtoGetResponse.  # noqa: E501
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this DtoGetResponse.

        Deletion date of the rate, in case that is null it means the rates is active  # noqa: E501

        :param deleted_at: The deleted_at of this DtoGetResponse.  # noqa: E501
        :type: str
        """

        self._deleted_at = deleted_at

    @property
    def end(self):
        """Gets the end of this DtoGetResponse.  # noqa: E501

        End date time of the rate  # noqa: E501

        :return: The end of this DtoGetResponse.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this DtoGetResponse.

        End date time of the rate  # noqa: E501

        :param end: The end of this DtoGetResponse.  # noqa: E501
        :type: str
        """

        self._end = end

    @property
    def id(self):
        """Gets the id of this DtoGetResponse.  # noqa: E501

        Identifier of the rate  # noqa: E501

        :return: The id of this DtoGetResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DtoGetResponse.

        Identifier of the rate  # noqa: E501

        :param id: The id of this DtoGetResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this DtoGetResponse.  # noqa: E501

        Project ID which the rate is applied  # noqa: E501

        :return: The project_id of this DtoGetResponse.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this DtoGetResponse.

        Project ID which the rate is applied  # noqa: E501

        :param project_id: The project_id of this DtoGetResponse.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def project_user_id(self):
        """Gets the project_user_id of this DtoGetResponse.  # noqa: E501

        Project user ID which the rate is applied  # noqa: E501

        :return: The project_user_id of this DtoGetResponse.  # noqa: E501
        :rtype: int
        """
        return self._project_user_id

    @project_user_id.setter
    def project_user_id(self, project_user_id):
        """Sets the project_user_id of this DtoGetResponse.

        Project user ID which the rate is applied  # noqa: E501

        :param project_user_id: The project_user_id of this DtoGetResponse.  # noqa: E501
        :type: int
        """

        self._project_user_id = project_user_id

    @property
    def start(self):
        """Gets the start of this DtoGetResponse.  # noqa: E501

        Start date time of the rate  # noqa: E501

        :return: The start of this DtoGetResponse.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this DtoGetResponse.

        Start date time of the rate  # noqa: E501

        :param start: The start of this DtoGetResponse.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def updated_at(self):
        """Gets the updated_at of this DtoGetResponse.  # noqa: E501

        Last update date of the rate  # noqa: E501

        :return: The updated_at of this DtoGetResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DtoGetResponse.

        Last update date of the rate  # noqa: E501

        :param updated_at: The updated_at of this DtoGetResponse.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def workspace_id(self):
        """Gets the workspace_id of this DtoGetResponse.  # noqa: E501

        Workspace ID which the rate is applied  # noqa: E501

        :return: The workspace_id of this DtoGetResponse.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this DtoGetResponse.

        Workspace ID which the rate is applied  # noqa: E501

        :param workspace_id: The workspace_id of this DtoGetResponse.  # noqa: E501
        :type: int
        """

        self._workspace_id = workspace_id

    @property
    def workspace_user_id(self):
        """Gets the workspace_user_id of this DtoGetResponse.  # noqa: E501

        Workspace user ID which the rate is applied  # noqa: E501

        :return: The workspace_user_id of this DtoGetResponse.  # noqa: E501
        :rtype: int
        """
        return self._workspace_user_id

    @workspace_user_id.setter
    def workspace_user_id(self, workspace_user_id):
        """Sets the workspace_user_id of this DtoGetResponse.

        Workspace user ID which the rate is applied  # noqa: E501

        :param workspace_user_id: The workspace_user_id of this DtoGetResponse.  # noqa: E501
        :type: int
        """

        self._workspace_user_id = workspace_user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(DtoGetResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DtoGetResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DtoGetResponse):
            return True

        return self.to_dict() != other.to_dict()
