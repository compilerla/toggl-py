"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class DtoQueryRequest:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "aggregation_filters": "list[DtoAggFilterRequest]",
        "aggregations": "list[DtoAggregationRequest]",
        "attributes": "list[DtoAttributeRequest]",
        "filters": "list[DtoFilterRequest]",
        "groupings": "list[DtoGroupingRequest]",
        "limit": "int",
        "ordinations": "list[DtoOrdinationRequest]",
        "period": "DtoPeriodRequest",
        "preferences": "object",
        "transformations": "list[DtoTransformationRequest]",
        "v3_query_params": "str",
    }

    attribute_map = {
        "aggregation_filters": "aggregation_filters",
        "aggregations": "aggregations",
        "attributes": "attributes",
        "filters": "filters",
        "groupings": "groupings",
        "limit": "limit",
        "ordinations": "ordinations",
        "period": "period",
        "preferences": "preferences",
        "transformations": "transformations",
        "v3_query_params": "v3_query_params",
    }

    def __init__(
        self,
        aggregation_filters=None,
        aggregations=None,
        attributes=None,
        filters=None,
        groupings=None,
        limit=None,
        ordinations=None,
        period=None,
        preferences=None,
        transformations=None,
        v3_query_params=None,
        _configuration=None,
    ):  # noqa: E501
        """DtoQueryRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._aggregation_filters = None
        self._aggregations = None
        self._attributes = None
        self._filters = None
        self._groupings = None
        self._limit = None
        self._ordinations = None
        self._period = None
        self._preferences = None
        self._transformations = None
        self._v3_query_params = None
        self.discriminator = None

        if aggregation_filters is not None:
            self.aggregation_filters = aggregation_filters
        if aggregations is not None:
            self.aggregations = aggregations
        if attributes is not None:
            self.attributes = attributes
        if filters is not None:
            self.filters = filters
        if groupings is not None:
            self.groupings = groupings
        if limit is not None:
            self.limit = limit
        if ordinations is not None:
            self.ordinations = ordinations
        self.period = period
        if preferences is not None:
            self.preferences = preferences
        if transformations is not None:
            self.transformations = transformations
        if v3_query_params is not None:
            self.v3_query_params = v3_query_params

    @property
    def aggregation_filters(self):
        """Gets the aggregation_filters of this DtoQueryRequest.  # noqa: E501


        :return: The aggregation_filters of this DtoQueryRequest.  # noqa: E501
        :rtype: list[DtoAggFilterRequest]
        """
        return self._aggregation_filters

    @aggregation_filters.setter
    def aggregation_filters(self, aggregation_filters):
        """Sets the aggregation_filters of this DtoQueryRequest.


        :param aggregation_filters: The aggregation_filters of this DtoQueryRequest.  # noqa: E501
        :type: list[DtoAggFilterRequest]
        """

        self._aggregation_filters = aggregation_filters

    @property
    def aggregations(self):
        """Gets the aggregations of this DtoQueryRequest.  # noqa: E501


        :return: The aggregations of this DtoQueryRequest.  # noqa: E501
        :rtype: list[DtoAggregationRequest]
        """
        return self._aggregations

    @aggregations.setter
    def aggregations(self, aggregations):
        """Sets the aggregations of this DtoQueryRequest.


        :param aggregations: The aggregations of this DtoQueryRequest.  # noqa: E501
        :type: list[DtoAggregationRequest]
        """

        self._aggregations = aggregations

    @property
    def attributes(self):
        """Gets the attributes of this DtoQueryRequest.  # noqa: E501


        :return: The attributes of this DtoQueryRequest.  # noqa: E501
        :rtype: list[DtoAttributeRequest]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this DtoQueryRequest.


        :param attributes: The attributes of this DtoQueryRequest.  # noqa: E501
        :type: list[DtoAttributeRequest]
        """

        self._attributes = attributes

    @property
    def filters(self):
        """Gets the filters of this DtoQueryRequest.  # noqa: E501


        :return: The filters of this DtoQueryRequest.  # noqa: E501
        :rtype: list[DtoFilterRequest]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this DtoQueryRequest.


        :param filters: The filters of this DtoQueryRequest.  # noqa: E501
        :type: list[DtoFilterRequest]
        """

        self._filters = filters

    @property
    def groupings(self):
        """Gets the groupings of this DtoQueryRequest.  # noqa: E501


        :return: The groupings of this DtoQueryRequest.  # noqa: E501
        :rtype: list[DtoGroupingRequest]
        """
        return self._groupings

    @groupings.setter
    def groupings(self, groupings):
        """Sets the groupings of this DtoQueryRequest.


        :param groupings: The groupings of this DtoQueryRequest.  # noqa: E501
        :type: list[DtoGroupingRequest]
        """

        self._groupings = groupings

    @property
    def limit(self):
        """Gets the limit of this DtoQueryRequest.  # noqa: E501


        :return: The limit of this DtoQueryRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this DtoQueryRequest.


        :param limit: The limit of this DtoQueryRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def ordinations(self):
        """Gets the ordinations of this DtoQueryRequest.  # noqa: E501


        :return: The ordinations of this DtoQueryRequest.  # noqa: E501
        :rtype: list[DtoOrdinationRequest]
        """
        return self._ordinations

    @ordinations.setter
    def ordinations(self, ordinations):
        """Sets the ordinations of this DtoQueryRequest.


        :param ordinations: The ordinations of this DtoQueryRequest.  # noqa: E501
        :type: list[DtoOrdinationRequest]
        """

        self._ordinations = ordinations

    @property
    def period(self):
        """Gets the period of this DtoQueryRequest.  # noqa: E501


        :return: The period of this DtoQueryRequest.  # noqa: E501
        :rtype: DtoPeriodRequest
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this DtoQueryRequest.


        :param period: The period of this DtoQueryRequest.  # noqa: E501
        :type: DtoPeriodRequest
        """
        if self._configuration.client_side_validation and period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")  # noqa: E501

        self._period = period

    @property
    def preferences(self):
        """Gets the preferences of this DtoQueryRequest.  # noqa: E501


        :return: The preferences of this DtoQueryRequest.  # noqa: E501
        :rtype: object
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this DtoQueryRequest.


        :param preferences: The preferences of this DtoQueryRequest.  # noqa: E501
        :type: object
        """

        self._preferences = preferences

    @property
    def transformations(self):
        """Gets the transformations of this DtoQueryRequest.  # noqa: E501


        :return: The transformations of this DtoQueryRequest.  # noqa: E501
        :rtype: list[DtoTransformationRequest]
        """
        return self._transformations

    @transformations.setter
    def transformations(self, transformations):
        """Sets the transformations of this DtoQueryRequest.


        :param transformations: The transformations of this DtoQueryRequest.  # noqa: E501
        :type: list[DtoTransformationRequest]
        """

        self._transformations = transformations

    @property
    def v3_query_params(self):
        """Gets the v3_query_params of this DtoQueryRequest.  # noqa: E501


        :return: The v3_query_params of this DtoQueryRequest.  # noqa: E501
        :rtype: str
        """
        return self._v3_query_params

    @v3_query_params.setter
    def v3_query_params(self, v3_query_params):
        """Sets the v3_query_params of this DtoQueryRequest.


        :param v3_query_params: The v3_query_params of this DtoQueryRequest.  # noqa: E501
        :type: str
        """

        self._v3_query_params = v3_query_params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(DtoQueryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DtoQueryRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DtoQueryRequest):
            return True

        return self.to_dict() != other.to_dict()
