"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class GoalsCadenceParameter:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "cadence_period": "str",
        "cadences": "list[ModelsGoalCadence]",
        "comparing": "str",
        "created_at": "str",
        "deleted_at": "str",
        "end_date": "str",
        "goal_id": "int",
        "goal_parameter_id": "int",
        "goal_type": "ModelsGoalType",
        "start_date": "str",
        "target_value": "int",
    }

    attribute_map = {
        "cadence_period": "cadence_period",
        "cadences": "cadences",
        "comparing": "comparing",
        "created_at": "created_at",
        "deleted_at": "deleted_at",
        "end_date": "end_date",
        "goal_id": "goal_id",
        "goal_parameter_id": "goal_parameter_id",
        "goal_type": "goal_type",
        "start_date": "start_date",
        "target_value": "target_value",
    }

    def __init__(
        self,
        cadence_period=None,
        cadences=None,
        comparing=None,
        created_at=None,
        deleted_at=None,
        end_date=None,
        goal_id=None,
        goal_parameter_id=None,
        goal_type=None,
        start_date=None,
        target_value=None,
        _configuration=None,
    ):  # noqa: E501
        """GoalsCadenceParameter - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cadence_period = None
        self._cadences = None
        self._comparing = None
        self._created_at = None
        self._deleted_at = None
        self._end_date = None
        self._goal_id = None
        self._goal_parameter_id = None
        self._goal_type = None
        self._start_date = None
        self._target_value = None
        self.discriminator = None

        if cadence_period is not None:
            self.cadence_period = cadence_period
        if cadences is not None:
            self.cadences = cadences
        if comparing is not None:
            self.comparing = comparing
        if created_at is not None:
            self.created_at = created_at
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if end_date is not None:
            self.end_date = end_date
        if goal_id is not None:
            self.goal_id = goal_id
        if goal_parameter_id is not None:
            self.goal_parameter_id = goal_parameter_id
        if goal_type is not None:
            self.goal_type = goal_type
        if start_date is not None:
            self.start_date = start_date
        if target_value is not None:
            self.target_value = target_value

    @property
    def cadence_period(self):
        """Gets the cadence_period of this GoalsCadenceParameter.  # noqa: E501


        :return: The cadence_period of this GoalsCadenceParameter.  # noqa: E501
        :rtype: str
        """
        return self._cadence_period

    @cadence_period.setter
    def cadence_period(self, cadence_period):
        """Sets the cadence_period of this GoalsCadenceParameter.


        :param cadence_period: The cadence_period of this GoalsCadenceParameter.  # noqa: E501
        :type: str
        """

        self._cadence_period = cadence_period

    @property
    def cadences(self):
        """Gets the cadences of this GoalsCadenceParameter.  # noqa: E501


        :return: The cadences of this GoalsCadenceParameter.  # noqa: E501
        :rtype: list[ModelsGoalCadence]
        """
        return self._cadences

    @cadences.setter
    def cadences(self, cadences):
        """Sets the cadences of this GoalsCadenceParameter.


        :param cadences: The cadences of this GoalsCadenceParameter.  # noqa: E501
        :type: list[ModelsGoalCadence]
        """

        self._cadences = cadences

    @property
    def comparing(self):
        """Gets the comparing of this GoalsCadenceParameter.  # noqa: E501


        :return: The comparing of this GoalsCadenceParameter.  # noqa: E501
        :rtype: str
        """
        return self._comparing

    @comparing.setter
    def comparing(self, comparing):
        """Sets the comparing of this GoalsCadenceParameter.


        :param comparing: The comparing of this GoalsCadenceParameter.  # noqa: E501
        :type: str
        """

        self._comparing = comparing

    @property
    def created_at(self):
        """Gets the created_at of this GoalsCadenceParameter.  # noqa: E501


        :return: The created_at of this GoalsCadenceParameter.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GoalsCadenceParameter.


        :param created_at: The created_at of this GoalsCadenceParameter.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this GoalsCadenceParameter.  # noqa: E501


        :return: The deleted_at of this GoalsCadenceParameter.  # noqa: E501
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this GoalsCadenceParameter.


        :param deleted_at: The deleted_at of this GoalsCadenceParameter.  # noqa: E501
        :type: str
        """

        self._deleted_at = deleted_at

    @property
    def end_date(self):
        """Gets the end_date of this GoalsCadenceParameter.  # noqa: E501


        :return: The end_date of this GoalsCadenceParameter.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this GoalsCadenceParameter.


        :param end_date: The end_date of this GoalsCadenceParameter.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def goal_id(self):
        """Gets the goal_id of this GoalsCadenceParameter.  # noqa: E501


        :return: The goal_id of this GoalsCadenceParameter.  # noqa: E501
        :rtype: int
        """
        return self._goal_id

    @goal_id.setter
    def goal_id(self, goal_id):
        """Sets the goal_id of this GoalsCadenceParameter.


        :param goal_id: The goal_id of this GoalsCadenceParameter.  # noqa: E501
        :type: int
        """

        self._goal_id = goal_id

    @property
    def goal_parameter_id(self):
        """Gets the goal_parameter_id of this GoalsCadenceParameter.  # noqa: E501


        :return: The goal_parameter_id of this GoalsCadenceParameter.  # noqa: E501
        :rtype: int
        """
        return self._goal_parameter_id

    @goal_parameter_id.setter
    def goal_parameter_id(self, goal_parameter_id):
        """Sets the goal_parameter_id of this GoalsCadenceParameter.


        :param goal_parameter_id: The goal_parameter_id of this GoalsCadenceParameter.  # noqa: E501
        :type: int
        """

        self._goal_parameter_id = goal_parameter_id

    @property
    def goal_type(self):
        """Gets the goal_type of this GoalsCadenceParameter.  # noqa: E501


        :return: The goal_type of this GoalsCadenceParameter.  # noqa: E501
        :rtype: ModelsGoalType
        """
        return self._goal_type

    @goal_type.setter
    def goal_type(self, goal_type):
        """Sets the goal_type of this GoalsCadenceParameter.


        :param goal_type: The goal_type of this GoalsCadenceParameter.  # noqa: E501
        :type: ModelsGoalType
        """

        self._goal_type = goal_type

    @property
    def start_date(self):
        """Gets the start_date of this GoalsCadenceParameter.  # noqa: E501


        :return: The start_date of this GoalsCadenceParameter.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GoalsCadenceParameter.


        :param start_date: The start_date of this GoalsCadenceParameter.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def target_value(self):
        """Gets the target_value of this GoalsCadenceParameter.  # noqa: E501


        :return: The target_value of this GoalsCadenceParameter.  # noqa: E501
        :rtype: int
        """
        return self._target_value

    @target_value.setter
    def target_value(self, target_value):
        """Sets the target_value of this GoalsCadenceParameter.


        :param target_value: The target_value of this GoalsCadenceParameter.  # noqa: E501
        :type: int
        """

        self._target_value = target_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(GoalsCadenceParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoalsCadenceParameter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GoalsCadenceParameter):
            return True

        return self.to_dict() != other.to_dict()
