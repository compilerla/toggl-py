"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

from __future__ import annotations  # noqa: F401
import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration


class GoalsUpdateParams:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "archive": "bool",
        "description": "str",
        "icon": "int",
        "icon_color": "str",
        "name": "str",
        "target_value": "int",
    }

    attribute_map = {
        "archive": "archive",
        "description": "description",
        "icon": "icon",
        "icon_color": "icon_color",
        "name": "name",
        "target_value": "target_value",
    }

    def __init__(
        self,
        archive: bool = None,
        description: str = None,
        icon: int = None,
        icon_color: str = None,
        name: str = None,
        target_value: int = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        GoalsUpdateParams - a model defined in Swagger

        Parameters:
          archive (bool): Optional
          description (str): Optional
          icon (int): Optional
          icon_color (str): Optional
          name (str): Optional
          target_value (int): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._archive = None
        self._description = None
        self._icon = None
        self._icon_color = None
        self._name = None
        self._target_value = None
        self.discriminator = None

        if archive is not None:
            self.archive = archive
        if description is not None:
            self.description = description
        if icon is not None:
            self.icon = icon
        if icon_color is not None:
            self.icon_color = icon_color
        if name is not None:
            self.name = name
        if target_value is not None:
            self.target_value = target_value

    @property
    def archive(self) -> bool:
        """Gets the archive of this GoalsUpdateParams.  # noqa: E501


        :return: The archive of this GoalsUpdateParams.  # noqa: E501
        :rtype: bool
        """
        return self._archive

    @archive.setter
    def archive(self, archive: bool):
        """Sets the archive of this GoalsUpdateParams.


        :param archive: The archive of this GoalsUpdateParams.  # noqa: E501
        :type: bool
        """

        self._archive = archive

    @property
    def description(self) -> str:
        """Gets the description of this GoalsUpdateParams.  # noqa: E501


        :return: The description of this GoalsUpdateParams.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this GoalsUpdateParams.


        :param description: The description of this GoalsUpdateParams.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def icon(self) -> int:
        """Gets the icon of this GoalsUpdateParams.  # noqa: E501


        :return: The icon of this GoalsUpdateParams.  # noqa: E501
        :rtype: int
        """
        return self._icon

    @icon.setter
    def icon(self, icon: int):
        """Sets the icon of this GoalsUpdateParams.


        :param icon: The icon of this GoalsUpdateParams.  # noqa: E501
        :type: int
        """

        self._icon = icon

    @property
    def icon_color(self) -> str:
        """Gets the icon_color of this GoalsUpdateParams.  # noqa: E501


        :return: The icon_color of this GoalsUpdateParams.  # noqa: E501
        :rtype: str
        """
        return self._icon_color

    @icon_color.setter
    def icon_color(self, icon_color: str):
        """Sets the icon_color of this GoalsUpdateParams.


        :param icon_color: The icon_color of this GoalsUpdateParams.  # noqa: E501
        :type: str
        """

        self._icon_color = icon_color

    @property
    def name(self) -> str:
        """Gets the name of this GoalsUpdateParams.  # noqa: E501


        :return: The name of this GoalsUpdateParams.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this GoalsUpdateParams.


        :param name: The name of this GoalsUpdateParams.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def target_value(self) -> int:
        """Gets the target_value of this GoalsUpdateParams.  # noqa: E501


        :return: The target_value of this GoalsUpdateParams.  # noqa: E501
        :rtype: int
        """
        return self._target_value

    @target_value.setter
    def target_value(self, target_value: int):
        """Sets the target_value of this GoalsUpdateParams.


        :param target_value: The target_value of this GoalsUpdateParams.  # noqa: E501
        :type: int
        """

        self._target_value = target_value

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(GoalsUpdateParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoalsUpdateParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GoalsUpdateParams):
            return True

        return self.to_dict() != other.to_dict()
