"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration
from toggl.models.invitation_info import InvitationInfo  # noqa: F401


class InvitationResult:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {"data": "list[InvitationInfo]", "messages": "list[str]"}

    attribute_map = {"data": "data", "messages": "messages"}

    def __init__(
        self, data: list[InvitationInfo] = None, messages: list[str] = None, _configuration: Configuration = None  # noqa: E501
    ):
        """
        InvitationResult - a model defined in Swagger

        Parameters:
          data (list[InvitationInfo]): Optional
          messages (list[str]): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._data = None
        self._messages = None
        self.discriminator = None

        if data is not None:
            self.data = data
        if messages is not None:
            self.messages = messages

    @property
    def data(self) -> list[InvitationInfo]:
        """Gets the data of this InvitationResult.  # noqa: E501


        :return: The data of this InvitationResult.  # noqa: E501
        :rtype: list[InvitationInfo]
        """
        return self._data

    @data.setter
    def data(self, data: list[InvitationInfo]):
        """Sets the data of this InvitationResult.


        :param data: The data of this InvitationResult.  # noqa: E501
        :type: list[InvitationInfo]
        """

        self._data = data

    @property
    def messages(self) -> list[str]:
        """Gets the messages of this InvitationResult.  # noqa: E501


        :return: The messages of this InvitationResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages: list[str]):
        """Sets the messages of this InvitationResult.


        :param messages: The messages of this InvitationResult.  # noqa: E501
        :type: list[str]
        """

        self._messages = messages

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(InvitationResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvitationResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvitationResult):
            return True

        return self.to_dict() != other.to_dict()
