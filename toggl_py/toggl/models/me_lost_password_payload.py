"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration


class MeLostPasswordPayload:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {"code": "str", "password": "str", "user_id": "int"}

    attribute_map = {"code": "code", "password": "password", "user_id": "user_id"}

    def __init__(
        self, code: str = None, password: str = None, user_id: int = None, _configuration: Configuration = None  # noqa: E501
    ):
        """
        MeLostPasswordPayload - a model defined in Swagger

        Parameters:
          code (str): Optional
          password (str): Optional
          user_id (int): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._code = None
        self._password = None
        self._user_id = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if password is not None:
            self.password = password
        if user_id is not None:
            self.user_id = user_id

    @property
    def code(self) -> str:
        """Gets the code of this MeLostPasswordPayload.  # noqa: E501

        Temporary token to reset password  # noqa: E501

        :return: The code of this MeLostPasswordPayload.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this MeLostPasswordPayload.

        Temporary token to reset password  # noqa: E501

        :param code: The code of this MeLostPasswordPayload.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def password(self) -> str:
        """Gets the password of this MeLostPasswordPayload.  # noqa: E501

        User's new password  # noqa: E501

        :return: The password of this MeLostPasswordPayload.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this MeLostPasswordPayload.

        User's new password  # noqa: E501

        :param password: The password of this MeLostPasswordPayload.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def user_id(self) -> int:
        """Gets the user_id of this MeLostPasswordPayload.  # noqa: E501

        User's ID  # noqa: E501

        :return: The user_id of this MeLostPasswordPayload.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this MeLostPasswordPayload.

        User's ID  # noqa: E501

        :param user_id: The user_id of this MeLostPasswordPayload.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(MeLostPasswordPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MeLostPasswordPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MeLostPasswordPayload):
            return True

        return self.to_dict() != other.to_dict()
