"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration


class MePayload:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "beginning_of_week": "int",
        "country_id": "int",
        "current_password": "str",
        "default_workspace_id": "int",
        "email": "str",
        "fullname": "str",
        "password": "str",
        "timezone": "str",
    }

    attribute_map = {
        "beginning_of_week": "beginning_of_week",
        "country_id": "country_id",
        "current_password": "current_password",
        "default_workspace_id": "default_workspace_id",
        "email": "email",
        "fullname": "fullname",
        "password": "password",
        "timezone": "timezone",
    }

    def __init__(
        self,
        beginning_of_week: int = None,
        country_id: int = None,
        current_password: str = None,
        default_workspace_id: int = None,
        email: str = None,
        fullname: str = None,
        password: str = None,
        timezone: str = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        MePayload - a model defined in Swagger

        Parameters:
          beginning_of_week (int): Optional
          country_id (int): Optional
          current_password (str): Optional
          default_workspace_id (int): Optional
          email (str): Optional
          fullname (str): Optional
          password (str): Optional
          timezone (str): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._beginning_of_week = None
        self._country_id = None
        self._current_password = None
        self._default_workspace_id = None
        self._email = None
        self._fullname = None
        self._password = None
        self._timezone = None
        self.discriminator = None

        if beginning_of_week is not None:
            self.beginning_of_week = beginning_of_week
        if country_id is not None:
            self.country_id = country_id
        if current_password is not None:
            self.current_password = current_password
        if default_workspace_id is not None:
            self.default_workspace_id = default_workspace_id
        if email is not None:
            self.email = email
        if fullname is not None:
            self.fullname = fullname
        if password is not None:
            self.password = password
        if timezone is not None:
            self.timezone = timezone

    @property
    def beginning_of_week(self) -> int:
        """Gets the beginning_of_week of this MePayload.  # noqa: E501

        User's first day of the week. Sunday: 0, Monday:1, etc.  # noqa: E501

        :return: The beginning_of_week of this MePayload.  # noqa: E501
        :rtype: int
        """
        return self._beginning_of_week

    @beginning_of_week.setter
    def beginning_of_week(self, beginning_of_week: int):
        """Sets the beginning_of_week of this MePayload.

        User's first day of the week. Sunday: 0, Monday:1, etc.  # noqa: E501

        :param beginning_of_week: The beginning_of_week of this MePayload.  # noqa: E501
        :type: int
        """

        self._beginning_of_week = beginning_of_week

    @property
    def country_id(self) -> int:
        """Gets the country_id of this MePayload.  # noqa: E501

        User's country ID  # noqa: E501

        :return: The country_id of this MePayload.  # noqa: E501
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id: int):
        """Sets the country_id of this MePayload.

        User's country ID  # noqa: E501

        :param country_id: The country_id of this MePayload.  # noqa: E501
        :type: int
        """

        self._country_id = country_id

    @property
    def current_password(self) -> str:
        """Gets the current_password of this MePayload.  # noqa: E501

        User's current password (used to change the current password)  # noqa: E501

        :return: The current_password of this MePayload.  # noqa: E501
        :rtype: str
        """
        return self._current_password

    @current_password.setter
    def current_password(self, current_password: str):
        """Sets the current_password of this MePayload.

        User's current password (used to change the current password)  # noqa: E501

        :param current_password: The current_password of this MePayload.  # noqa: E501
        :type: str
        """

        self._current_password = current_password

    @property
    def default_workspace_id(self) -> int:
        """Gets the default_workspace_id of this MePayload.  # noqa: E501

        User's default workspace ID  # noqa: E501

        :return: The default_workspace_id of this MePayload.  # noqa: E501
        :rtype: int
        """
        return self._default_workspace_id

    @default_workspace_id.setter
    def default_workspace_id(self, default_workspace_id: int):
        """Sets the default_workspace_id of this MePayload.

        User's default workspace ID  # noqa: E501

        :param default_workspace_id: The default_workspace_id of this MePayload.  # noqa: E501
        :type: int
        """

        self._default_workspace_id = default_workspace_id

    @property
    def email(self) -> str:
        """Gets the email of this MePayload.  # noqa: E501

        User's email address  # noqa: E501

        :return: The email of this MePayload.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this MePayload.

        User's email address  # noqa: E501

        :param email: The email of this MePayload.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def fullname(self) -> str:
        """Gets the fullname of this MePayload.  # noqa: E501

        User's full name  # noqa: E501

        :return: The fullname of this MePayload.  # noqa: E501
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname: str):
        """Sets the fullname of this MePayload.

        User's full name  # noqa: E501

        :param fullname: The fullname of this MePayload.  # noqa: E501
        :type: str
        """

        self._fullname = fullname

    @property
    def password(self) -> str:
        """Gets the password of this MePayload.  # noqa: E501

        User's new password (current one must also be provided)  # noqa: E501

        :return: The password of this MePayload.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this MePayload.

        User's new password (current one must also be provided)  # noqa: E501

        :param password: The password of this MePayload.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def timezone(self) -> str:
        """Gets the timezone of this MePayload.  # noqa: E501

        User's timezone  # noqa: E501

        :return: The timezone of this MePayload.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone: str):
        """Sets the timezone of this MePayload.

        User's timezone  # noqa: E501

        :param timezone: The timezone of this MePayload.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(MePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MePayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MePayload):
            return True

        return self.to_dict() != other.to_dict()
