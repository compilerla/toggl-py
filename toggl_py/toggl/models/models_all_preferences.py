"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ModelsAllPreferences:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "activity_timeline_display_activity": "bool",
        "activity_timeline_grouping_interval": "str",
        "activity_timeline_grouping_method": "str",
        "activity_timeline_recording_level": "str",
        "activity_timeline_sync_events": "bool",
        "alpha_features": "list[ModelsAlphaFeature]",
        "automatic_tagging": "bool",
        "autotracking_enabled": "bool",
        "calendar_snap_duration": "str",
        "calendar_snap_initial_location": "str",
        "calendar_visible_hours_end": "int",
        "calendar_visible_hours_start": "int",
        "calendar_zoom_level": "str",
        "cell_swipe_actions_enabled": "bool",
        "charts_view_type": "str",
        "collapse_detailed_report_entries": "bool",
        "collapse_time_entries": "bool",
        "dashboards_view_type": "str",
        "date_format": "str",
        "decimal_separator": "str",
        "default_project_id": "int",
        "default_task_id": "int",
        "display_density": "str",
        "distinct_rates": "str",
        "duration_format": "str",
        "duration_format_on_timer_duration_field": "bool",
        "edit_popup_integration_timer": "bool",
        "extension_send_error_reports": "bool",
        "extension_send_usage_statistics": "bool",
        "first_seen_business_promo": "int",
        "focus_app_on_time_entry_started": "bool",
        "focus_app_on_time_entry_stopped": "bool",
        "haptic_feedback_enabled": "bool",
        "hide_keyboard_shortcut": "bool",
        "idle_detection_enabled": "bool",
        "idle_detection_interval_in_minutes": "int",
        "inactivity_behavior": "str",
        "is_summary_total_view_visible": "bool",
        "keep_mini_timer_on_top": "bool",
        "keep_window_on_top": "bool",
        "keyboard_increment_timer_page": "int",
        "keyboard_shortcuts_enabled": "bool",
        "macos_auto_tracking_rules": "ModelsMacOSAutoTrackingRules",
        "macos_show_hide_toggl_keyboard_shortcut": "ModelsKeyboardShortcut",
        "macos_stop_continue_keyboard_shortcut": "ModelsKeyboardShortcut",
        "manual_entry_mode": "str",
        "manual_mode": "bool",
        "manual_mode_overlay_seen": "bool",
        "modify_on_start_time_change": "str",
        "offline_mode": "str",
        "pg_time_zone_name": "str",
        "pomodoro_auto_start_break": "bool",
        "pomodoro_auto_start_focus": "bool",
        "pomodoro_break_interval_in_minutes": "int",
        "pomodoro_break_project_id": "int",
        "pomodoro_break_start_sound_enabled": "bool",
        "pomodoro_break_tag_id": "int",
        "pomodoro_countdown_timer": "bool",
        "pomodoro_enabled": "bool",
        "pomodoro_focus_interval_in_minutes": "int",
        "pomodoro_focus_sound": "str",
        "pomodoro_global_sound_enabled": "bool",
        "pomodoro_interval_end_sound": "bool",
        "pomodoro_interval_end_volume": "int",
        "pomodoro_longer_break_duration_in_minutes": "int",
        "pomodoro_prevent_screen_lock": "bool",
        "pomodoro_rounds_before_longer_break": "int",
        "pomodoro_session_start_sound_enabled": "bool",
        "pomodoro_show_notifications": "bool",
        "pomodoro_stop_timer_at_interval_end": "bool",
        "pomodoro_track_breaks_as_time_entries": "bool",
        "project_dashboard_activity_mode": "str",
        "project_shortcut_enabled": "bool",
        "record_timeline": "bool",
        "remember_last_project": "str",
        "reminder_days": "str",
        "reminder_enabled": "bool",
        "reminder_interval_in_minutes": "int",
        "reminder_period": "str",
        "reminder_snoozing_in_minutes": "int",
        "report_rounding": "bool",
        "report_rounding_direction": "str",
        "report_rounding_step_in_minutes": "int",
        "reports_hide_weekends": "bool",
        "running_entry_warning": "str",
        "running_timer_notification_enabled": "bool",
        "seen_follow_modal": "bool",
        "seen_footer_popup": "bool",
        "seen_project_dashboard_overlay": "bool",
        "seen_toggl_button_modal": "bool",
        "send_product_emails": "bool",
        "send_timer_notifications": "bool",
        "send_weekly_report": "bool",
        "show_time_in_title": "bool",
        "show_all_entries": "bool",
        "show_changelog": "bool",
        "show_description_in_menu_bar": "bool",
        "show_dock_icon": "bool",
        "show_events_in_calendar": "bool",
        "show_project_in_menu_bar": "bool",
        "show_qr_scanner": "bool",
        "show_seconds_in_menu_bar": "bool",
        "show_timeline_in_day_view": "bool",
        "show_timer_in_menu_bar": "bool",
        "show_today_total_in_menu_bar": "bool",
        "show_total_billable_hours": "bool",
        "show_weekend_on_timer_page": "bool",
        "show_workouts_in_calendar": "bool",
        "sleep_behaviour": "str",
        "smart_alerts_option": "str",
        "snowball_report_rounding": "str",
        "stack_times_on_manual_mode_after": "str",
        "start_automatically": "bool",
        "start_shortcut_mode": "str",
        "stop_at_specific_time": "bool",
        "stop_automatically": "bool",
        "stop_entry_on_shutdown": "bool",
        "stop_specified_time": "str",
        "stopped_timer_notification_enabled": "bool",
        "suggestions_enabled": "bool",
        "summary_report_amounts": "str",
        "summary_report_distinct_rates": "bool",
        "summary_report_grouping": "str",
        "summary_report_sort_asc": "bool",
        "summary_report_sort_field": "str",
        "summary_report_sub_grouping": "str",
        "summary_total_mode": "str",
        "tags_shortcut_enabled": "bool",
        "theme": "str",
        "time_entry_display_mode": "str",
        "time_entry_ghost_suggestions_enabled": "bool",
        "time_entry_start_stop_input_mode": "str",
        "timeofday_format": "str",
        "timer_view": "str",
        "timer_view_mobile": "str",
        "to_s_accept_needed": "bool",
        "use_mini_timer": "bool",
        "visible_footer": "str",
        "web_time_entry_started": "bool",
        "web_time_entry_stopped": "bool",
        "weekly_report_grouping": "str",
        "weekly_report_value_to_show": "str",
        "windows_auto_tracking_rules": "ModelsWindowsAutoTrackingRules",
        "windows_show_hide_toggl_keyboard_shortcut": "ModelsKeyboardShortcut",
        "windows_stop_continue_keyboard_shortcut": "ModelsKeyboardShortcut",
        "windows_stop_start_keyboard_shortcut": "ModelsKeyboardShortcut",
        "windows_theme": "str",
        "workout_default_project_id": "int",
    }

    attribute_map = {
        "activity_timeline_display_activity": "activity_timeline_display_activity",
        "activity_timeline_grouping_interval": "activity_timeline_grouping_interval",
        "activity_timeline_grouping_method": "activity_timeline_grouping_method",
        "activity_timeline_recording_level": "activity_timeline_recording_level",
        "activity_timeline_sync_events": "activity_timeline_sync_events",
        "alpha_features": "alpha_features",
        "automatic_tagging": "automatic_tagging",
        "autotracking_enabled": "autotracking_enabled",
        "calendar_snap_duration": "calendar_snap_duration",
        "calendar_snap_initial_location": "calendar_snap_initial_location",
        "calendar_visible_hours_end": "calendar_visible_hours_end",
        "calendar_visible_hours_start": "calendar_visible_hours_start",
        "calendar_zoom_level": "calendar_zoom_level",
        "cell_swipe_actions_enabled": "cell_swipe_actions_enabled",
        "charts_view_type": "charts_view_type",
        "collapse_detailed_report_entries": "collapseDetailedReportEntries",
        "collapse_time_entries": "collapseTimeEntries",
        "dashboards_view_type": "dashboards_view_type",
        "date_format": "date_format",
        "decimal_separator": "decimal_separator",
        "default_project_id": "default_project_id",
        "default_task_id": "default_task_id",
        "display_density": "displayDensity",
        "distinct_rates": "distinctRates",
        "duration_format": "duration_format",
        "duration_format_on_timer_duration_field": "duration_format_on_timer_duration_field",
        "edit_popup_integration_timer": "edit_popup_integration_timer",
        "extension_send_error_reports": "extension_send_error_reports",
        "extension_send_usage_statistics": "extension_send_usage_statistics",
        "first_seen_business_promo": "firstSeenBusinessPromo",
        "focus_app_on_time_entry_started": "focus_app_on_time_entry_started",
        "focus_app_on_time_entry_stopped": "focus_app_on_time_entry_stopped",
        "haptic_feedback_enabled": "haptic_feedback_enabled",
        "hide_keyboard_shortcut": "hide_keyboard_shortcut",
        "idle_detection_enabled": "idle_detection_enabled",
        "idle_detection_interval_in_minutes": "idle_detection_interval_in_minutes",
        "inactivity_behavior": "inactivity_behavior",
        "is_summary_total_view_visible": "is_summary_total_view_visible",
        "keep_mini_timer_on_top": "keep_mini_timer_on_top",
        "keep_window_on_top": "keep_window_on_top",
        "keyboard_increment_timer_page": "keyboard_increment_timer_page",
        "keyboard_shortcuts_enabled": "keyboard_shortcuts_enabled",
        "macos_auto_tracking_rules": "macos_auto_tracking_rules",
        "macos_show_hide_toggl_keyboard_shortcut": "macos_show_hide_toggl_keyboard_shortcut",
        "macos_stop_continue_keyboard_shortcut": "macos_stop_continue_keyboard_shortcut",
        "manual_entry_mode": "manualEntryMode",
        "manual_mode": "manualMode",
        "manual_mode_overlay_seen": "manualModeOverlaySeen",
        "modify_on_start_time_change": "modify_on_start_time_change",
        "offline_mode": "offlineMode",
        "pg_time_zone_name": "pg_time_zone_name",
        "pomodoro_auto_start_break": "pomodoro_auto_start_break",
        "pomodoro_auto_start_focus": "pomodoro_auto_start_focus",
        "pomodoro_break_interval_in_minutes": "pomodoro_break_interval_in_minutes",
        "pomodoro_break_project_id": "pomodoro_break_project_id",
        "pomodoro_break_start_sound_enabled": "pomodoro_break_start_sound_enabled",
        "pomodoro_break_tag_id": "pomodoro_break_tag_id",
        "pomodoro_countdown_timer": "pomodoro_countdown_timer",
        "pomodoro_enabled": "pomodoro_enabled",
        "pomodoro_focus_interval_in_minutes": "pomodoro_focus_interval_in_minutes",
        "pomodoro_focus_sound": "pomodoro_focus_sound",
        "pomodoro_global_sound_enabled": "pomodoro_global_sound_enabled",
        "pomodoro_interval_end_sound": "pomodoro_interval_end_sound",
        "pomodoro_interval_end_volume": "pomodoro_interval_end_volume",
        "pomodoro_longer_break_duration_in_minutes": "pomodoro_longer_break_duration_in_minutes",
        "pomodoro_prevent_screen_lock": "pomodoro_prevent_screen_lock",
        "pomodoro_rounds_before_longer_break": "pomodoro_rounds_before_longer_break",
        "pomodoro_session_start_sound_enabled": "pomodoro_session_start_sound_enabled",
        "pomodoro_show_notifications": "pomodoro_show_notifications",
        "pomodoro_stop_timer_at_interval_end": "pomodoro_stop_timer_at_interval_end",
        "pomodoro_track_breaks_as_time_entries": "pomodoro_track_breaks_as_time_entries",
        "project_dashboard_activity_mode": "projectDashboardActivityMode",
        "project_shortcut_enabled": "project_shortcut_enabled",
        "record_timeline": "record_timeline",
        "remember_last_project": "remember_last_project",
        "reminder_days": "reminder_days",
        "reminder_enabled": "reminder_enabled",
        "reminder_interval_in_minutes": "reminder_interval_in_minutes",
        "reminder_period": "reminder_period",
        "reminder_snoozing_in_minutes": "reminder_snoozing_in_minutes",
        "report_rounding": "reportRounding",
        "report_rounding_direction": "reportRoundingDirection",
        "report_rounding_step_in_minutes": "reportRoundingStepInMinutes",
        "reports_hide_weekends": "reportsHideWeekends",
        "running_entry_warning": "running_entry_warning",
        "running_timer_notification_enabled": "running_timer_notification_enabled",
        "seen_follow_modal": "seenFollowModal",
        "seen_footer_popup": "seenFooterPopup",
        "seen_project_dashboard_overlay": "seenProjectDashboardOverlay",
        "seen_toggl_button_modal": "seenTogglButtonModal",
        "send_product_emails": "send_product_emails",
        "send_timer_notifications": "send_timer_notifications",
        "send_weekly_report": "send_weekly_report",
        "show_time_in_title": "showTimeInTitle",
        "show_all_entries": "show_all_entries",
        "show_changelog": "show_changelog",
        "show_description_in_menu_bar": "show_description_in_menu_bar",
        "show_dock_icon": "show_dock_icon",
        "show_events_in_calendar": "show_events_in_calendar",
        "show_project_in_menu_bar": "show_project_in_menu_bar",
        "show_qr_scanner": "show_qr_scanner",
        "show_seconds_in_menu_bar": "show_seconds_in_menu_bar",
        "show_timeline_in_day_view": "show_timeline_in_day_view",
        "show_timer_in_menu_bar": "show_timer_in_menu_bar",
        "show_today_total_in_menu_bar": "show_today_total_in_menu_bar",
        "show_total_billable_hours": "show_total_billable_hours",
        "show_weekend_on_timer_page": "show_weekend_on_timer_page",
        "show_workouts_in_calendar": "show_workouts_in_calendar",
        "sleep_behaviour": "sleep_behaviour",
        "smart_alerts_option": "smart_alerts_option",
        "snowball_report_rounding": "snowballReportRounding",
        "stack_times_on_manual_mode_after": "stack_times_on_manual_mode_after",
        "start_automatically": "start_automatically",
        "start_shortcut_mode": "start_shortcut_mode",
        "stop_at_specific_time": "stop_at_specific_time",
        "stop_automatically": "stop_automatically",
        "stop_entry_on_shutdown": "stop_entry_on_shutdown",
        "stop_specified_time": "stop_specified_time",
        "stopped_timer_notification_enabled": "stopped_timer_notification_enabled",
        "suggestions_enabled": "suggestions_enabled",
        "summary_report_amounts": "summaryReportAmounts",
        "summary_report_distinct_rates": "summaryReportDistinctRates",
        "summary_report_grouping": "summaryReportGrouping",
        "summary_report_sort_asc": "summaryReportSortAsc",
        "summary_report_sort_field": "summaryReportSortField",
        "summary_report_sub_grouping": "summaryReportSubGrouping",
        "summary_total_mode": "summary_total_mode",
        "tags_shortcut_enabled": "tags_shortcut_enabled",
        "theme": "theme",
        "time_entry_display_mode": "time_entry_display_mode",
        "time_entry_ghost_suggestions_enabled": "time_entry_ghost_suggestions_enabled",
        "time_entry_start_stop_input_mode": "time_entry_start_stop_input_mode",
        "timeofday_format": "timeofday_format",
        "timer_view": "timerView",
        "timer_view_mobile": "timerViewMobile",
        "to_s_accept_needed": "toSAcceptNeeded",
        "use_mini_timer": "use_mini_timer",
        "visible_footer": "visibleFooter",
        "web_time_entry_started": "webTimeEntryStarted",
        "web_time_entry_stopped": "webTimeEntryStopped",
        "weekly_report_grouping": "weeklyReportGrouping",
        "weekly_report_value_to_show": "weeklyReportValueToShow",
        "windows_auto_tracking_rules": "windows_auto_tracking_rules",
        "windows_show_hide_toggl_keyboard_shortcut": "windows_show_hide_toggl_keyboard_shortcut",
        "windows_stop_continue_keyboard_shortcut": "windows_stop_continue_keyboard_shortcut",
        "windows_stop_start_keyboard_shortcut": "windows_stop_start_keyboard_shortcut",
        "windows_theme": "windows_theme",
        "workout_default_project_id": "workout_default_project_id",
    }

    def __init__(
        self,
        activity_timeline_display_activity=None,
        activity_timeline_grouping_interval=None,
        activity_timeline_grouping_method=None,
        activity_timeline_recording_level=None,
        activity_timeline_sync_events=None,
        alpha_features=None,
        automatic_tagging=None,
        autotracking_enabled=None,
        calendar_snap_duration=None,
        calendar_snap_initial_location=None,
        calendar_visible_hours_end=None,
        calendar_visible_hours_start=None,
        calendar_zoom_level=None,
        cell_swipe_actions_enabled=None,
        charts_view_type=None,
        collapse_detailed_report_entries=None,
        collapse_time_entries=None,
        dashboards_view_type=None,
        date_format=None,
        decimal_separator=None,
        default_project_id=None,
        default_task_id=None,
        display_density=None,
        distinct_rates=None,
        duration_format=None,
        duration_format_on_timer_duration_field=None,
        edit_popup_integration_timer=None,
        extension_send_error_reports=None,
        extension_send_usage_statistics=None,
        first_seen_business_promo=None,
        focus_app_on_time_entry_started=None,
        focus_app_on_time_entry_stopped=None,
        haptic_feedback_enabled=None,
        hide_keyboard_shortcut=None,
        idle_detection_enabled=None,
        idle_detection_interval_in_minutes=None,
        inactivity_behavior=None,
        is_summary_total_view_visible=None,
        keep_mini_timer_on_top=None,
        keep_window_on_top=None,
        keyboard_increment_timer_page=None,
        keyboard_shortcuts_enabled=None,
        macos_auto_tracking_rules=None,
        macos_show_hide_toggl_keyboard_shortcut=None,
        macos_stop_continue_keyboard_shortcut=None,
        manual_entry_mode=None,
        manual_mode=None,
        manual_mode_overlay_seen=None,
        modify_on_start_time_change=None,
        offline_mode=None,
        pg_time_zone_name=None,
        pomodoro_auto_start_break=None,
        pomodoro_auto_start_focus=None,
        pomodoro_break_interval_in_minutes=None,
        pomodoro_break_project_id=None,
        pomodoro_break_start_sound_enabled=None,
        pomodoro_break_tag_id=None,
        pomodoro_countdown_timer=None,
        pomodoro_enabled=None,
        pomodoro_focus_interval_in_minutes=None,
        pomodoro_focus_sound=None,
        pomodoro_global_sound_enabled=None,
        pomodoro_interval_end_sound=None,
        pomodoro_interval_end_volume=None,
        pomodoro_longer_break_duration_in_minutes=None,
        pomodoro_prevent_screen_lock=None,
        pomodoro_rounds_before_longer_break=None,
        pomodoro_session_start_sound_enabled=None,
        pomodoro_show_notifications=None,
        pomodoro_stop_timer_at_interval_end=None,
        pomodoro_track_breaks_as_time_entries=None,
        project_dashboard_activity_mode=None,
        project_shortcut_enabled=None,
        record_timeline=None,
        remember_last_project=None,
        reminder_days=None,
        reminder_enabled=None,
        reminder_interval_in_minutes=None,
        reminder_period=None,
        reminder_snoozing_in_minutes=None,
        report_rounding=None,
        report_rounding_direction=None,
        report_rounding_step_in_minutes=None,
        reports_hide_weekends=None,
        running_entry_warning=None,
        running_timer_notification_enabled=None,
        seen_follow_modal=None,
        seen_footer_popup=None,
        seen_project_dashboard_overlay=None,
        seen_toggl_button_modal=None,
        send_product_emails=None,
        send_timer_notifications=None,
        send_weekly_report=None,
        show_time_in_title=None,
        show_all_entries=None,
        show_changelog=None,
        show_description_in_menu_bar=None,
        show_dock_icon=None,
        show_events_in_calendar=None,
        show_project_in_menu_bar=None,
        show_qr_scanner=None,
        show_seconds_in_menu_bar=None,
        show_timeline_in_day_view=None,
        show_timer_in_menu_bar=None,
        show_today_total_in_menu_bar=None,
        show_total_billable_hours=None,
        show_weekend_on_timer_page=None,
        show_workouts_in_calendar=None,
        sleep_behaviour=None,
        smart_alerts_option=None,
        snowball_report_rounding=None,
        stack_times_on_manual_mode_after=None,
        start_automatically=None,
        start_shortcut_mode=None,
        stop_at_specific_time=None,
        stop_automatically=None,
        stop_entry_on_shutdown=None,
        stop_specified_time=None,
        stopped_timer_notification_enabled=None,
        suggestions_enabled=None,
        summary_report_amounts=None,
        summary_report_distinct_rates=None,
        summary_report_grouping=None,
        summary_report_sort_asc=None,
        summary_report_sort_field=None,
        summary_report_sub_grouping=None,
        summary_total_mode=None,
        tags_shortcut_enabled=None,
        theme=None,
        time_entry_display_mode=None,
        time_entry_ghost_suggestions_enabled=None,
        time_entry_start_stop_input_mode=None,
        timeofday_format=None,
        timer_view=None,
        timer_view_mobile=None,
        to_s_accept_needed=None,
        use_mini_timer=None,
        visible_footer=None,
        web_time_entry_started=None,
        web_time_entry_stopped=None,
        weekly_report_grouping=None,
        weekly_report_value_to_show=None,
        windows_auto_tracking_rules=None,
        windows_show_hide_toggl_keyboard_shortcut=None,
        windows_stop_continue_keyboard_shortcut=None,
        windows_stop_start_keyboard_shortcut=None,
        windows_theme=None,
        workout_default_project_id=None,
        _configuration=None,
    ):  # noqa: E501
        """ModelsAllPreferences - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._activity_timeline_display_activity = None
        self._activity_timeline_grouping_interval = None
        self._activity_timeline_grouping_method = None
        self._activity_timeline_recording_level = None
        self._activity_timeline_sync_events = None
        self._alpha_features = None
        self._automatic_tagging = None
        self._autotracking_enabled = None
        self._calendar_snap_duration = None
        self._calendar_snap_initial_location = None
        self._calendar_visible_hours_end = None
        self._calendar_visible_hours_start = None
        self._calendar_zoom_level = None
        self._cell_swipe_actions_enabled = None
        self._charts_view_type = None
        self._collapse_detailed_report_entries = None
        self._collapse_time_entries = None
        self._dashboards_view_type = None
        self._date_format = None
        self._decimal_separator = None
        self._default_project_id = None
        self._default_task_id = None
        self._display_density = None
        self._distinct_rates = None
        self._duration_format = None
        self._duration_format_on_timer_duration_field = None
        self._edit_popup_integration_timer = None
        self._extension_send_error_reports = None
        self._extension_send_usage_statistics = None
        self._first_seen_business_promo = None
        self._focus_app_on_time_entry_started = None
        self._focus_app_on_time_entry_stopped = None
        self._haptic_feedback_enabled = None
        self._hide_keyboard_shortcut = None
        self._idle_detection_enabled = None
        self._idle_detection_interval_in_minutes = None
        self._inactivity_behavior = None
        self._is_summary_total_view_visible = None
        self._keep_mini_timer_on_top = None
        self._keep_window_on_top = None
        self._keyboard_increment_timer_page = None
        self._keyboard_shortcuts_enabled = None
        self._macos_auto_tracking_rules = None
        self._macos_show_hide_toggl_keyboard_shortcut = None
        self._macos_stop_continue_keyboard_shortcut = None
        self._manual_entry_mode = None
        self._manual_mode = None
        self._manual_mode_overlay_seen = None
        self._modify_on_start_time_change = None
        self._offline_mode = None
        self._pg_time_zone_name = None
        self._pomodoro_auto_start_break = None
        self._pomodoro_auto_start_focus = None
        self._pomodoro_break_interval_in_minutes = None
        self._pomodoro_break_project_id = None
        self._pomodoro_break_start_sound_enabled = None
        self._pomodoro_break_tag_id = None
        self._pomodoro_countdown_timer = None
        self._pomodoro_enabled = None
        self._pomodoro_focus_interval_in_minutes = None
        self._pomodoro_focus_sound = None
        self._pomodoro_global_sound_enabled = None
        self._pomodoro_interval_end_sound = None
        self._pomodoro_interval_end_volume = None
        self._pomodoro_longer_break_duration_in_minutes = None
        self._pomodoro_prevent_screen_lock = None
        self._pomodoro_rounds_before_longer_break = None
        self._pomodoro_session_start_sound_enabled = None
        self._pomodoro_show_notifications = None
        self._pomodoro_stop_timer_at_interval_end = None
        self._pomodoro_track_breaks_as_time_entries = None
        self._project_dashboard_activity_mode = None
        self._project_shortcut_enabled = None
        self._record_timeline = None
        self._remember_last_project = None
        self._reminder_days = None
        self._reminder_enabled = None
        self._reminder_interval_in_minutes = None
        self._reminder_period = None
        self._reminder_snoozing_in_minutes = None
        self._report_rounding = None
        self._report_rounding_direction = None
        self._report_rounding_step_in_minutes = None
        self._reports_hide_weekends = None
        self._running_entry_warning = None
        self._running_timer_notification_enabled = None
        self._seen_follow_modal = None
        self._seen_footer_popup = None
        self._seen_project_dashboard_overlay = None
        self._seen_toggl_button_modal = None
        self._send_product_emails = None
        self._send_timer_notifications = None
        self._send_weekly_report = None
        self._show_time_in_title = None
        self._show_all_entries = None
        self._show_changelog = None
        self._show_description_in_menu_bar = None
        self._show_dock_icon = None
        self._show_events_in_calendar = None
        self._show_project_in_menu_bar = None
        self._show_qr_scanner = None
        self._show_seconds_in_menu_bar = None
        self._show_timeline_in_day_view = None
        self._show_timer_in_menu_bar = None
        self._show_today_total_in_menu_bar = None
        self._show_total_billable_hours = None
        self._show_weekend_on_timer_page = None
        self._show_workouts_in_calendar = None
        self._sleep_behaviour = None
        self._smart_alerts_option = None
        self._snowball_report_rounding = None
        self._stack_times_on_manual_mode_after = None
        self._start_automatically = None
        self._start_shortcut_mode = None
        self._stop_at_specific_time = None
        self._stop_automatically = None
        self._stop_entry_on_shutdown = None
        self._stop_specified_time = None
        self._stopped_timer_notification_enabled = None
        self._suggestions_enabled = None
        self._summary_report_amounts = None
        self._summary_report_distinct_rates = None
        self._summary_report_grouping = None
        self._summary_report_sort_asc = None
        self._summary_report_sort_field = None
        self._summary_report_sub_grouping = None
        self._summary_total_mode = None
        self._tags_shortcut_enabled = None
        self._theme = None
        self._time_entry_display_mode = None
        self._time_entry_ghost_suggestions_enabled = None
        self._time_entry_start_stop_input_mode = None
        self._timeofday_format = None
        self._timer_view = None
        self._timer_view_mobile = None
        self._to_s_accept_needed = None
        self._use_mini_timer = None
        self._visible_footer = None
        self._web_time_entry_started = None
        self._web_time_entry_stopped = None
        self._weekly_report_grouping = None
        self._weekly_report_value_to_show = None
        self._windows_auto_tracking_rules = None
        self._windows_show_hide_toggl_keyboard_shortcut = None
        self._windows_stop_continue_keyboard_shortcut = None
        self._windows_stop_start_keyboard_shortcut = None
        self._windows_theme = None
        self._workout_default_project_id = None
        self.discriminator = None

        if activity_timeline_display_activity is not None:
            self.activity_timeline_display_activity = activity_timeline_display_activity
        if activity_timeline_grouping_interval is not None:
            self.activity_timeline_grouping_interval = activity_timeline_grouping_interval
        if activity_timeline_grouping_method is not None:
            self.activity_timeline_grouping_method = activity_timeline_grouping_method
        if activity_timeline_recording_level is not None:
            self.activity_timeline_recording_level = activity_timeline_recording_level
        if activity_timeline_sync_events is not None:
            self.activity_timeline_sync_events = activity_timeline_sync_events
        if alpha_features is not None:
            self.alpha_features = alpha_features
        if automatic_tagging is not None:
            self.automatic_tagging = automatic_tagging
        if autotracking_enabled is not None:
            self.autotracking_enabled = autotracking_enabled
        if calendar_snap_duration is not None:
            self.calendar_snap_duration = calendar_snap_duration
        if calendar_snap_initial_location is not None:
            self.calendar_snap_initial_location = calendar_snap_initial_location
        if calendar_visible_hours_end is not None:
            self.calendar_visible_hours_end = calendar_visible_hours_end
        if calendar_visible_hours_start is not None:
            self.calendar_visible_hours_start = calendar_visible_hours_start
        if calendar_zoom_level is not None:
            self.calendar_zoom_level = calendar_zoom_level
        if cell_swipe_actions_enabled is not None:
            self.cell_swipe_actions_enabled = cell_swipe_actions_enabled
        if charts_view_type is not None:
            self.charts_view_type = charts_view_type
        if collapse_detailed_report_entries is not None:
            self.collapse_detailed_report_entries = collapse_detailed_report_entries
        if collapse_time_entries is not None:
            self.collapse_time_entries = collapse_time_entries
        if dashboards_view_type is not None:
            self.dashboards_view_type = dashboards_view_type
        if date_format is not None:
            self.date_format = date_format
        if decimal_separator is not None:
            self.decimal_separator = decimal_separator
        if default_project_id is not None:
            self.default_project_id = default_project_id
        if default_task_id is not None:
            self.default_task_id = default_task_id
        if display_density is not None:
            self.display_density = display_density
        if distinct_rates is not None:
            self.distinct_rates = distinct_rates
        if duration_format is not None:
            self.duration_format = duration_format
        if duration_format_on_timer_duration_field is not None:
            self.duration_format_on_timer_duration_field = duration_format_on_timer_duration_field
        if edit_popup_integration_timer is not None:
            self.edit_popup_integration_timer = edit_popup_integration_timer
        if extension_send_error_reports is not None:
            self.extension_send_error_reports = extension_send_error_reports
        if extension_send_usage_statistics is not None:
            self.extension_send_usage_statistics = extension_send_usage_statistics
        if first_seen_business_promo is not None:
            self.first_seen_business_promo = first_seen_business_promo
        if focus_app_on_time_entry_started is not None:
            self.focus_app_on_time_entry_started = focus_app_on_time_entry_started
        if focus_app_on_time_entry_stopped is not None:
            self.focus_app_on_time_entry_stopped = focus_app_on_time_entry_stopped
        if haptic_feedback_enabled is not None:
            self.haptic_feedback_enabled = haptic_feedback_enabled
        if hide_keyboard_shortcut is not None:
            self.hide_keyboard_shortcut = hide_keyboard_shortcut
        if idle_detection_enabled is not None:
            self.idle_detection_enabled = idle_detection_enabled
        if idle_detection_interval_in_minutes is not None:
            self.idle_detection_interval_in_minutes = idle_detection_interval_in_minutes
        if inactivity_behavior is not None:
            self.inactivity_behavior = inactivity_behavior
        if is_summary_total_view_visible is not None:
            self.is_summary_total_view_visible = is_summary_total_view_visible
        if keep_mini_timer_on_top is not None:
            self.keep_mini_timer_on_top = keep_mini_timer_on_top
        if keep_window_on_top is not None:
            self.keep_window_on_top = keep_window_on_top
        if keyboard_increment_timer_page is not None:
            self.keyboard_increment_timer_page = keyboard_increment_timer_page
        if keyboard_shortcuts_enabled is not None:
            self.keyboard_shortcuts_enabled = keyboard_shortcuts_enabled
        if macos_auto_tracking_rules is not None:
            self.macos_auto_tracking_rules = macos_auto_tracking_rules
        if macos_show_hide_toggl_keyboard_shortcut is not None:
            self.macos_show_hide_toggl_keyboard_shortcut = macos_show_hide_toggl_keyboard_shortcut
        if macos_stop_continue_keyboard_shortcut is not None:
            self.macos_stop_continue_keyboard_shortcut = macos_stop_continue_keyboard_shortcut
        if manual_entry_mode is not None:
            self.manual_entry_mode = manual_entry_mode
        if manual_mode is not None:
            self.manual_mode = manual_mode
        if manual_mode_overlay_seen is not None:
            self.manual_mode_overlay_seen = manual_mode_overlay_seen
        if modify_on_start_time_change is not None:
            self.modify_on_start_time_change = modify_on_start_time_change
        if offline_mode is not None:
            self.offline_mode = offline_mode
        if pg_time_zone_name is not None:
            self.pg_time_zone_name = pg_time_zone_name
        if pomodoro_auto_start_break is not None:
            self.pomodoro_auto_start_break = pomodoro_auto_start_break
        if pomodoro_auto_start_focus is not None:
            self.pomodoro_auto_start_focus = pomodoro_auto_start_focus
        if pomodoro_break_interval_in_minutes is not None:
            self.pomodoro_break_interval_in_minutes = pomodoro_break_interval_in_minutes
        if pomodoro_break_project_id is not None:
            self.pomodoro_break_project_id = pomodoro_break_project_id
        if pomodoro_break_start_sound_enabled is not None:
            self.pomodoro_break_start_sound_enabled = pomodoro_break_start_sound_enabled
        if pomodoro_break_tag_id is not None:
            self.pomodoro_break_tag_id = pomodoro_break_tag_id
        if pomodoro_countdown_timer is not None:
            self.pomodoro_countdown_timer = pomodoro_countdown_timer
        if pomodoro_enabled is not None:
            self.pomodoro_enabled = pomodoro_enabled
        if pomodoro_focus_interval_in_minutes is not None:
            self.pomodoro_focus_interval_in_minutes = pomodoro_focus_interval_in_minutes
        if pomodoro_focus_sound is not None:
            self.pomodoro_focus_sound = pomodoro_focus_sound
        if pomodoro_global_sound_enabled is not None:
            self.pomodoro_global_sound_enabled = pomodoro_global_sound_enabled
        if pomodoro_interval_end_sound is not None:
            self.pomodoro_interval_end_sound = pomodoro_interval_end_sound
        if pomodoro_interval_end_volume is not None:
            self.pomodoro_interval_end_volume = pomodoro_interval_end_volume
        if pomodoro_longer_break_duration_in_minutes is not None:
            self.pomodoro_longer_break_duration_in_minutes = pomodoro_longer_break_duration_in_minutes
        if pomodoro_prevent_screen_lock is not None:
            self.pomodoro_prevent_screen_lock = pomodoro_prevent_screen_lock
        if pomodoro_rounds_before_longer_break is not None:
            self.pomodoro_rounds_before_longer_break = pomodoro_rounds_before_longer_break
        if pomodoro_session_start_sound_enabled is not None:
            self.pomodoro_session_start_sound_enabled = pomodoro_session_start_sound_enabled
        if pomodoro_show_notifications is not None:
            self.pomodoro_show_notifications = pomodoro_show_notifications
        if pomodoro_stop_timer_at_interval_end is not None:
            self.pomodoro_stop_timer_at_interval_end = pomodoro_stop_timer_at_interval_end
        if pomodoro_track_breaks_as_time_entries is not None:
            self.pomodoro_track_breaks_as_time_entries = pomodoro_track_breaks_as_time_entries
        if project_dashboard_activity_mode is not None:
            self.project_dashboard_activity_mode = project_dashboard_activity_mode
        if project_shortcut_enabled is not None:
            self.project_shortcut_enabled = project_shortcut_enabled
        if record_timeline is not None:
            self.record_timeline = record_timeline
        if remember_last_project is not None:
            self.remember_last_project = remember_last_project
        if reminder_days is not None:
            self.reminder_days = reminder_days
        if reminder_enabled is not None:
            self.reminder_enabled = reminder_enabled
        if reminder_interval_in_minutes is not None:
            self.reminder_interval_in_minutes = reminder_interval_in_minutes
        if reminder_period is not None:
            self.reminder_period = reminder_period
        if reminder_snoozing_in_minutes is not None:
            self.reminder_snoozing_in_minutes = reminder_snoozing_in_minutes
        if report_rounding is not None:
            self.report_rounding = report_rounding
        if report_rounding_direction is not None:
            self.report_rounding_direction = report_rounding_direction
        if report_rounding_step_in_minutes is not None:
            self.report_rounding_step_in_minutes = report_rounding_step_in_minutes
        if reports_hide_weekends is not None:
            self.reports_hide_weekends = reports_hide_weekends
        if running_entry_warning is not None:
            self.running_entry_warning = running_entry_warning
        if running_timer_notification_enabled is not None:
            self.running_timer_notification_enabled = running_timer_notification_enabled
        if seen_follow_modal is not None:
            self.seen_follow_modal = seen_follow_modal
        if seen_footer_popup is not None:
            self.seen_footer_popup = seen_footer_popup
        if seen_project_dashboard_overlay is not None:
            self.seen_project_dashboard_overlay = seen_project_dashboard_overlay
        if seen_toggl_button_modal is not None:
            self.seen_toggl_button_modal = seen_toggl_button_modal
        if send_product_emails is not None:
            self.send_product_emails = send_product_emails
        if send_timer_notifications is not None:
            self.send_timer_notifications = send_timer_notifications
        if send_weekly_report is not None:
            self.send_weekly_report = send_weekly_report
        if show_time_in_title is not None:
            self.show_time_in_title = show_time_in_title
        if show_all_entries is not None:
            self.show_all_entries = show_all_entries
        if show_changelog is not None:
            self.show_changelog = show_changelog
        if show_description_in_menu_bar is not None:
            self.show_description_in_menu_bar = show_description_in_menu_bar
        if show_dock_icon is not None:
            self.show_dock_icon = show_dock_icon
        if show_events_in_calendar is not None:
            self.show_events_in_calendar = show_events_in_calendar
        if show_project_in_menu_bar is not None:
            self.show_project_in_menu_bar = show_project_in_menu_bar
        if show_qr_scanner is not None:
            self.show_qr_scanner = show_qr_scanner
        if show_seconds_in_menu_bar is not None:
            self.show_seconds_in_menu_bar = show_seconds_in_menu_bar
        if show_timeline_in_day_view is not None:
            self.show_timeline_in_day_view = show_timeline_in_day_view
        if show_timer_in_menu_bar is not None:
            self.show_timer_in_menu_bar = show_timer_in_menu_bar
        if show_today_total_in_menu_bar is not None:
            self.show_today_total_in_menu_bar = show_today_total_in_menu_bar
        if show_total_billable_hours is not None:
            self.show_total_billable_hours = show_total_billable_hours
        if show_weekend_on_timer_page is not None:
            self.show_weekend_on_timer_page = show_weekend_on_timer_page
        if show_workouts_in_calendar is not None:
            self.show_workouts_in_calendar = show_workouts_in_calendar
        if sleep_behaviour is not None:
            self.sleep_behaviour = sleep_behaviour
        if smart_alerts_option is not None:
            self.smart_alerts_option = smart_alerts_option
        if snowball_report_rounding is not None:
            self.snowball_report_rounding = snowball_report_rounding
        if stack_times_on_manual_mode_after is not None:
            self.stack_times_on_manual_mode_after = stack_times_on_manual_mode_after
        if start_automatically is not None:
            self.start_automatically = start_automatically
        if start_shortcut_mode is not None:
            self.start_shortcut_mode = start_shortcut_mode
        if stop_at_specific_time is not None:
            self.stop_at_specific_time = stop_at_specific_time
        if stop_automatically is not None:
            self.stop_automatically = stop_automatically
        if stop_entry_on_shutdown is not None:
            self.stop_entry_on_shutdown = stop_entry_on_shutdown
        if stop_specified_time is not None:
            self.stop_specified_time = stop_specified_time
        if stopped_timer_notification_enabled is not None:
            self.stopped_timer_notification_enabled = stopped_timer_notification_enabled
        if suggestions_enabled is not None:
            self.suggestions_enabled = suggestions_enabled
        if summary_report_amounts is not None:
            self.summary_report_amounts = summary_report_amounts
        if summary_report_distinct_rates is not None:
            self.summary_report_distinct_rates = summary_report_distinct_rates
        if summary_report_grouping is not None:
            self.summary_report_grouping = summary_report_grouping
        if summary_report_sort_asc is not None:
            self.summary_report_sort_asc = summary_report_sort_asc
        if summary_report_sort_field is not None:
            self.summary_report_sort_field = summary_report_sort_field
        if summary_report_sub_grouping is not None:
            self.summary_report_sub_grouping = summary_report_sub_grouping
        if summary_total_mode is not None:
            self.summary_total_mode = summary_total_mode
        if tags_shortcut_enabled is not None:
            self.tags_shortcut_enabled = tags_shortcut_enabled
        if theme is not None:
            self.theme = theme
        if time_entry_display_mode is not None:
            self.time_entry_display_mode = time_entry_display_mode
        if time_entry_ghost_suggestions_enabled is not None:
            self.time_entry_ghost_suggestions_enabled = time_entry_ghost_suggestions_enabled
        if time_entry_start_stop_input_mode is not None:
            self.time_entry_start_stop_input_mode = time_entry_start_stop_input_mode
        if timeofday_format is not None:
            self.timeofday_format = timeofday_format
        if timer_view is not None:
            self.timer_view = timer_view
        if timer_view_mobile is not None:
            self.timer_view_mobile = timer_view_mobile
        if to_s_accept_needed is not None:
            self.to_s_accept_needed = to_s_accept_needed
        if use_mini_timer is not None:
            self.use_mini_timer = use_mini_timer
        if visible_footer is not None:
            self.visible_footer = visible_footer
        if web_time_entry_started is not None:
            self.web_time_entry_started = web_time_entry_started
        if web_time_entry_stopped is not None:
            self.web_time_entry_stopped = web_time_entry_stopped
        if weekly_report_grouping is not None:
            self.weekly_report_grouping = weekly_report_grouping
        if weekly_report_value_to_show is not None:
            self.weekly_report_value_to_show = weekly_report_value_to_show
        if windows_auto_tracking_rules is not None:
            self.windows_auto_tracking_rules = windows_auto_tracking_rules
        if windows_show_hide_toggl_keyboard_shortcut is not None:
            self.windows_show_hide_toggl_keyboard_shortcut = windows_show_hide_toggl_keyboard_shortcut
        if windows_stop_continue_keyboard_shortcut is not None:
            self.windows_stop_continue_keyboard_shortcut = windows_stop_continue_keyboard_shortcut
        if windows_stop_start_keyboard_shortcut is not None:
            self.windows_stop_start_keyboard_shortcut = windows_stop_start_keyboard_shortcut
        if windows_theme is not None:
            self.windows_theme = windows_theme
        if workout_default_project_id is not None:
            self.workout_default_project_id = workout_default_project_id

    @property
    def activity_timeline_display_activity(self):
        """Gets the activity_timeline_display_activity of this ModelsAllPreferences.  # noqa: E501


        :return: The activity_timeline_display_activity of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._activity_timeline_display_activity

    @activity_timeline_display_activity.setter
    def activity_timeline_display_activity(self, activity_timeline_display_activity):
        """Sets the activity_timeline_display_activity of this ModelsAllPreferences.


        :param activity_timeline_display_activity: The activity_timeline_display_activity of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._activity_timeline_display_activity = activity_timeline_display_activity

    @property
    def activity_timeline_grouping_interval(self):
        """Gets the activity_timeline_grouping_interval of this ModelsAllPreferences.  # noqa: E501


        :return: The activity_timeline_grouping_interval of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._activity_timeline_grouping_interval

    @activity_timeline_grouping_interval.setter
    def activity_timeline_grouping_interval(self, activity_timeline_grouping_interval):
        """Sets the activity_timeline_grouping_interval of this ModelsAllPreferences.


        :param activity_timeline_grouping_interval: The activity_timeline_grouping_interval of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._activity_timeline_grouping_interval = activity_timeline_grouping_interval

    @property
    def activity_timeline_grouping_method(self):
        """Gets the activity_timeline_grouping_method of this ModelsAllPreferences.  # noqa: E501


        :return: The activity_timeline_grouping_method of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._activity_timeline_grouping_method

    @activity_timeline_grouping_method.setter
    def activity_timeline_grouping_method(self, activity_timeline_grouping_method):
        """Sets the activity_timeline_grouping_method of this ModelsAllPreferences.


        :param activity_timeline_grouping_method: The activity_timeline_grouping_method of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._activity_timeline_grouping_method = activity_timeline_grouping_method

    @property
    def activity_timeline_recording_level(self):
        """Gets the activity_timeline_recording_level of this ModelsAllPreferences.  # noqa: E501


        :return: The activity_timeline_recording_level of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._activity_timeline_recording_level

    @activity_timeline_recording_level.setter
    def activity_timeline_recording_level(self, activity_timeline_recording_level):
        """Sets the activity_timeline_recording_level of this ModelsAllPreferences.


        :param activity_timeline_recording_level: The activity_timeline_recording_level of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._activity_timeline_recording_level = activity_timeline_recording_level

    @property
    def activity_timeline_sync_events(self):
        """Gets the activity_timeline_sync_events of this ModelsAllPreferences.  # noqa: E501


        :return: The activity_timeline_sync_events of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._activity_timeline_sync_events

    @activity_timeline_sync_events.setter
    def activity_timeline_sync_events(self, activity_timeline_sync_events):
        """Sets the activity_timeline_sync_events of this ModelsAllPreferences.


        :param activity_timeline_sync_events: The activity_timeline_sync_events of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._activity_timeline_sync_events = activity_timeline_sync_events

    @property
    def alpha_features(self):
        """Gets the alpha_features of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The alpha_features of this ModelsAllPreferences.  # noqa: E501
        :rtype: list[ModelsAlphaFeature]
        """
        return self._alpha_features

    @alpha_features.setter
    def alpha_features(self, alpha_features):
        """Sets the alpha_features of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param alpha_features: The alpha_features of this ModelsAllPreferences.  # noqa: E501
        :type: list[ModelsAlphaFeature]
        """

        self._alpha_features = alpha_features

    @property
    def automatic_tagging(self):
        """Gets the automatic_tagging of this ModelsAllPreferences.  # noqa: E501


        :return: The automatic_tagging of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_tagging

    @automatic_tagging.setter
    def automatic_tagging(self, automatic_tagging):
        """Sets the automatic_tagging of this ModelsAllPreferences.


        :param automatic_tagging: The automatic_tagging of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._automatic_tagging = automatic_tagging

    @property
    def autotracking_enabled(self):
        """Gets the autotracking_enabled of this ModelsAllPreferences.  # noqa: E501


        :return: The autotracking_enabled of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._autotracking_enabled

    @autotracking_enabled.setter
    def autotracking_enabled(self, autotracking_enabled):
        """Sets the autotracking_enabled of this ModelsAllPreferences.


        :param autotracking_enabled: The autotracking_enabled of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._autotracking_enabled = autotracking_enabled

    @property
    def calendar_snap_duration(self):
        """Gets the calendar_snap_duration of this ModelsAllPreferences.  # noqa: E501


        :return: The calendar_snap_duration of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._calendar_snap_duration

    @calendar_snap_duration.setter
    def calendar_snap_duration(self, calendar_snap_duration):
        """Sets the calendar_snap_duration of this ModelsAllPreferences.


        :param calendar_snap_duration: The calendar_snap_duration of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._calendar_snap_duration = calendar_snap_duration

    @property
    def calendar_snap_initial_location(self):
        """Gets the calendar_snap_initial_location of this ModelsAllPreferences.  # noqa: E501


        :return: The calendar_snap_initial_location of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._calendar_snap_initial_location

    @calendar_snap_initial_location.setter
    def calendar_snap_initial_location(self, calendar_snap_initial_location):
        """Sets the calendar_snap_initial_location of this ModelsAllPreferences.


        :param calendar_snap_initial_location: The calendar_snap_initial_location of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._calendar_snap_initial_location = calendar_snap_initial_location

    @property
    def calendar_visible_hours_end(self):
        """Gets the calendar_visible_hours_end of this ModelsAllPreferences.  # noqa: E501


        :return: The calendar_visible_hours_end of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._calendar_visible_hours_end

    @calendar_visible_hours_end.setter
    def calendar_visible_hours_end(self, calendar_visible_hours_end):
        """Sets the calendar_visible_hours_end of this ModelsAllPreferences.


        :param calendar_visible_hours_end: The calendar_visible_hours_end of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._calendar_visible_hours_end = calendar_visible_hours_end

    @property
    def calendar_visible_hours_start(self):
        """Gets the calendar_visible_hours_start of this ModelsAllPreferences.  # noqa: E501


        :return: The calendar_visible_hours_start of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._calendar_visible_hours_start

    @calendar_visible_hours_start.setter
    def calendar_visible_hours_start(self, calendar_visible_hours_start):
        """Sets the calendar_visible_hours_start of this ModelsAllPreferences.


        :param calendar_visible_hours_start: The calendar_visible_hours_start of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._calendar_visible_hours_start = calendar_visible_hours_start

    @property
    def calendar_zoom_level(self):
        """Gets the calendar_zoom_level of this ModelsAllPreferences.  # noqa: E501


        :return: The calendar_zoom_level of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._calendar_zoom_level

    @calendar_zoom_level.setter
    def calendar_zoom_level(self, calendar_zoom_level):
        """Sets the calendar_zoom_level of this ModelsAllPreferences.


        :param calendar_zoom_level: The calendar_zoom_level of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._calendar_zoom_level = calendar_zoom_level

    @property
    def cell_swipe_actions_enabled(self):
        """Gets the cell_swipe_actions_enabled of this ModelsAllPreferences.  # noqa: E501


        :return: The cell_swipe_actions_enabled of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._cell_swipe_actions_enabled

    @cell_swipe_actions_enabled.setter
    def cell_swipe_actions_enabled(self, cell_swipe_actions_enabled):
        """Sets the cell_swipe_actions_enabled of this ModelsAllPreferences.


        :param cell_swipe_actions_enabled: The cell_swipe_actions_enabled of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._cell_swipe_actions_enabled = cell_swipe_actions_enabled

    @property
    def charts_view_type(self):
        """Gets the charts_view_type of this ModelsAllPreferences.  # noqa: E501


        :return: The charts_view_type of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._charts_view_type

    @charts_view_type.setter
    def charts_view_type(self, charts_view_type):
        """Sets the charts_view_type of this ModelsAllPreferences.


        :param charts_view_type: The charts_view_type of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._charts_view_type = charts_view_type

    @property
    def collapse_detailed_report_entries(self):
        """Gets the collapse_detailed_report_entries of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The collapse_detailed_report_entries of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._collapse_detailed_report_entries

    @collapse_detailed_report_entries.setter
    def collapse_detailed_report_entries(self, collapse_detailed_report_entries):
        """Sets the collapse_detailed_report_entries of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param collapse_detailed_report_entries: The collapse_detailed_report_entries of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._collapse_detailed_report_entries = collapse_detailed_report_entries

    @property
    def collapse_time_entries(self):
        """Gets the collapse_time_entries of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The collapse_time_entries of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._collapse_time_entries

    @collapse_time_entries.setter
    def collapse_time_entries(self, collapse_time_entries):
        """Sets the collapse_time_entries of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param collapse_time_entries: The collapse_time_entries of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._collapse_time_entries = collapse_time_entries

    @property
    def dashboards_view_type(self):
        """Gets the dashboards_view_type of this ModelsAllPreferences.  # noqa: E501


        :return: The dashboards_view_type of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._dashboards_view_type

    @dashboards_view_type.setter
    def dashboards_view_type(self, dashboards_view_type):
        """Sets the dashboards_view_type of this ModelsAllPreferences.


        :param dashboards_view_type: The dashboards_view_type of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._dashboards_view_type = dashboards_view_type

    @property
    def date_format(self):
        """Gets the date_format of this ModelsAllPreferences.  # noqa: E501


        :return: The date_format of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this ModelsAllPreferences.


        :param date_format: The date_format of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def decimal_separator(self):
        """Gets the decimal_separator of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The decimal_separator of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._decimal_separator

    @decimal_separator.setter
    def decimal_separator(self, decimal_separator):
        """Sets the decimal_separator of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param decimal_separator: The decimal_separator of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._decimal_separator = decimal_separator

    @property
    def default_project_id(self):
        """Gets the default_project_id of this ModelsAllPreferences.  # noqa: E501


        :return: The default_project_id of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._default_project_id

    @default_project_id.setter
    def default_project_id(self, default_project_id):
        """Sets the default_project_id of this ModelsAllPreferences.


        :param default_project_id: The default_project_id of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._default_project_id = default_project_id

    @property
    def default_task_id(self):
        """Gets the default_task_id of this ModelsAllPreferences.  # noqa: E501


        :return: The default_task_id of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._default_task_id

    @default_task_id.setter
    def default_task_id(self, default_task_id):
        """Sets the default_task_id of this ModelsAllPreferences.


        :param default_task_id: The default_task_id of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._default_task_id = default_task_id

    @property
    def display_density(self):
        """Gets the display_density of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The display_density of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._display_density

    @display_density.setter
    def display_density(self, display_density):
        """Sets the display_density of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param display_density: The display_density of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._display_density = display_density

    @property
    def distinct_rates(self):
        """Gets the distinct_rates of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The distinct_rates of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._distinct_rates

    @distinct_rates.setter
    def distinct_rates(self, distinct_rates):
        """Sets the distinct_rates of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param distinct_rates: The distinct_rates of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._distinct_rates = distinct_rates

    @property
    def duration_format(self):
        """Gets the duration_format of this ModelsAllPreferences.  # noqa: E501


        :return: The duration_format of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._duration_format

    @duration_format.setter
    def duration_format(self, duration_format):
        """Sets the duration_format of this ModelsAllPreferences.


        :param duration_format: The duration_format of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._duration_format = duration_format

    @property
    def duration_format_on_timer_duration_field(self):
        """Gets the duration_format_on_timer_duration_field of this ModelsAllPreferences.  # noqa: E501


        :return: The duration_format_on_timer_duration_field of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._duration_format_on_timer_duration_field

    @duration_format_on_timer_duration_field.setter
    def duration_format_on_timer_duration_field(self, duration_format_on_timer_duration_field):
        """Sets the duration_format_on_timer_duration_field of this ModelsAllPreferences.


        :param duration_format_on_timer_duration_field: The duration_format_on_timer_duration_field of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._duration_format_on_timer_duration_field = duration_format_on_timer_duration_field

    @property
    def edit_popup_integration_timer(self):
        """Gets the edit_popup_integration_timer of this ModelsAllPreferences.  # noqa: E501


        :return: The edit_popup_integration_timer of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._edit_popup_integration_timer

    @edit_popup_integration_timer.setter
    def edit_popup_integration_timer(self, edit_popup_integration_timer):
        """Sets the edit_popup_integration_timer of this ModelsAllPreferences.


        :param edit_popup_integration_timer: The edit_popup_integration_timer of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._edit_popup_integration_timer = edit_popup_integration_timer

    @property
    def extension_send_error_reports(self):
        """Gets the extension_send_error_reports of this ModelsAllPreferences.  # noqa: E501


        :return: The extension_send_error_reports of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._extension_send_error_reports

    @extension_send_error_reports.setter
    def extension_send_error_reports(self, extension_send_error_reports):
        """Sets the extension_send_error_reports of this ModelsAllPreferences.


        :param extension_send_error_reports: The extension_send_error_reports of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._extension_send_error_reports = extension_send_error_reports

    @property
    def extension_send_usage_statistics(self):
        """Gets the extension_send_usage_statistics of this ModelsAllPreferences.  # noqa: E501


        :return: The extension_send_usage_statistics of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._extension_send_usage_statistics

    @extension_send_usage_statistics.setter
    def extension_send_usage_statistics(self, extension_send_usage_statistics):
        """Sets the extension_send_usage_statistics of this ModelsAllPreferences.


        :param extension_send_usage_statistics: The extension_send_usage_statistics of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._extension_send_usage_statistics = extension_send_usage_statistics

    @property
    def first_seen_business_promo(self):
        """Gets the first_seen_business_promo of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The first_seen_business_promo of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._first_seen_business_promo

    @first_seen_business_promo.setter
    def first_seen_business_promo(self, first_seen_business_promo):
        """Sets the first_seen_business_promo of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param first_seen_business_promo: The first_seen_business_promo of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._first_seen_business_promo = first_seen_business_promo

    @property
    def focus_app_on_time_entry_started(self):
        """Gets the focus_app_on_time_entry_started of this ModelsAllPreferences.  # noqa: E501


        :return: The focus_app_on_time_entry_started of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._focus_app_on_time_entry_started

    @focus_app_on_time_entry_started.setter
    def focus_app_on_time_entry_started(self, focus_app_on_time_entry_started):
        """Sets the focus_app_on_time_entry_started of this ModelsAllPreferences.


        :param focus_app_on_time_entry_started: The focus_app_on_time_entry_started of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._focus_app_on_time_entry_started = focus_app_on_time_entry_started

    @property
    def focus_app_on_time_entry_stopped(self):
        """Gets the focus_app_on_time_entry_stopped of this ModelsAllPreferences.  # noqa: E501


        :return: The focus_app_on_time_entry_stopped of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._focus_app_on_time_entry_stopped

    @focus_app_on_time_entry_stopped.setter
    def focus_app_on_time_entry_stopped(self, focus_app_on_time_entry_stopped):
        """Sets the focus_app_on_time_entry_stopped of this ModelsAllPreferences.


        :param focus_app_on_time_entry_stopped: The focus_app_on_time_entry_stopped of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._focus_app_on_time_entry_stopped = focus_app_on_time_entry_stopped

    @property
    def haptic_feedback_enabled(self):
        """Gets the haptic_feedback_enabled of this ModelsAllPreferences.  # noqa: E501


        :return: The haptic_feedback_enabled of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._haptic_feedback_enabled

    @haptic_feedback_enabled.setter
    def haptic_feedback_enabled(self, haptic_feedback_enabled):
        """Sets the haptic_feedback_enabled of this ModelsAllPreferences.


        :param haptic_feedback_enabled: The haptic_feedback_enabled of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._haptic_feedback_enabled = haptic_feedback_enabled

    @property
    def hide_keyboard_shortcut(self):
        """Gets the hide_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The hide_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._hide_keyboard_shortcut

    @hide_keyboard_shortcut.setter
    def hide_keyboard_shortcut(self, hide_keyboard_shortcut):
        """Sets the hide_keyboard_shortcut of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param hide_keyboard_shortcut: The hide_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._hide_keyboard_shortcut = hide_keyboard_shortcut

    @property
    def idle_detection_enabled(self):
        """Gets the idle_detection_enabled of this ModelsAllPreferences.  # noqa: E501


        :return: The idle_detection_enabled of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._idle_detection_enabled

    @idle_detection_enabled.setter
    def idle_detection_enabled(self, idle_detection_enabled):
        """Sets the idle_detection_enabled of this ModelsAllPreferences.


        :param idle_detection_enabled: The idle_detection_enabled of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._idle_detection_enabled = idle_detection_enabled

    @property
    def idle_detection_interval_in_minutes(self):
        """Gets the idle_detection_interval_in_minutes of this ModelsAllPreferences.  # noqa: E501


        :return: The idle_detection_interval_in_minutes of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._idle_detection_interval_in_minutes

    @idle_detection_interval_in_minutes.setter
    def idle_detection_interval_in_minutes(self, idle_detection_interval_in_minutes):
        """Sets the idle_detection_interval_in_minutes of this ModelsAllPreferences.


        :param idle_detection_interval_in_minutes: The idle_detection_interval_in_minutes of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._idle_detection_interval_in_minutes = idle_detection_interval_in_minutes

    @property
    def inactivity_behavior(self):
        """Gets the inactivity_behavior of this ModelsAllPreferences.  # noqa: E501


        :return: The inactivity_behavior of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._inactivity_behavior

    @inactivity_behavior.setter
    def inactivity_behavior(self, inactivity_behavior):
        """Sets the inactivity_behavior of this ModelsAllPreferences.


        :param inactivity_behavior: The inactivity_behavior of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._inactivity_behavior = inactivity_behavior

    @property
    def is_summary_total_view_visible(self):
        """Gets the is_summary_total_view_visible of this ModelsAllPreferences.  # noqa: E501


        :return: The is_summary_total_view_visible of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._is_summary_total_view_visible

    @is_summary_total_view_visible.setter
    def is_summary_total_view_visible(self, is_summary_total_view_visible):
        """Sets the is_summary_total_view_visible of this ModelsAllPreferences.


        :param is_summary_total_view_visible: The is_summary_total_view_visible of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._is_summary_total_view_visible = is_summary_total_view_visible

    @property
    def keep_mini_timer_on_top(self):
        """Gets the keep_mini_timer_on_top of this ModelsAllPreferences.  # noqa: E501


        :return: The keep_mini_timer_on_top of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._keep_mini_timer_on_top

    @keep_mini_timer_on_top.setter
    def keep_mini_timer_on_top(self, keep_mini_timer_on_top):
        """Sets the keep_mini_timer_on_top of this ModelsAllPreferences.


        :param keep_mini_timer_on_top: The keep_mini_timer_on_top of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._keep_mini_timer_on_top = keep_mini_timer_on_top

    @property
    def keep_window_on_top(self):
        """Gets the keep_window_on_top of this ModelsAllPreferences.  # noqa: E501


        :return: The keep_window_on_top of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._keep_window_on_top

    @keep_window_on_top.setter
    def keep_window_on_top(self, keep_window_on_top):
        """Sets the keep_window_on_top of this ModelsAllPreferences.


        :param keep_window_on_top: The keep_window_on_top of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._keep_window_on_top = keep_window_on_top

    @property
    def keyboard_increment_timer_page(self):
        """Gets the keyboard_increment_timer_page of this ModelsAllPreferences.  # noqa: E501


        :return: The keyboard_increment_timer_page of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._keyboard_increment_timer_page

    @keyboard_increment_timer_page.setter
    def keyboard_increment_timer_page(self, keyboard_increment_timer_page):
        """Sets the keyboard_increment_timer_page of this ModelsAllPreferences.


        :param keyboard_increment_timer_page: The keyboard_increment_timer_page of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._keyboard_increment_timer_page = keyboard_increment_timer_page

    @property
    def keyboard_shortcuts_enabled(self):
        """Gets the keyboard_shortcuts_enabled of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The keyboard_shortcuts_enabled of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._keyboard_shortcuts_enabled

    @keyboard_shortcuts_enabled.setter
    def keyboard_shortcuts_enabled(self, keyboard_shortcuts_enabled):
        """Sets the keyboard_shortcuts_enabled of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param keyboard_shortcuts_enabled: The keyboard_shortcuts_enabled of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._keyboard_shortcuts_enabled = keyboard_shortcuts_enabled

    @property
    def macos_auto_tracking_rules(self):
        """Gets the macos_auto_tracking_rules of this ModelsAllPreferences.  # noqa: E501


        :return: The macos_auto_tracking_rules of this ModelsAllPreferences.  # noqa: E501
        :rtype: ModelsMacOSAutoTrackingRules
        """
        return self._macos_auto_tracking_rules

    @macos_auto_tracking_rules.setter
    def macos_auto_tracking_rules(self, macos_auto_tracking_rules):
        """Sets the macos_auto_tracking_rules of this ModelsAllPreferences.


        :param macos_auto_tracking_rules: The macos_auto_tracking_rules of this ModelsAllPreferences.  # noqa: E501
        :type: ModelsMacOSAutoTrackingRules
        """

        self._macos_auto_tracking_rules = macos_auto_tracking_rules

    @property
    def macos_show_hide_toggl_keyboard_shortcut(self):
        """Gets the macos_show_hide_toggl_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501


        :return: The macos_show_hide_toggl_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501
        :rtype: ModelsKeyboardShortcut
        """
        return self._macos_show_hide_toggl_keyboard_shortcut

    @macos_show_hide_toggl_keyboard_shortcut.setter
    def macos_show_hide_toggl_keyboard_shortcut(self, macos_show_hide_toggl_keyboard_shortcut):
        """Sets the macos_show_hide_toggl_keyboard_shortcut of this ModelsAllPreferences.


        :param macos_show_hide_toggl_keyboard_shortcut: The macos_show_hide_toggl_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501
        :type: ModelsKeyboardShortcut
        """

        self._macos_show_hide_toggl_keyboard_shortcut = macos_show_hide_toggl_keyboard_shortcut

    @property
    def macos_stop_continue_keyboard_shortcut(self):
        """Gets the macos_stop_continue_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501


        :return: The macos_stop_continue_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501
        :rtype: ModelsKeyboardShortcut
        """
        return self._macos_stop_continue_keyboard_shortcut

    @macos_stop_continue_keyboard_shortcut.setter
    def macos_stop_continue_keyboard_shortcut(self, macos_stop_continue_keyboard_shortcut):
        """Sets the macos_stop_continue_keyboard_shortcut of this ModelsAllPreferences.


        :param macos_stop_continue_keyboard_shortcut: The macos_stop_continue_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501
        :type: ModelsKeyboardShortcut
        """

        self._macos_stop_continue_keyboard_shortcut = macos_stop_continue_keyboard_shortcut

    @property
    def manual_entry_mode(self):
        """Gets the manual_entry_mode of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The manual_entry_mode of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._manual_entry_mode

    @manual_entry_mode.setter
    def manual_entry_mode(self, manual_entry_mode):
        """Sets the manual_entry_mode of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param manual_entry_mode: The manual_entry_mode of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._manual_entry_mode = manual_entry_mode

    @property
    def manual_mode(self):
        """Gets the manual_mode of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The manual_mode of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._manual_mode

    @manual_mode.setter
    def manual_mode(self, manual_mode):
        """Sets the manual_mode of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param manual_mode: The manual_mode of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._manual_mode = manual_mode

    @property
    def manual_mode_overlay_seen(self):
        """Gets the manual_mode_overlay_seen of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The manual_mode_overlay_seen of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._manual_mode_overlay_seen

    @manual_mode_overlay_seen.setter
    def manual_mode_overlay_seen(self, manual_mode_overlay_seen):
        """Sets the manual_mode_overlay_seen of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param manual_mode_overlay_seen: The manual_mode_overlay_seen of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._manual_mode_overlay_seen = manual_mode_overlay_seen

    @property
    def modify_on_start_time_change(self):
        """Gets the modify_on_start_time_change of this ModelsAllPreferences.  # noqa: E501


        :return: The modify_on_start_time_change of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._modify_on_start_time_change

    @modify_on_start_time_change.setter
    def modify_on_start_time_change(self, modify_on_start_time_change):
        """Sets the modify_on_start_time_change of this ModelsAllPreferences.


        :param modify_on_start_time_change: The modify_on_start_time_change of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._modify_on_start_time_change = modify_on_start_time_change

    @property
    def offline_mode(self):
        """Gets the offline_mode of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The offline_mode of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._offline_mode

    @offline_mode.setter
    def offline_mode(self, offline_mode):
        """Sets the offline_mode of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param offline_mode: The offline_mode of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._offline_mode = offline_mode

    @property
    def pg_time_zone_name(self):
        """Gets the pg_time_zone_name of this ModelsAllPreferences.  # noqa: E501


        :return: The pg_time_zone_name of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._pg_time_zone_name

    @pg_time_zone_name.setter
    def pg_time_zone_name(self, pg_time_zone_name):
        """Sets the pg_time_zone_name of this ModelsAllPreferences.


        :param pg_time_zone_name: The pg_time_zone_name of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._pg_time_zone_name = pg_time_zone_name

    @property
    def pomodoro_auto_start_break(self):
        """Gets the pomodoro_auto_start_break of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_auto_start_break of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._pomodoro_auto_start_break

    @pomodoro_auto_start_break.setter
    def pomodoro_auto_start_break(self, pomodoro_auto_start_break):
        """Sets the pomodoro_auto_start_break of this ModelsAllPreferences.


        :param pomodoro_auto_start_break: The pomodoro_auto_start_break of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._pomodoro_auto_start_break = pomodoro_auto_start_break

    @property
    def pomodoro_auto_start_focus(self):
        """Gets the pomodoro_auto_start_focus of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_auto_start_focus of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._pomodoro_auto_start_focus

    @pomodoro_auto_start_focus.setter
    def pomodoro_auto_start_focus(self, pomodoro_auto_start_focus):
        """Sets the pomodoro_auto_start_focus of this ModelsAllPreferences.


        :param pomodoro_auto_start_focus: The pomodoro_auto_start_focus of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._pomodoro_auto_start_focus = pomodoro_auto_start_focus

    @property
    def pomodoro_break_interval_in_minutes(self):
        """Gets the pomodoro_break_interval_in_minutes of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_break_interval_in_minutes of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._pomodoro_break_interval_in_minutes

    @pomodoro_break_interval_in_minutes.setter
    def pomodoro_break_interval_in_minutes(self, pomodoro_break_interval_in_minutes):
        """Sets the pomodoro_break_interval_in_minutes of this ModelsAllPreferences.


        :param pomodoro_break_interval_in_minutes: The pomodoro_break_interval_in_minutes of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._pomodoro_break_interval_in_minutes = pomodoro_break_interval_in_minutes

    @property
    def pomodoro_break_project_id(self):
        """Gets the pomodoro_break_project_id of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_break_project_id of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._pomodoro_break_project_id

    @pomodoro_break_project_id.setter
    def pomodoro_break_project_id(self, pomodoro_break_project_id):
        """Sets the pomodoro_break_project_id of this ModelsAllPreferences.


        :param pomodoro_break_project_id: The pomodoro_break_project_id of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._pomodoro_break_project_id = pomodoro_break_project_id

    @property
    def pomodoro_break_start_sound_enabled(self):
        """Gets the pomodoro_break_start_sound_enabled of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_break_start_sound_enabled of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._pomodoro_break_start_sound_enabled

    @pomodoro_break_start_sound_enabled.setter
    def pomodoro_break_start_sound_enabled(self, pomodoro_break_start_sound_enabled):
        """Sets the pomodoro_break_start_sound_enabled of this ModelsAllPreferences.


        :param pomodoro_break_start_sound_enabled: The pomodoro_break_start_sound_enabled of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._pomodoro_break_start_sound_enabled = pomodoro_break_start_sound_enabled

    @property
    def pomodoro_break_tag_id(self):
        """Gets the pomodoro_break_tag_id of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_break_tag_id of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._pomodoro_break_tag_id

    @pomodoro_break_tag_id.setter
    def pomodoro_break_tag_id(self, pomodoro_break_tag_id):
        """Sets the pomodoro_break_tag_id of this ModelsAllPreferences.


        :param pomodoro_break_tag_id: The pomodoro_break_tag_id of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._pomodoro_break_tag_id = pomodoro_break_tag_id

    @property
    def pomodoro_countdown_timer(self):
        """Gets the pomodoro_countdown_timer of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_countdown_timer of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._pomodoro_countdown_timer

    @pomodoro_countdown_timer.setter
    def pomodoro_countdown_timer(self, pomodoro_countdown_timer):
        """Sets the pomodoro_countdown_timer of this ModelsAllPreferences.


        :param pomodoro_countdown_timer: The pomodoro_countdown_timer of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._pomodoro_countdown_timer = pomodoro_countdown_timer

    @property
    def pomodoro_enabled(self):
        """Gets the pomodoro_enabled of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_enabled of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._pomodoro_enabled

    @pomodoro_enabled.setter
    def pomodoro_enabled(self, pomodoro_enabled):
        """Sets the pomodoro_enabled of this ModelsAllPreferences.


        :param pomodoro_enabled: The pomodoro_enabled of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._pomodoro_enabled = pomodoro_enabled

    @property
    def pomodoro_focus_interval_in_minutes(self):
        """Gets the pomodoro_focus_interval_in_minutes of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_focus_interval_in_minutes of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._pomodoro_focus_interval_in_minutes

    @pomodoro_focus_interval_in_minutes.setter
    def pomodoro_focus_interval_in_minutes(self, pomodoro_focus_interval_in_minutes):
        """Sets the pomodoro_focus_interval_in_minutes of this ModelsAllPreferences.


        :param pomodoro_focus_interval_in_minutes: The pomodoro_focus_interval_in_minutes of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._pomodoro_focus_interval_in_minutes = pomodoro_focus_interval_in_minutes

    @property
    def pomodoro_focus_sound(self):
        """Gets the pomodoro_focus_sound of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_focus_sound of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._pomodoro_focus_sound

    @pomodoro_focus_sound.setter
    def pomodoro_focus_sound(self, pomodoro_focus_sound):
        """Sets the pomodoro_focus_sound of this ModelsAllPreferences.


        :param pomodoro_focus_sound: The pomodoro_focus_sound of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._pomodoro_focus_sound = pomodoro_focus_sound

    @property
    def pomodoro_global_sound_enabled(self):
        """Gets the pomodoro_global_sound_enabled of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_global_sound_enabled of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._pomodoro_global_sound_enabled

    @pomodoro_global_sound_enabled.setter
    def pomodoro_global_sound_enabled(self, pomodoro_global_sound_enabled):
        """Sets the pomodoro_global_sound_enabled of this ModelsAllPreferences.


        :param pomodoro_global_sound_enabled: The pomodoro_global_sound_enabled of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._pomodoro_global_sound_enabled = pomodoro_global_sound_enabled

    @property
    def pomodoro_interval_end_sound(self):
        """Gets the pomodoro_interval_end_sound of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_interval_end_sound of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._pomodoro_interval_end_sound

    @pomodoro_interval_end_sound.setter
    def pomodoro_interval_end_sound(self, pomodoro_interval_end_sound):
        """Sets the pomodoro_interval_end_sound of this ModelsAllPreferences.


        :param pomodoro_interval_end_sound: The pomodoro_interval_end_sound of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._pomodoro_interval_end_sound = pomodoro_interval_end_sound

    @property
    def pomodoro_interval_end_volume(self):
        """Gets the pomodoro_interval_end_volume of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_interval_end_volume of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._pomodoro_interval_end_volume

    @pomodoro_interval_end_volume.setter
    def pomodoro_interval_end_volume(self, pomodoro_interval_end_volume):
        """Sets the pomodoro_interval_end_volume of this ModelsAllPreferences.


        :param pomodoro_interval_end_volume: The pomodoro_interval_end_volume of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._pomodoro_interval_end_volume = pomodoro_interval_end_volume

    @property
    def pomodoro_longer_break_duration_in_minutes(self):
        """Gets the pomodoro_longer_break_duration_in_minutes of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_longer_break_duration_in_minutes of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._pomodoro_longer_break_duration_in_minutes

    @pomodoro_longer_break_duration_in_minutes.setter
    def pomodoro_longer_break_duration_in_minutes(self, pomodoro_longer_break_duration_in_minutes):
        """Sets the pomodoro_longer_break_duration_in_minutes of this ModelsAllPreferences.


        :param pomodoro_longer_break_duration_in_minutes: The pomodoro_longer_break_duration_in_minutes of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._pomodoro_longer_break_duration_in_minutes = pomodoro_longer_break_duration_in_minutes

    @property
    def pomodoro_prevent_screen_lock(self):
        """Gets the pomodoro_prevent_screen_lock of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_prevent_screen_lock of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._pomodoro_prevent_screen_lock

    @pomodoro_prevent_screen_lock.setter
    def pomodoro_prevent_screen_lock(self, pomodoro_prevent_screen_lock):
        """Sets the pomodoro_prevent_screen_lock of this ModelsAllPreferences.


        :param pomodoro_prevent_screen_lock: The pomodoro_prevent_screen_lock of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._pomodoro_prevent_screen_lock = pomodoro_prevent_screen_lock

    @property
    def pomodoro_rounds_before_longer_break(self):
        """Gets the pomodoro_rounds_before_longer_break of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_rounds_before_longer_break of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._pomodoro_rounds_before_longer_break

    @pomodoro_rounds_before_longer_break.setter
    def pomodoro_rounds_before_longer_break(self, pomodoro_rounds_before_longer_break):
        """Sets the pomodoro_rounds_before_longer_break of this ModelsAllPreferences.


        :param pomodoro_rounds_before_longer_break: The pomodoro_rounds_before_longer_break of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._pomodoro_rounds_before_longer_break = pomodoro_rounds_before_longer_break

    @property
    def pomodoro_session_start_sound_enabled(self):
        """Gets the pomodoro_session_start_sound_enabled of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_session_start_sound_enabled of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._pomodoro_session_start_sound_enabled

    @pomodoro_session_start_sound_enabled.setter
    def pomodoro_session_start_sound_enabled(self, pomodoro_session_start_sound_enabled):
        """Sets the pomodoro_session_start_sound_enabled of this ModelsAllPreferences.


        :param pomodoro_session_start_sound_enabled: The pomodoro_session_start_sound_enabled of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._pomodoro_session_start_sound_enabled = pomodoro_session_start_sound_enabled

    @property
    def pomodoro_show_notifications(self):
        """Gets the pomodoro_show_notifications of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_show_notifications of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._pomodoro_show_notifications

    @pomodoro_show_notifications.setter
    def pomodoro_show_notifications(self, pomodoro_show_notifications):
        """Sets the pomodoro_show_notifications of this ModelsAllPreferences.


        :param pomodoro_show_notifications: The pomodoro_show_notifications of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._pomodoro_show_notifications = pomodoro_show_notifications

    @property
    def pomodoro_stop_timer_at_interval_end(self):
        """Gets the pomodoro_stop_timer_at_interval_end of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_stop_timer_at_interval_end of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._pomodoro_stop_timer_at_interval_end

    @pomodoro_stop_timer_at_interval_end.setter
    def pomodoro_stop_timer_at_interval_end(self, pomodoro_stop_timer_at_interval_end):
        """Sets the pomodoro_stop_timer_at_interval_end of this ModelsAllPreferences.


        :param pomodoro_stop_timer_at_interval_end: The pomodoro_stop_timer_at_interval_end of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._pomodoro_stop_timer_at_interval_end = pomodoro_stop_timer_at_interval_end

    @property
    def pomodoro_track_breaks_as_time_entries(self):
        """Gets the pomodoro_track_breaks_as_time_entries of this ModelsAllPreferences.  # noqa: E501


        :return: The pomodoro_track_breaks_as_time_entries of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._pomodoro_track_breaks_as_time_entries

    @pomodoro_track_breaks_as_time_entries.setter
    def pomodoro_track_breaks_as_time_entries(self, pomodoro_track_breaks_as_time_entries):
        """Sets the pomodoro_track_breaks_as_time_entries of this ModelsAllPreferences.


        :param pomodoro_track_breaks_as_time_entries: The pomodoro_track_breaks_as_time_entries of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._pomodoro_track_breaks_as_time_entries = pomodoro_track_breaks_as_time_entries

    @property
    def project_dashboard_activity_mode(self):
        """Gets the project_dashboard_activity_mode of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The project_dashboard_activity_mode of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._project_dashboard_activity_mode

    @project_dashboard_activity_mode.setter
    def project_dashboard_activity_mode(self, project_dashboard_activity_mode):
        """Sets the project_dashboard_activity_mode of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param project_dashboard_activity_mode: The project_dashboard_activity_mode of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._project_dashboard_activity_mode = project_dashboard_activity_mode

    @property
    def project_shortcut_enabled(self):
        """Gets the project_shortcut_enabled of this ModelsAllPreferences.  # noqa: E501


        :return: The project_shortcut_enabled of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._project_shortcut_enabled

    @project_shortcut_enabled.setter
    def project_shortcut_enabled(self, project_shortcut_enabled):
        """Sets the project_shortcut_enabled of this ModelsAllPreferences.


        :param project_shortcut_enabled: The project_shortcut_enabled of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._project_shortcut_enabled = project_shortcut_enabled

    @property
    def record_timeline(self):
        """Gets the record_timeline of this ModelsAllPreferences.  # noqa: E501


        :return: The record_timeline of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._record_timeline

    @record_timeline.setter
    def record_timeline(self, record_timeline):
        """Sets the record_timeline of this ModelsAllPreferences.


        :param record_timeline: The record_timeline of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._record_timeline = record_timeline

    @property
    def remember_last_project(self):
        """Gets the remember_last_project of this ModelsAllPreferences.  # noqa: E501


        :return: The remember_last_project of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._remember_last_project

    @remember_last_project.setter
    def remember_last_project(self, remember_last_project):
        """Sets the remember_last_project of this ModelsAllPreferences.


        :param remember_last_project: The remember_last_project of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._remember_last_project = remember_last_project

    @property
    def reminder_days(self):
        """Gets the reminder_days of this ModelsAllPreferences.  # noqa: E501


        :return: The reminder_days of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._reminder_days

    @reminder_days.setter
    def reminder_days(self, reminder_days):
        """Sets the reminder_days of this ModelsAllPreferences.


        :param reminder_days: The reminder_days of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._reminder_days = reminder_days

    @property
    def reminder_enabled(self):
        """Gets the reminder_enabled of this ModelsAllPreferences.  # noqa: E501


        :return: The reminder_enabled of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._reminder_enabled

    @reminder_enabled.setter
    def reminder_enabled(self, reminder_enabled):
        """Sets the reminder_enabled of this ModelsAllPreferences.


        :param reminder_enabled: The reminder_enabled of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._reminder_enabled = reminder_enabled

    @property
    def reminder_interval_in_minutes(self):
        """Gets the reminder_interval_in_minutes of this ModelsAllPreferences.  # noqa: E501


        :return: The reminder_interval_in_minutes of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._reminder_interval_in_minutes

    @reminder_interval_in_minutes.setter
    def reminder_interval_in_minutes(self, reminder_interval_in_minutes):
        """Sets the reminder_interval_in_minutes of this ModelsAllPreferences.


        :param reminder_interval_in_minutes: The reminder_interval_in_minutes of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._reminder_interval_in_minutes = reminder_interval_in_minutes

    @property
    def reminder_period(self):
        """Gets the reminder_period of this ModelsAllPreferences.  # noqa: E501


        :return: The reminder_period of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._reminder_period

    @reminder_period.setter
    def reminder_period(self, reminder_period):
        """Sets the reminder_period of this ModelsAllPreferences.


        :param reminder_period: The reminder_period of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._reminder_period = reminder_period

    @property
    def reminder_snoozing_in_minutes(self):
        """Gets the reminder_snoozing_in_minutes of this ModelsAllPreferences.  # noqa: E501


        :return: The reminder_snoozing_in_minutes of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._reminder_snoozing_in_minutes

    @reminder_snoozing_in_minutes.setter
    def reminder_snoozing_in_minutes(self, reminder_snoozing_in_minutes):
        """Sets the reminder_snoozing_in_minutes of this ModelsAllPreferences.


        :param reminder_snoozing_in_minutes: The reminder_snoozing_in_minutes of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._reminder_snoozing_in_minutes = reminder_snoozing_in_minutes

    @property
    def report_rounding(self):
        """Gets the report_rounding of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The report_rounding of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._report_rounding

    @report_rounding.setter
    def report_rounding(self, report_rounding):
        """Sets the report_rounding of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param report_rounding: The report_rounding of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._report_rounding = report_rounding

    @property
    def report_rounding_direction(self):
        """Gets the report_rounding_direction of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The report_rounding_direction of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._report_rounding_direction

    @report_rounding_direction.setter
    def report_rounding_direction(self, report_rounding_direction):
        """Sets the report_rounding_direction of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param report_rounding_direction: The report_rounding_direction of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._report_rounding_direction = report_rounding_direction

    @property
    def report_rounding_step_in_minutes(self):
        """Gets the report_rounding_step_in_minutes of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The report_rounding_step_in_minutes of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._report_rounding_step_in_minutes

    @report_rounding_step_in_minutes.setter
    def report_rounding_step_in_minutes(self, report_rounding_step_in_minutes):
        """Sets the report_rounding_step_in_minutes of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param report_rounding_step_in_minutes: The report_rounding_step_in_minutes of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._report_rounding_step_in_minutes = report_rounding_step_in_minutes

    @property
    def reports_hide_weekends(self):
        """Gets the reports_hide_weekends of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The reports_hide_weekends of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._reports_hide_weekends

    @reports_hide_weekends.setter
    def reports_hide_weekends(self, reports_hide_weekends):
        """Sets the reports_hide_weekends of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param reports_hide_weekends: The reports_hide_weekends of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._reports_hide_weekends = reports_hide_weekends

    @property
    def running_entry_warning(self):
        """Gets the running_entry_warning of this ModelsAllPreferences.  # noqa: E501


        :return: The running_entry_warning of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._running_entry_warning

    @running_entry_warning.setter
    def running_entry_warning(self, running_entry_warning):
        """Sets the running_entry_warning of this ModelsAllPreferences.


        :param running_entry_warning: The running_entry_warning of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._running_entry_warning = running_entry_warning

    @property
    def running_timer_notification_enabled(self):
        """Gets the running_timer_notification_enabled of this ModelsAllPreferences.  # noqa: E501


        :return: The running_timer_notification_enabled of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._running_timer_notification_enabled

    @running_timer_notification_enabled.setter
    def running_timer_notification_enabled(self, running_timer_notification_enabled):
        """Sets the running_timer_notification_enabled of this ModelsAllPreferences.


        :param running_timer_notification_enabled: The running_timer_notification_enabled of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._running_timer_notification_enabled = running_timer_notification_enabled

    @property
    def seen_follow_modal(self):
        """Gets the seen_follow_modal of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The seen_follow_modal of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._seen_follow_modal

    @seen_follow_modal.setter
    def seen_follow_modal(self, seen_follow_modal):
        """Sets the seen_follow_modal of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param seen_follow_modal: The seen_follow_modal of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._seen_follow_modal = seen_follow_modal

    @property
    def seen_footer_popup(self):
        """Gets the seen_footer_popup of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The seen_footer_popup of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._seen_footer_popup

    @seen_footer_popup.setter
    def seen_footer_popup(self, seen_footer_popup):
        """Sets the seen_footer_popup of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param seen_footer_popup: The seen_footer_popup of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._seen_footer_popup = seen_footer_popup

    @property
    def seen_project_dashboard_overlay(self):
        """Gets the seen_project_dashboard_overlay of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The seen_project_dashboard_overlay of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._seen_project_dashboard_overlay

    @seen_project_dashboard_overlay.setter
    def seen_project_dashboard_overlay(self, seen_project_dashboard_overlay):
        """Sets the seen_project_dashboard_overlay of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param seen_project_dashboard_overlay: The seen_project_dashboard_overlay of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._seen_project_dashboard_overlay = seen_project_dashboard_overlay

    @property
    def seen_toggl_button_modal(self):
        """Gets the seen_toggl_button_modal of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The seen_toggl_button_modal of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._seen_toggl_button_modal

    @seen_toggl_button_modal.setter
    def seen_toggl_button_modal(self, seen_toggl_button_modal):
        """Sets the seen_toggl_button_modal of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param seen_toggl_button_modal: The seen_toggl_button_modal of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._seen_toggl_button_modal = seen_toggl_button_modal

    @property
    def send_product_emails(self):
        """Gets the send_product_emails of this ModelsAllPreferences.  # noqa: E501


        :return: The send_product_emails of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._send_product_emails

    @send_product_emails.setter
    def send_product_emails(self, send_product_emails):
        """Sets the send_product_emails of this ModelsAllPreferences.


        :param send_product_emails: The send_product_emails of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._send_product_emails = send_product_emails

    @property
    def send_timer_notifications(self):
        """Gets the send_timer_notifications of this ModelsAllPreferences.  # noqa: E501


        :return: The send_timer_notifications of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._send_timer_notifications

    @send_timer_notifications.setter
    def send_timer_notifications(self, send_timer_notifications):
        """Sets the send_timer_notifications of this ModelsAllPreferences.


        :param send_timer_notifications: The send_timer_notifications of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._send_timer_notifications = send_timer_notifications

    @property
    def send_weekly_report(self):
        """Gets the send_weekly_report of this ModelsAllPreferences.  # noqa: E501


        :return: The send_weekly_report of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._send_weekly_report

    @send_weekly_report.setter
    def send_weekly_report(self, send_weekly_report):
        """Sets the send_weekly_report of this ModelsAllPreferences.


        :param send_weekly_report: The send_weekly_report of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._send_weekly_report = send_weekly_report

    @property
    def show_time_in_title(self):
        """Gets the show_time_in_title of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The show_time_in_title of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._show_time_in_title

    @show_time_in_title.setter
    def show_time_in_title(self, show_time_in_title):
        """Sets the show_time_in_title of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param show_time_in_title: The show_time_in_title of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._show_time_in_title = show_time_in_title

    @property
    def show_all_entries(self):
        """Gets the show_all_entries of this ModelsAllPreferences.  # noqa: E501


        :return: The show_all_entries of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._show_all_entries

    @show_all_entries.setter
    def show_all_entries(self, show_all_entries):
        """Sets the show_all_entries of this ModelsAllPreferences.


        :param show_all_entries: The show_all_entries of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._show_all_entries = show_all_entries

    @property
    def show_changelog(self):
        """Gets the show_changelog of this ModelsAllPreferences.  # noqa: E501


        :return: The show_changelog of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._show_changelog

    @show_changelog.setter
    def show_changelog(self, show_changelog):
        """Sets the show_changelog of this ModelsAllPreferences.


        :param show_changelog: The show_changelog of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._show_changelog = show_changelog

    @property
    def show_description_in_menu_bar(self):
        """Gets the show_description_in_menu_bar of this ModelsAllPreferences.  # noqa: E501


        :return: The show_description_in_menu_bar of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._show_description_in_menu_bar

    @show_description_in_menu_bar.setter
    def show_description_in_menu_bar(self, show_description_in_menu_bar):
        """Sets the show_description_in_menu_bar of this ModelsAllPreferences.


        :param show_description_in_menu_bar: The show_description_in_menu_bar of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._show_description_in_menu_bar = show_description_in_menu_bar

    @property
    def show_dock_icon(self):
        """Gets the show_dock_icon of this ModelsAllPreferences.  # noqa: E501


        :return: The show_dock_icon of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._show_dock_icon

    @show_dock_icon.setter
    def show_dock_icon(self, show_dock_icon):
        """Sets the show_dock_icon of this ModelsAllPreferences.


        :param show_dock_icon: The show_dock_icon of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._show_dock_icon = show_dock_icon

    @property
    def show_events_in_calendar(self):
        """Gets the show_events_in_calendar of this ModelsAllPreferences.  # noqa: E501


        :return: The show_events_in_calendar of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._show_events_in_calendar

    @show_events_in_calendar.setter
    def show_events_in_calendar(self, show_events_in_calendar):
        """Sets the show_events_in_calendar of this ModelsAllPreferences.


        :param show_events_in_calendar: The show_events_in_calendar of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._show_events_in_calendar = show_events_in_calendar

    @property
    def show_project_in_menu_bar(self):
        """Gets the show_project_in_menu_bar of this ModelsAllPreferences.  # noqa: E501


        :return: The show_project_in_menu_bar of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._show_project_in_menu_bar

    @show_project_in_menu_bar.setter
    def show_project_in_menu_bar(self, show_project_in_menu_bar):
        """Sets the show_project_in_menu_bar of this ModelsAllPreferences.


        :param show_project_in_menu_bar: The show_project_in_menu_bar of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._show_project_in_menu_bar = show_project_in_menu_bar

    @property
    def show_qr_scanner(self):
        """Gets the show_qr_scanner of this ModelsAllPreferences.  # noqa: E501


        :return: The show_qr_scanner of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._show_qr_scanner

    @show_qr_scanner.setter
    def show_qr_scanner(self, show_qr_scanner):
        """Sets the show_qr_scanner of this ModelsAllPreferences.


        :param show_qr_scanner: The show_qr_scanner of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._show_qr_scanner = show_qr_scanner

    @property
    def show_seconds_in_menu_bar(self):
        """Gets the show_seconds_in_menu_bar of this ModelsAllPreferences.  # noqa: E501


        :return: The show_seconds_in_menu_bar of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._show_seconds_in_menu_bar

    @show_seconds_in_menu_bar.setter
    def show_seconds_in_menu_bar(self, show_seconds_in_menu_bar):
        """Sets the show_seconds_in_menu_bar of this ModelsAllPreferences.


        :param show_seconds_in_menu_bar: The show_seconds_in_menu_bar of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._show_seconds_in_menu_bar = show_seconds_in_menu_bar

    @property
    def show_timeline_in_day_view(self):
        """Gets the show_timeline_in_day_view of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The show_timeline_in_day_view of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._show_timeline_in_day_view

    @show_timeline_in_day_view.setter
    def show_timeline_in_day_view(self, show_timeline_in_day_view):
        """Sets the show_timeline_in_day_view of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param show_timeline_in_day_view: The show_timeline_in_day_view of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._show_timeline_in_day_view = show_timeline_in_day_view

    @property
    def show_timer_in_menu_bar(self):
        """Gets the show_timer_in_menu_bar of this ModelsAllPreferences.  # noqa: E501


        :return: The show_timer_in_menu_bar of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._show_timer_in_menu_bar

    @show_timer_in_menu_bar.setter
    def show_timer_in_menu_bar(self, show_timer_in_menu_bar):
        """Sets the show_timer_in_menu_bar of this ModelsAllPreferences.


        :param show_timer_in_menu_bar: The show_timer_in_menu_bar of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._show_timer_in_menu_bar = show_timer_in_menu_bar

    @property
    def show_today_total_in_menu_bar(self):
        """Gets the show_today_total_in_menu_bar of this ModelsAllPreferences.  # noqa: E501


        :return: The show_today_total_in_menu_bar of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._show_today_total_in_menu_bar

    @show_today_total_in_menu_bar.setter
    def show_today_total_in_menu_bar(self, show_today_total_in_menu_bar):
        """Sets the show_today_total_in_menu_bar of this ModelsAllPreferences.


        :param show_today_total_in_menu_bar: The show_today_total_in_menu_bar of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._show_today_total_in_menu_bar = show_today_total_in_menu_bar

    @property
    def show_total_billable_hours(self):
        """Gets the show_total_billable_hours of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The show_total_billable_hours of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._show_total_billable_hours

    @show_total_billable_hours.setter
    def show_total_billable_hours(self, show_total_billable_hours):
        """Sets the show_total_billable_hours of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param show_total_billable_hours: The show_total_billable_hours of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._show_total_billable_hours = show_total_billable_hours

    @property
    def show_weekend_on_timer_page(self):
        """Gets the show_weekend_on_timer_page of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The show_weekend_on_timer_page of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._show_weekend_on_timer_page

    @show_weekend_on_timer_page.setter
    def show_weekend_on_timer_page(self, show_weekend_on_timer_page):
        """Sets the show_weekend_on_timer_page of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param show_weekend_on_timer_page: The show_weekend_on_timer_page of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._show_weekend_on_timer_page = show_weekend_on_timer_page

    @property
    def show_workouts_in_calendar(self):
        """Gets the show_workouts_in_calendar of this ModelsAllPreferences.  # noqa: E501


        :return: The show_workouts_in_calendar of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._show_workouts_in_calendar

    @show_workouts_in_calendar.setter
    def show_workouts_in_calendar(self, show_workouts_in_calendar):
        """Sets the show_workouts_in_calendar of this ModelsAllPreferences.


        :param show_workouts_in_calendar: The show_workouts_in_calendar of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._show_workouts_in_calendar = show_workouts_in_calendar

    @property
    def sleep_behaviour(self):
        """Gets the sleep_behaviour of this ModelsAllPreferences.  # noqa: E501


        :return: The sleep_behaviour of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._sleep_behaviour

    @sleep_behaviour.setter
    def sleep_behaviour(self, sleep_behaviour):
        """Sets the sleep_behaviour of this ModelsAllPreferences.


        :param sleep_behaviour: The sleep_behaviour of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._sleep_behaviour = sleep_behaviour

    @property
    def smart_alerts_option(self):
        """Gets the smart_alerts_option of this ModelsAllPreferences.  # noqa: E501


        :return: The smart_alerts_option of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._smart_alerts_option

    @smart_alerts_option.setter
    def smart_alerts_option(self, smart_alerts_option):
        """Sets the smart_alerts_option of this ModelsAllPreferences.


        :param smart_alerts_option: The smart_alerts_option of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._smart_alerts_option = smart_alerts_option

    @property
    def snowball_report_rounding(self):
        """Gets the snowball_report_rounding of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The snowball_report_rounding of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._snowball_report_rounding

    @snowball_report_rounding.setter
    def snowball_report_rounding(self, snowball_report_rounding):
        """Sets the snowball_report_rounding of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param snowball_report_rounding: The snowball_report_rounding of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._snowball_report_rounding = snowball_report_rounding

    @property
    def stack_times_on_manual_mode_after(self):
        """Gets the stack_times_on_manual_mode_after of this ModelsAllPreferences.  # noqa: E501


        :return: The stack_times_on_manual_mode_after of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._stack_times_on_manual_mode_after

    @stack_times_on_manual_mode_after.setter
    def stack_times_on_manual_mode_after(self, stack_times_on_manual_mode_after):
        """Sets the stack_times_on_manual_mode_after of this ModelsAllPreferences.


        :param stack_times_on_manual_mode_after: The stack_times_on_manual_mode_after of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._stack_times_on_manual_mode_after = stack_times_on_manual_mode_after

    @property
    def start_automatically(self):
        """Gets the start_automatically of this ModelsAllPreferences.  # noqa: E501


        :return: The start_automatically of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._start_automatically

    @start_automatically.setter
    def start_automatically(self, start_automatically):
        """Sets the start_automatically of this ModelsAllPreferences.


        :param start_automatically: The start_automatically of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._start_automatically = start_automatically

    @property
    def start_shortcut_mode(self):
        """Gets the start_shortcut_mode of this ModelsAllPreferences.  # noqa: E501


        :return: The start_shortcut_mode of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._start_shortcut_mode

    @start_shortcut_mode.setter
    def start_shortcut_mode(self, start_shortcut_mode):
        """Sets the start_shortcut_mode of this ModelsAllPreferences.


        :param start_shortcut_mode: The start_shortcut_mode of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._start_shortcut_mode = start_shortcut_mode

    @property
    def stop_at_specific_time(self):
        """Gets the stop_at_specific_time of this ModelsAllPreferences.  # noqa: E501


        :return: The stop_at_specific_time of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._stop_at_specific_time

    @stop_at_specific_time.setter
    def stop_at_specific_time(self, stop_at_specific_time):
        """Sets the stop_at_specific_time of this ModelsAllPreferences.


        :param stop_at_specific_time: The stop_at_specific_time of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._stop_at_specific_time = stop_at_specific_time

    @property
    def stop_automatically(self):
        """Gets the stop_automatically of this ModelsAllPreferences.  # noqa: E501


        :return: The stop_automatically of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._stop_automatically

    @stop_automatically.setter
    def stop_automatically(self, stop_automatically):
        """Sets the stop_automatically of this ModelsAllPreferences.


        :param stop_automatically: The stop_automatically of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._stop_automatically = stop_automatically

    @property
    def stop_entry_on_shutdown(self):
        """Gets the stop_entry_on_shutdown of this ModelsAllPreferences.  # noqa: E501


        :return: The stop_entry_on_shutdown of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._stop_entry_on_shutdown

    @stop_entry_on_shutdown.setter
    def stop_entry_on_shutdown(self, stop_entry_on_shutdown):
        """Sets the stop_entry_on_shutdown of this ModelsAllPreferences.


        :param stop_entry_on_shutdown: The stop_entry_on_shutdown of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._stop_entry_on_shutdown = stop_entry_on_shutdown

    @property
    def stop_specified_time(self):
        """Gets the stop_specified_time of this ModelsAllPreferences.  # noqa: E501


        :return: The stop_specified_time of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._stop_specified_time

    @stop_specified_time.setter
    def stop_specified_time(self, stop_specified_time):
        """Sets the stop_specified_time of this ModelsAllPreferences.


        :param stop_specified_time: The stop_specified_time of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._stop_specified_time = stop_specified_time

    @property
    def stopped_timer_notification_enabled(self):
        """Gets the stopped_timer_notification_enabled of this ModelsAllPreferences.  # noqa: E501


        :return: The stopped_timer_notification_enabled of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._stopped_timer_notification_enabled

    @stopped_timer_notification_enabled.setter
    def stopped_timer_notification_enabled(self, stopped_timer_notification_enabled):
        """Sets the stopped_timer_notification_enabled of this ModelsAllPreferences.


        :param stopped_timer_notification_enabled: The stopped_timer_notification_enabled of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._stopped_timer_notification_enabled = stopped_timer_notification_enabled

    @property
    def suggestions_enabled(self):
        """Gets the suggestions_enabled of this ModelsAllPreferences.  # noqa: E501


        :return: The suggestions_enabled of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._suggestions_enabled

    @suggestions_enabled.setter
    def suggestions_enabled(self, suggestions_enabled):
        """Sets the suggestions_enabled of this ModelsAllPreferences.


        :param suggestions_enabled: The suggestions_enabled of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._suggestions_enabled = suggestions_enabled

    @property
    def summary_report_amounts(self):
        """Gets the summary_report_amounts of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The summary_report_amounts of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._summary_report_amounts

    @summary_report_amounts.setter
    def summary_report_amounts(self, summary_report_amounts):
        """Sets the summary_report_amounts of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param summary_report_amounts: The summary_report_amounts of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._summary_report_amounts = summary_report_amounts

    @property
    def summary_report_distinct_rates(self):
        """Gets the summary_report_distinct_rates of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The summary_report_distinct_rates of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._summary_report_distinct_rates

    @summary_report_distinct_rates.setter
    def summary_report_distinct_rates(self, summary_report_distinct_rates):
        """Sets the summary_report_distinct_rates of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param summary_report_distinct_rates: The summary_report_distinct_rates of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._summary_report_distinct_rates = summary_report_distinct_rates

    @property
    def summary_report_grouping(self):
        """Gets the summary_report_grouping of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The summary_report_grouping of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._summary_report_grouping

    @summary_report_grouping.setter
    def summary_report_grouping(self, summary_report_grouping):
        """Sets the summary_report_grouping of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param summary_report_grouping: The summary_report_grouping of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._summary_report_grouping = summary_report_grouping

    @property
    def summary_report_sort_asc(self):
        """Gets the summary_report_sort_asc of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The summary_report_sort_asc of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._summary_report_sort_asc

    @summary_report_sort_asc.setter
    def summary_report_sort_asc(self, summary_report_sort_asc):
        """Sets the summary_report_sort_asc of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param summary_report_sort_asc: The summary_report_sort_asc of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._summary_report_sort_asc = summary_report_sort_asc

    @property
    def summary_report_sort_field(self):
        """Gets the summary_report_sort_field of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The summary_report_sort_field of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._summary_report_sort_field

    @summary_report_sort_field.setter
    def summary_report_sort_field(self, summary_report_sort_field):
        """Sets the summary_report_sort_field of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param summary_report_sort_field: The summary_report_sort_field of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._summary_report_sort_field = summary_report_sort_field

    @property
    def summary_report_sub_grouping(self):
        """Gets the summary_report_sub_grouping of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The summary_report_sub_grouping of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._summary_report_sub_grouping

    @summary_report_sub_grouping.setter
    def summary_report_sub_grouping(self, summary_report_sub_grouping):
        """Sets the summary_report_sub_grouping of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param summary_report_sub_grouping: The summary_report_sub_grouping of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._summary_report_sub_grouping = summary_report_sub_grouping

    @property
    def summary_total_mode(self):
        """Gets the summary_total_mode of this ModelsAllPreferences.  # noqa: E501


        :return: The summary_total_mode of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._summary_total_mode

    @summary_total_mode.setter
    def summary_total_mode(self, summary_total_mode):
        """Sets the summary_total_mode of this ModelsAllPreferences.


        :param summary_total_mode: The summary_total_mode of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._summary_total_mode = summary_total_mode

    @property
    def tags_shortcut_enabled(self):
        """Gets the tags_shortcut_enabled of this ModelsAllPreferences.  # noqa: E501


        :return: The tags_shortcut_enabled of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._tags_shortcut_enabled

    @tags_shortcut_enabled.setter
    def tags_shortcut_enabled(self, tags_shortcut_enabled):
        """Sets the tags_shortcut_enabled of this ModelsAllPreferences.


        :param tags_shortcut_enabled: The tags_shortcut_enabled of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._tags_shortcut_enabled = tags_shortcut_enabled

    @property
    def theme(self):
        """Gets the theme of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The theme of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param theme: The theme of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._theme = theme

    @property
    def time_entry_display_mode(self):
        """Gets the time_entry_display_mode of this ModelsAllPreferences.  # noqa: E501


        :return: The time_entry_display_mode of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._time_entry_display_mode

    @time_entry_display_mode.setter
    def time_entry_display_mode(self, time_entry_display_mode):
        """Sets the time_entry_display_mode of this ModelsAllPreferences.


        :param time_entry_display_mode: The time_entry_display_mode of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._time_entry_display_mode = time_entry_display_mode

    @property
    def time_entry_ghost_suggestions_enabled(self):
        """Gets the time_entry_ghost_suggestions_enabled of this ModelsAllPreferences.  # noqa: E501


        :return: The time_entry_ghost_suggestions_enabled of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._time_entry_ghost_suggestions_enabled

    @time_entry_ghost_suggestions_enabled.setter
    def time_entry_ghost_suggestions_enabled(self, time_entry_ghost_suggestions_enabled):
        """Sets the time_entry_ghost_suggestions_enabled of this ModelsAllPreferences.


        :param time_entry_ghost_suggestions_enabled: The time_entry_ghost_suggestions_enabled of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._time_entry_ghost_suggestions_enabled = time_entry_ghost_suggestions_enabled

    @property
    def time_entry_start_stop_input_mode(self):
        """Gets the time_entry_start_stop_input_mode of this ModelsAllPreferences.  # noqa: E501


        :return: The time_entry_start_stop_input_mode of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._time_entry_start_stop_input_mode

    @time_entry_start_stop_input_mode.setter
    def time_entry_start_stop_input_mode(self, time_entry_start_stop_input_mode):
        """Sets the time_entry_start_stop_input_mode of this ModelsAllPreferences.


        :param time_entry_start_stop_input_mode: The time_entry_start_stop_input_mode of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._time_entry_start_stop_input_mode = time_entry_start_stop_input_mode

    @property
    def timeofday_format(self):
        """Gets the timeofday_format of this ModelsAllPreferences.  # noqa: E501


        :return: The timeofday_format of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._timeofday_format

    @timeofday_format.setter
    def timeofday_format(self, timeofday_format):
        """Sets the timeofday_format of this ModelsAllPreferences.


        :param timeofday_format: The timeofday_format of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._timeofday_format = timeofday_format

    @property
    def timer_view(self):
        """Gets the timer_view of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The timer_view of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._timer_view

    @timer_view.setter
    def timer_view(self, timer_view):
        """Sets the timer_view of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param timer_view: The timer_view of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._timer_view = timer_view

    @property
    def timer_view_mobile(self):
        """Gets the timer_view_mobile of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The timer_view_mobile of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._timer_view_mobile

    @timer_view_mobile.setter
    def timer_view_mobile(self, timer_view_mobile):
        """Sets the timer_view_mobile of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param timer_view_mobile: The timer_view_mobile of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._timer_view_mobile = timer_view_mobile

    @property
    def to_s_accept_needed(self):
        """Gets the to_s_accept_needed of this ModelsAllPreferences.  # noqa: E501

        ToSAcceptNeeded represents the trigger for new ToS accept dialog  # noqa: E501

        :return: The to_s_accept_needed of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._to_s_accept_needed

    @to_s_accept_needed.setter
    def to_s_accept_needed(self, to_s_accept_needed):
        """Sets the to_s_accept_needed of this ModelsAllPreferences.

        ToSAcceptNeeded represents the trigger for new ToS accept dialog  # noqa: E501

        :param to_s_accept_needed: The to_s_accept_needed of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._to_s_accept_needed = to_s_accept_needed

    @property
    def use_mini_timer(self):
        """Gets the use_mini_timer of this ModelsAllPreferences.  # noqa: E501


        :return: The use_mini_timer of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._use_mini_timer

    @use_mini_timer.setter
    def use_mini_timer(self, use_mini_timer):
        """Sets the use_mini_timer of this ModelsAllPreferences.


        :param use_mini_timer: The use_mini_timer of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._use_mini_timer = use_mini_timer

    @property
    def visible_footer(self):
        """Gets the visible_footer of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The visible_footer of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._visible_footer

    @visible_footer.setter
    def visible_footer(self, visible_footer):
        """Sets the visible_footer of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param visible_footer: The visible_footer of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._visible_footer = visible_footer

    @property
    def web_time_entry_started(self):
        """Gets the web_time_entry_started of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The web_time_entry_started of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._web_time_entry_started

    @web_time_entry_started.setter
    def web_time_entry_started(self, web_time_entry_started):
        """Sets the web_time_entry_started of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param web_time_entry_started: The web_time_entry_started of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._web_time_entry_started = web_time_entry_started

    @property
    def web_time_entry_stopped(self):
        """Gets the web_time_entry_stopped of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The web_time_entry_stopped of this ModelsAllPreferences.  # noqa: E501
        :rtype: bool
        """
        return self._web_time_entry_stopped

    @web_time_entry_stopped.setter
    def web_time_entry_stopped(self, web_time_entry_stopped):
        """Sets the web_time_entry_stopped of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param web_time_entry_stopped: The web_time_entry_stopped of this ModelsAllPreferences.  # noqa: E501
        :type: bool
        """

        self._web_time_entry_stopped = web_time_entry_stopped

    @property
    def weekly_report_grouping(self):
        """Gets the weekly_report_grouping of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The weekly_report_grouping of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._weekly_report_grouping

    @weekly_report_grouping.setter
    def weekly_report_grouping(self, weekly_report_grouping):
        """Sets the weekly_report_grouping of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param weekly_report_grouping: The weekly_report_grouping of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._weekly_report_grouping = weekly_report_grouping

    @property
    def weekly_report_value_to_show(self):
        """Gets the weekly_report_value_to_show of this ModelsAllPreferences.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The weekly_report_value_to_show of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._weekly_report_value_to_show

    @weekly_report_value_to_show.setter
    def weekly_report_value_to_show(self, weekly_report_value_to_show):
        """Sets the weekly_report_value_to_show of this ModelsAllPreferences.

        will be omitted if empty  # noqa: E501

        :param weekly_report_value_to_show: The weekly_report_value_to_show of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._weekly_report_value_to_show = weekly_report_value_to_show

    @property
    def windows_auto_tracking_rules(self):
        """Gets the windows_auto_tracking_rules of this ModelsAllPreferences.  # noqa: E501


        :return: The windows_auto_tracking_rules of this ModelsAllPreferences.  # noqa: E501
        :rtype: ModelsWindowsAutoTrackingRules
        """
        return self._windows_auto_tracking_rules

    @windows_auto_tracking_rules.setter
    def windows_auto_tracking_rules(self, windows_auto_tracking_rules):
        """Sets the windows_auto_tracking_rules of this ModelsAllPreferences.


        :param windows_auto_tracking_rules: The windows_auto_tracking_rules of this ModelsAllPreferences.  # noqa: E501
        :type: ModelsWindowsAutoTrackingRules
        """

        self._windows_auto_tracking_rules = windows_auto_tracking_rules

    @property
    def windows_show_hide_toggl_keyboard_shortcut(self):
        """Gets the windows_show_hide_toggl_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501


        :return: The windows_show_hide_toggl_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501
        :rtype: ModelsKeyboardShortcut
        """
        return self._windows_show_hide_toggl_keyboard_shortcut

    @windows_show_hide_toggl_keyboard_shortcut.setter
    def windows_show_hide_toggl_keyboard_shortcut(self, windows_show_hide_toggl_keyboard_shortcut):
        """Sets the windows_show_hide_toggl_keyboard_shortcut of this ModelsAllPreferences.


        :param windows_show_hide_toggl_keyboard_shortcut: The windows_show_hide_toggl_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501
        :type: ModelsKeyboardShortcut
        """

        self._windows_show_hide_toggl_keyboard_shortcut = windows_show_hide_toggl_keyboard_shortcut

    @property
    def windows_stop_continue_keyboard_shortcut(self):
        """Gets the windows_stop_continue_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501


        :return: The windows_stop_continue_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501
        :rtype: ModelsKeyboardShortcut
        """
        return self._windows_stop_continue_keyboard_shortcut

    @windows_stop_continue_keyboard_shortcut.setter
    def windows_stop_continue_keyboard_shortcut(self, windows_stop_continue_keyboard_shortcut):
        """Sets the windows_stop_continue_keyboard_shortcut of this ModelsAllPreferences.


        :param windows_stop_continue_keyboard_shortcut: The windows_stop_continue_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501
        :type: ModelsKeyboardShortcut
        """

        self._windows_stop_continue_keyboard_shortcut = windows_stop_continue_keyboard_shortcut

    @property
    def windows_stop_start_keyboard_shortcut(self):
        """Gets the windows_stop_start_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501


        :return: The windows_stop_start_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501
        :rtype: ModelsKeyboardShortcut
        """
        return self._windows_stop_start_keyboard_shortcut

    @windows_stop_start_keyboard_shortcut.setter
    def windows_stop_start_keyboard_shortcut(self, windows_stop_start_keyboard_shortcut):
        """Sets the windows_stop_start_keyboard_shortcut of this ModelsAllPreferences.


        :param windows_stop_start_keyboard_shortcut: The windows_stop_start_keyboard_shortcut of this ModelsAllPreferences.  # noqa: E501
        :type: ModelsKeyboardShortcut
        """

        self._windows_stop_start_keyboard_shortcut = windows_stop_start_keyboard_shortcut

    @property
    def windows_theme(self):
        """Gets the windows_theme of this ModelsAllPreferences.  # noqa: E501


        :return: The windows_theme of this ModelsAllPreferences.  # noqa: E501
        :rtype: str
        """
        return self._windows_theme

    @windows_theme.setter
    def windows_theme(self, windows_theme):
        """Sets the windows_theme of this ModelsAllPreferences.


        :param windows_theme: The windows_theme of this ModelsAllPreferences.  # noqa: E501
        :type: str
        """

        self._windows_theme = windows_theme

    @property
    def workout_default_project_id(self):
        """Gets the workout_default_project_id of this ModelsAllPreferences.  # noqa: E501


        :return: The workout_default_project_id of this ModelsAllPreferences.  # noqa: E501
        :rtype: int
        """
        return self._workout_default_project_id

    @workout_default_project_id.setter
    def workout_default_project_id(self, workout_default_project_id):
        """Sets the workout_default_project_id of this ModelsAllPreferences.


        :param workout_default_project_id: The workout_default_project_id of this ModelsAllPreferences.  # noqa: E501
        :type: int
        """

        self._workout_default_project_id = workout_default_project_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsAllPreferences, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsAllPreferences):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsAllPreferences):
            return True

        return self.to_dict() != other.to_dict()
