"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ModelsCountry:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "country_code": "str",
        "default_currency_id": "int",
        "id": "int",
        "name": "str",
        "vat_applicable": "bool",
        "vat_percentage": "float",
        "vat_regex": "str",
    }

    attribute_map = {
        "country_code": "country_code",
        "default_currency_id": "default_currency_id",
        "id": "id",
        "name": "name",
        "vat_applicable": "vat_applicable",
        "vat_percentage": "vat_percentage",
        "vat_regex": "vat_regex",
    }

    def __init__(
        self,
        country_code=None,
        default_currency_id=None,
        id=None,
        name=None,
        vat_applicable=None,
        vat_percentage=None,
        vat_regex=None,
        _configuration=None,
    ):  # noqa: E501
        """ModelsCountry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._country_code = None
        self._default_currency_id = None
        self._id = None
        self._name = None
        self._vat_applicable = None
        self._vat_percentage = None
        self._vat_regex = None
        self.discriminator = None

        if country_code is not None:
            self.country_code = country_code
        if default_currency_id is not None:
            self.default_currency_id = default_currency_id
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if vat_applicable is not None:
            self.vat_applicable = vat_applicable
        if vat_percentage is not None:
            self.vat_percentage = vat_percentage
        if vat_regex is not None:
            self.vat_regex = vat_regex

    @property
    def country_code(self):
        """Gets the country_code of this ModelsCountry.  # noqa: E501


        :return: The country_code of this ModelsCountry.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ModelsCountry.


        :param country_code: The country_code of this ModelsCountry.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def default_currency_id(self):
        """Gets the default_currency_id of this ModelsCountry.  # noqa: E501


        :return: The default_currency_id of this ModelsCountry.  # noqa: E501
        :rtype: int
        """
        return self._default_currency_id

    @default_currency_id.setter
    def default_currency_id(self, default_currency_id):
        """Sets the default_currency_id of this ModelsCountry.


        :param default_currency_id: The default_currency_id of this ModelsCountry.  # noqa: E501
        :type: int
        """

        self._default_currency_id = default_currency_id

    @property
    def id(self):
        """Gets the id of this ModelsCountry.  # noqa: E501


        :return: The id of this ModelsCountry.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelsCountry.


        :param id: The id of this ModelsCountry.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ModelsCountry.  # noqa: E501


        :return: The name of this ModelsCountry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsCountry.


        :param name: The name of this ModelsCountry.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def vat_applicable(self):
        """Gets the vat_applicable of this ModelsCountry.  # noqa: E501


        :return: The vat_applicable of this ModelsCountry.  # noqa: E501
        :rtype: bool
        """
        return self._vat_applicable

    @vat_applicable.setter
    def vat_applicable(self, vat_applicable):
        """Sets the vat_applicable of this ModelsCountry.


        :param vat_applicable: The vat_applicable of this ModelsCountry.  # noqa: E501
        :type: bool
        """

        self._vat_applicable = vat_applicable

    @property
    def vat_percentage(self):
        """Gets the vat_percentage of this ModelsCountry.  # noqa: E501


        :return: The vat_percentage of this ModelsCountry.  # noqa: E501
        :rtype: float
        """
        return self._vat_percentage

    @vat_percentage.setter
    def vat_percentage(self, vat_percentage):
        """Sets the vat_percentage of this ModelsCountry.


        :param vat_percentage: The vat_percentage of this ModelsCountry.  # noqa: E501
        :type: float
        """

        self._vat_percentage = vat_percentage

    @property
    def vat_regex(self):
        """Gets the vat_regex of this ModelsCountry.  # noqa: E501


        :return: The vat_regex of this ModelsCountry.  # noqa: E501
        :rtype: str
        """
        return self._vat_regex

    @vat_regex.setter
    def vat_regex(self, vat_regex):
        """Sets the vat_regex of this ModelsCountry.


        :param vat_regex: The vat_regex of this ModelsCountry.  # noqa: E501
        :type: str
        """

        self._vat_regex = vat_regex

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsCountry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsCountry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsCountry):
            return True

        return self.to_dict() != other.to_dict()
