"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

from __future__ import annotations  # noqa: F401
import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from toggl.models.models_company import ModelsCompany  # noqa: F401
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from toggl.models.models_contact_detail import ModelsContactDetail  # noqa: F401
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from toggl.models.models_payment_detail import ModelsPaymentDetail  # noqa: F401


class ModelsCustomer:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "balance_in_cents": "int",
        "balance_updated_at": "str",
        "company": "ModelsCompany",
        "company_id": "int",
        "contact_detail": "ModelsContactDetail",
        "created_at": "str",
        "currency_id": "int",
        "customer_id": "int",
        "deleted_at": "str",
        "organization_id": "int",
        "payment_detail": "ModelsPaymentDetail",
        "purchase_order_enabled": "bool",
    }

    attribute_map = {
        "balance_in_cents": "balance_in_cents",
        "balance_updated_at": "balance_updated_at",
        "company": "company",
        "company_id": "company_id",
        "contact_detail": "contact_detail",
        "created_at": "created_at",
        "currency_id": "currency_id",
        "customer_id": "customer_id",
        "deleted_at": "deleted_at",
        "organization_id": "organization_id",
        "payment_detail": "payment_detail",
        "purchase_order_enabled": "purchase_order_enabled",
    }

    def __init__(
        self,
        balance_in_cents: int = None,
        balance_updated_at: str = None,
        company: ModelsCompany = None,
        company_id: int = None,
        contact_detail: ModelsContactDetail = None,
        created_at: str = None,
        currency_id: int = None,
        customer_id: int = None,
        deleted_at: str = None,
        organization_id: int = None,
        payment_detail: ModelsPaymentDetail = None,
        purchase_order_enabled: bool = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        ModelsCustomer - a model defined in Swagger

        Parameters:
          balance_in_cents (int): Optional
          balance_updated_at (str): Optional
          company (ModelsCompany): Optional
          company_id (int): Optional
          contact_detail (ModelsContactDetail): Optional
          created_at (str): Optional
          currency_id (int): Optional
          customer_id (int): Optional
          deleted_at (str): Optional
          organization_id (int): Optional
          payment_detail (ModelsPaymentDetail): Optional
          purchase_order_enabled (bool): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._balance_in_cents = None
        self._balance_updated_at = None
        self._company = None
        self._company_id = None
        self._contact_detail = None
        self._created_at = None
        self._currency_id = None
        self._customer_id = None
        self._deleted_at = None
        self._organization_id = None
        self._payment_detail = None
        self._purchase_order_enabled = None
        self.discriminator = None

        if balance_in_cents is not None:
            self.balance_in_cents = balance_in_cents
        if balance_updated_at is not None:
            self.balance_updated_at = balance_updated_at
        if company is not None:
            self.company = company
        if company_id is not None:
            self.company_id = company_id
        if contact_detail is not None:
            self.contact_detail = contact_detail
        if created_at is not None:
            self.created_at = created_at
        if currency_id is not None:
            self.currency_id = currency_id
        if customer_id is not None:
            self.customer_id = customer_id
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if organization_id is not None:
            self.organization_id = organization_id
        if payment_detail is not None:
            self.payment_detail = payment_detail
        if purchase_order_enabled is not None:
            self.purchase_order_enabled = purchase_order_enabled

    @property
    def balance_in_cents(self) -> int:
        """Gets the balance_in_cents of this ModelsCustomer.  # noqa: E501

        DEPRECATED  # noqa: E501

        :return: The balance_in_cents of this ModelsCustomer.  # noqa: E501
        :rtype: int
        """
        return self._balance_in_cents

    @balance_in_cents.setter
    def balance_in_cents(self, balance_in_cents: int):
        """Sets the balance_in_cents of this ModelsCustomer.

        DEPRECATED  # noqa: E501

        :param balance_in_cents: The balance_in_cents of this ModelsCustomer.  # noqa: E501
        :type: int
        """

        self._balance_in_cents = balance_in_cents

    @property
    def balance_updated_at(self) -> str:
        """Gets the balance_updated_at of this ModelsCustomer.  # noqa: E501

        DEPRECATED  # noqa: E501

        :return: The balance_updated_at of this ModelsCustomer.  # noqa: E501
        :rtype: str
        """
        return self._balance_updated_at

    @balance_updated_at.setter
    def balance_updated_at(self, balance_updated_at: str):
        """Sets the balance_updated_at of this ModelsCustomer.

        DEPRECATED  # noqa: E501

        :param balance_updated_at: The balance_updated_at of this ModelsCustomer.  # noqa: E501
        :type: str
        """

        self._balance_updated_at = balance_updated_at

    @property
    def company(self) -> ModelsCompany:
        """Gets the company of this ModelsCustomer.  # noqa: E501


        :return: The company of this ModelsCustomer.  # noqa: E501
        :rtype: ModelsCompany
        """
        return self._company

    @company.setter
    def company(self, company: ModelsCompany):
        """Sets the company of this ModelsCustomer.


        :param company: The company of this ModelsCustomer.  # noqa: E501
        :type: ModelsCompany
        """

        self._company = company

    @property
    def company_id(self) -> int:
        """Gets the company_id of this ModelsCustomer.  # noqa: E501


        :return: The company_id of this ModelsCustomer.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id: int):
        """Sets the company_id of this ModelsCustomer.


        :param company_id: The company_id of this ModelsCustomer.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def contact_detail(self) -> ModelsContactDetail:
        """Gets the contact_detail of this ModelsCustomer.  # noqa: E501


        :return: The contact_detail of this ModelsCustomer.  # noqa: E501
        :rtype: ModelsContactDetail
        """
        return self._contact_detail

    @contact_detail.setter
    def contact_detail(self, contact_detail: ModelsContactDetail):
        """Sets the contact_detail of this ModelsCustomer.


        :param contact_detail: The contact_detail of this ModelsCustomer.  # noqa: E501
        :type: ModelsContactDetail
        """

        self._contact_detail = contact_detail

    @property
    def created_at(self) -> str:
        """Gets the created_at of this ModelsCustomer.  # noqa: E501


        :return: The created_at of this ModelsCustomer.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this ModelsCustomer.


        :param created_at: The created_at of this ModelsCustomer.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def currency_id(self) -> int:
        """Gets the currency_id of this ModelsCustomer.  # noqa: E501


        :return: The currency_id of this ModelsCustomer.  # noqa: E501
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id: int):
        """Sets the currency_id of this ModelsCustomer.


        :param currency_id: The currency_id of this ModelsCustomer.  # noqa: E501
        :type: int
        """

        self._currency_id = currency_id

    @property
    def customer_id(self) -> int:
        """Gets the customer_id of this ModelsCustomer.  # noqa: E501


        :return: The customer_id of this ModelsCustomer.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: int):
        """Sets the customer_id of this ModelsCustomer.


        :param customer_id: The customer_id of this ModelsCustomer.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def deleted_at(self) -> str:
        """Gets the deleted_at of this ModelsCustomer.  # noqa: E501


        :return: The deleted_at of this ModelsCustomer.  # noqa: E501
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at: str):
        """Sets the deleted_at of this ModelsCustomer.


        :param deleted_at: The deleted_at of this ModelsCustomer.  # noqa: E501
        :type: str
        """

        self._deleted_at = deleted_at

    @property
    def organization_id(self) -> int:
        """Gets the organization_id of this ModelsCustomer.  # noqa: E501


        :return: The organization_id of this ModelsCustomer.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id: int):
        """Sets the organization_id of this ModelsCustomer.


        :param organization_id: The organization_id of this ModelsCustomer.  # noqa: E501
        :type: int
        """

        self._organization_id = organization_id

    @property
    def payment_detail(self) -> ModelsPaymentDetail:
        """Gets the payment_detail of this ModelsCustomer.  # noqa: E501


        :return: The payment_detail of this ModelsCustomer.  # noqa: E501
        :rtype: ModelsPaymentDetail
        """
        return self._payment_detail

    @payment_detail.setter
    def payment_detail(self, payment_detail: ModelsPaymentDetail):
        """Sets the payment_detail of this ModelsCustomer.


        :param payment_detail: The payment_detail of this ModelsCustomer.  # noqa: E501
        :type: ModelsPaymentDetail
        """

        self._payment_detail = payment_detail

    @property
    def purchase_order_enabled(self) -> bool:
        """Gets the purchase_order_enabled of this ModelsCustomer.  # noqa: E501


        :return: The purchase_order_enabled of this ModelsCustomer.  # noqa: E501
        :rtype: bool
        """
        return self._purchase_order_enabled

    @purchase_order_enabled.setter
    def purchase_order_enabled(self, purchase_order_enabled: bool):
        """Sets the purchase_order_enabled of this ModelsCustomer.


        :param purchase_order_enabled: The purchase_order_enabled of this ModelsCustomer.  # noqa: E501
        :type: bool
        """

        self._purchase_order_enabled = purchase_order_enabled

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsCustomer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsCustomer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsCustomer):
            return True

        return self.to_dict() != other.to_dict()
