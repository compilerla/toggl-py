"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration


class ModelsEvent:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "all_day": "bool",
        "background": "str",
        "calendar_event_id": "int",
        "calendar_id": "int",
        "end_time": "str",
        "external_id": "str",
        "foreground": "str",
        "html_link": "str",
        "ical_uid": "str",
        "start_time": "str",
        "title": "str",
        "updated": "str",
    }

    attribute_map = {
        "all_day": "all_day",
        "background": "background",
        "calendar_event_id": "calendar_event_id",
        "calendar_id": "calendar_id",
        "end_time": "end_time",
        "external_id": "external_id",
        "foreground": "foreground",
        "html_link": "html_link",
        "ical_uid": "ical_uid",
        "start_time": "start_time",
        "title": "title",
        "updated": "updated",
    }

    def __init__(
        self,
        all_day: bool = None,
        background: str = None,
        calendar_event_id: int = None,
        calendar_id: int = None,
        end_time: str = None,
        external_id: str = None,
        foreground: str = None,
        html_link: str = None,
        ical_uid: str = None,
        start_time: str = None,
        title: str = None,
        updated: str = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        ModelsEvent - a model defined in Swagger

        Parameters:
          all_day (bool): Optional
          background (str): Optional
          calendar_event_id (int): Optional
          calendar_id (int): Optional
          end_time (str): Optional
          external_id (str): Optional
          foreground (str): Optional
          html_link (str): Optional
          ical_uid (str): Optional
          start_time (str): Optional
          title (str): Optional
          updated (str): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._all_day = None
        self._background = None
        self._calendar_event_id = None
        self._calendar_id = None
        self._end_time = None
        self._external_id = None
        self._foreground = None
        self._html_link = None
        self._ical_uid = None
        self._start_time = None
        self._title = None
        self._updated = None
        self.discriminator = None

        if all_day is not None:
            self.all_day = all_day
        if background is not None:
            self.background = background
        if calendar_event_id is not None:
            self.calendar_event_id = calendar_event_id
        if calendar_id is not None:
            self.calendar_id = calendar_id
        if end_time is not None:
            self.end_time = end_time
        if external_id is not None:
            self.external_id = external_id
        if foreground is not None:
            self.foreground = foreground
        if html_link is not None:
            self.html_link = html_link
        if ical_uid is not None:
            self.ical_uid = ical_uid
        if start_time is not None:
            self.start_time = start_time
        if title is not None:
            self.title = title
        if updated is not None:
            self.updated = updated

    @property
    def all_day(self) -> bool:
        """Gets the all_day of this ModelsEvent.  # noqa: E501


        :return: The all_day of this ModelsEvent.  # noqa: E501
        :rtype: bool
        """
        return self._all_day

    @all_day.setter
    def all_day(self, all_day: bool):
        """Sets the all_day of this ModelsEvent.


        :param all_day: The all_day of this ModelsEvent.  # noqa: E501
        :type: bool
        """

        self._all_day = all_day

    @property
    def background(self) -> str:
        """Gets the background of this ModelsEvent.  # noqa: E501


        :return: The background of this ModelsEvent.  # noqa: E501
        :rtype: str
        """
        return self._background

    @background.setter
    def background(self, background: str):
        """Sets the background of this ModelsEvent.


        :param background: The background of this ModelsEvent.  # noqa: E501
        :type: str
        """

        self._background = background

    @property
    def calendar_event_id(self) -> int:
        """Gets the calendar_event_id of this ModelsEvent.  # noqa: E501


        :return: The calendar_event_id of this ModelsEvent.  # noqa: E501
        :rtype: int
        """
        return self._calendar_event_id

    @calendar_event_id.setter
    def calendar_event_id(self, calendar_event_id: int):
        """Sets the calendar_event_id of this ModelsEvent.


        :param calendar_event_id: The calendar_event_id of this ModelsEvent.  # noqa: E501
        :type: int
        """

        self._calendar_event_id = calendar_event_id

    @property
    def calendar_id(self) -> int:
        """Gets the calendar_id of this ModelsEvent.  # noqa: E501


        :return: The calendar_id of this ModelsEvent.  # noqa: E501
        :rtype: int
        """
        return self._calendar_id

    @calendar_id.setter
    def calendar_id(self, calendar_id: int):
        """Sets the calendar_id of this ModelsEvent.


        :param calendar_id: The calendar_id of this ModelsEvent.  # noqa: E501
        :type: int
        """

        self._calendar_id = calendar_id

    @property
    def end_time(self) -> str:
        """Gets the end_time of this ModelsEvent.  # noqa: E501


        :return: The end_time of this ModelsEvent.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: str):
        """Sets the end_time of this ModelsEvent.


        :param end_time: The end_time of this ModelsEvent.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def external_id(self) -> str:
        """Gets the external_id of this ModelsEvent.  # noqa: E501


        :return: The external_id of this ModelsEvent.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id: str):
        """Sets the external_id of this ModelsEvent.


        :param external_id: The external_id of this ModelsEvent.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def foreground(self) -> str:
        """Gets the foreground of this ModelsEvent.  # noqa: E501


        :return: The foreground of this ModelsEvent.  # noqa: E501
        :rtype: str
        """
        return self._foreground

    @foreground.setter
    def foreground(self, foreground: str):
        """Sets the foreground of this ModelsEvent.


        :param foreground: The foreground of this ModelsEvent.  # noqa: E501
        :type: str
        """

        self._foreground = foreground

    @property
    def html_link(self) -> str:
        """Gets the html_link of this ModelsEvent.  # noqa: E501


        :return: The html_link of this ModelsEvent.  # noqa: E501
        :rtype: str
        """
        return self._html_link

    @html_link.setter
    def html_link(self, html_link: str):
        """Sets the html_link of this ModelsEvent.


        :param html_link: The html_link of this ModelsEvent.  # noqa: E501
        :type: str
        """

        self._html_link = html_link

    @property
    def ical_uid(self) -> str:
        """Gets the ical_uid of this ModelsEvent.  # noqa: E501

        This is an unique ID used to avoid duplicate events when getting information from multiple sources. E. G. the mobile may get calendar events without BE integration, so they should be able to tell if an event is repeated.  # noqa: E501

        :return: The ical_uid of this ModelsEvent.  # noqa: E501
        :rtype: str
        """
        return self._ical_uid

    @ical_uid.setter
    def ical_uid(self, ical_uid: str):
        """Sets the ical_uid of this ModelsEvent.

        This is an unique ID used to avoid duplicate events when getting information from multiple sources. E. G. the mobile may get calendar events without BE integration, so they should be able to tell if an event is repeated.  # noqa: E501

        :param ical_uid: The ical_uid of this ModelsEvent.  # noqa: E501
        :type: str
        """

        self._ical_uid = ical_uid

    @property
    def start_time(self) -> str:
        """Gets the start_time of this ModelsEvent.  # noqa: E501


        :return: The start_time of this ModelsEvent.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: str):
        """Sets the start_time of this ModelsEvent.


        :param start_time: The start_time of this ModelsEvent.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def title(self) -> str:
        """Gets the title of this ModelsEvent.  # noqa: E501


        :return: The title of this ModelsEvent.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this ModelsEvent.


        :param title: The title of this ModelsEvent.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def updated(self) -> str:
        """Gets the updated of this ModelsEvent.  # noqa: E501


        :return: The updated of this ModelsEvent.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated: str):
        """Sets the updated of this ModelsEvent.


        :param updated: The updated of this ModelsEvent.  # noqa: E501
        :type: str
        """

        self._updated = updated

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsEvent):
            return True

        return self.to_dict() != other.to_dict()
