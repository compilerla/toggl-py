"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ModelsFavorite:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "billable": "bool",
        "client_name": "str",
        "created_at": "str",
        "deleted_at": "str",
        "description": "str",
        "favorite_id": "int",
        "project_active": "bool",
        "project_color": "str",
        "project_id": "int",
        "project_name": "str",
        "public": "bool",
        "rank": "int",
        "tag_ids": "ModelsIntArray",
        "task_id": "int",
        "task_name": "str",
        "workspace_id": "int",
    }

    attribute_map = {
        "billable": "billable",
        "client_name": "client_name",
        "created_at": "created_at",
        "deleted_at": "deleted_at",
        "description": "description",
        "favorite_id": "favorite_id",
        "project_active": "project_active",
        "project_color": "project_color",
        "project_id": "project_id",
        "project_name": "project_name",
        "public": "public",
        "rank": "rank",
        "tag_ids": "tag_ids",
        "task_id": "task_id",
        "task_name": "task_name",
        "workspace_id": "workspace_id",
    }

    def __init__(
        self,
        billable=None,
        client_name=None,
        created_at=None,
        deleted_at=None,
        description=None,
        favorite_id=None,
        project_active=None,
        project_color=None,
        project_id=None,
        project_name=None,
        public=None,
        rank=None,
        tag_ids=None,
        task_id=None,
        task_name=None,
        workspace_id=None,
        _configuration=None,
    ):  # noqa: E501
        """ModelsFavorite - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._billable = None
        self._client_name = None
        self._created_at = None
        self._deleted_at = None
        self._description = None
        self._favorite_id = None
        self._project_active = None
        self._project_color = None
        self._project_id = None
        self._project_name = None
        self._public = None
        self._rank = None
        self._tag_ids = None
        self._task_id = None
        self._task_name = None
        self._workspace_id = None
        self.discriminator = None

        if billable is not None:
            self.billable = billable
        if client_name is not None:
            self.client_name = client_name
        if created_at is not None:
            self.created_at = created_at
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if description is not None:
            self.description = description
        if favorite_id is not None:
            self.favorite_id = favorite_id
        if project_active is not None:
            self.project_active = project_active
        if project_color is not None:
            self.project_color = project_color
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if public is not None:
            self.public = public
        if rank is not None:
            self.rank = rank
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if task_id is not None:
            self.task_id = task_id
        if task_name is not None:
            self.task_name = task_name
        if workspace_id is not None:
            self.workspace_id = workspace_id

    @property
    def billable(self):
        """Gets the billable of this ModelsFavorite.  # noqa: E501


        :return: The billable of this ModelsFavorite.  # noqa: E501
        :rtype: bool
        """
        return self._billable

    @billable.setter
    def billable(self, billable):
        """Sets the billable of this ModelsFavorite.


        :param billable: The billable of this ModelsFavorite.  # noqa: E501
        :type: bool
        """

        self._billable = billable

    @property
    def client_name(self):
        """Gets the client_name of this ModelsFavorite.  # noqa: E501

        Related entities meta fields - if requested  # noqa: E501

        :return: The client_name of this ModelsFavorite.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this ModelsFavorite.

        Related entities meta fields - if requested  # noqa: E501

        :param client_name: The client_name of this ModelsFavorite.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def created_at(self):
        """Gets the created_at of this ModelsFavorite.  # noqa: E501


        :return: The created_at of this ModelsFavorite.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ModelsFavorite.


        :param created_at: The created_at of this ModelsFavorite.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this ModelsFavorite.  # noqa: E501


        :return: The deleted_at of this ModelsFavorite.  # noqa: E501
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this ModelsFavorite.


        :param deleted_at: The deleted_at of this ModelsFavorite.  # noqa: E501
        :type: str
        """

        self._deleted_at = deleted_at

    @property
    def description(self):
        """Gets the description of this ModelsFavorite.  # noqa: E501


        :return: The description of this ModelsFavorite.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelsFavorite.


        :param description: The description of this ModelsFavorite.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def favorite_id(self):
        """Gets the favorite_id of this ModelsFavorite.  # noqa: E501


        :return: The favorite_id of this ModelsFavorite.  # noqa: E501
        :rtype: int
        """
        return self._favorite_id

    @favorite_id.setter
    def favorite_id(self, favorite_id):
        """Sets the favorite_id of this ModelsFavorite.


        :param favorite_id: The favorite_id of this ModelsFavorite.  # noqa: E501
        :type: int
        """

        self._favorite_id = favorite_id

    @property
    def project_active(self):
        """Gets the project_active of this ModelsFavorite.  # noqa: E501


        :return: The project_active of this ModelsFavorite.  # noqa: E501
        :rtype: bool
        """
        return self._project_active

    @project_active.setter
    def project_active(self, project_active):
        """Sets the project_active of this ModelsFavorite.


        :param project_active: The project_active of this ModelsFavorite.  # noqa: E501
        :type: bool
        """

        self._project_active = project_active

    @property
    def project_color(self):
        """Gets the project_color of this ModelsFavorite.  # noqa: E501


        :return: The project_color of this ModelsFavorite.  # noqa: E501
        :rtype: str
        """
        return self._project_color

    @project_color.setter
    def project_color(self, project_color):
        """Sets the project_color of this ModelsFavorite.


        :param project_color: The project_color of this ModelsFavorite.  # noqa: E501
        :type: str
        """

        self._project_color = project_color

    @property
    def project_id(self):
        """Gets the project_id of this ModelsFavorite.  # noqa: E501


        :return: The project_id of this ModelsFavorite.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ModelsFavorite.


        :param project_id: The project_id of this ModelsFavorite.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this ModelsFavorite.  # noqa: E501


        :return: The project_name of this ModelsFavorite.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this ModelsFavorite.


        :param project_name: The project_name of this ModelsFavorite.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def public(self):
        """Gets the public of this ModelsFavorite.  # noqa: E501


        :return: The public of this ModelsFavorite.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this ModelsFavorite.


        :param public: The public of this ModelsFavorite.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def rank(self):
        """Gets the rank of this ModelsFavorite.  # noqa: E501


        :return: The rank of this ModelsFavorite.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this ModelsFavorite.


        :param rank: The rank of this ModelsFavorite.  # noqa: E501
        :type: int
        """

        self._rank = rank

    @property
    def tag_ids(self):
        """Gets the tag_ids of this ModelsFavorite.  # noqa: E501


        :return: The tag_ids of this ModelsFavorite.  # noqa: E501
        :rtype: ModelsIntArray
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this ModelsFavorite.


        :param tag_ids: The tag_ids of this ModelsFavorite.  # noqa: E501
        :type: ModelsIntArray
        """

        self._tag_ids = tag_ids

    @property
    def task_id(self):
        """Gets the task_id of this ModelsFavorite.  # noqa: E501


        :return: The task_id of this ModelsFavorite.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this ModelsFavorite.


        :param task_id: The task_id of this ModelsFavorite.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def task_name(self):
        """Gets the task_name of this ModelsFavorite.  # noqa: E501


        :return: The task_name of this ModelsFavorite.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this ModelsFavorite.


        :param task_name: The task_name of this ModelsFavorite.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def workspace_id(self):
        """Gets the workspace_id of this ModelsFavorite.  # noqa: E501


        :return: The workspace_id of this ModelsFavorite.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this ModelsFavorite.


        :param workspace_id: The workspace_id of this ModelsFavorite.  # noqa: E501
        :type: int
        """

        self._workspace_id = workspace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsFavorite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsFavorite):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsFavorite):
            return True

        return self.to_dict() != other.to_dict()
