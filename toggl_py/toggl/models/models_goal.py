"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ModelsGoal:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "archived_at": "str",
        "created_at": "str",
        "deleted_at": "str",
        "description": "str",
        "end": "str",
        "icon": "int",
        "icon_color": "str",
        "id": "int",
        "name": "str",
        "start": "str",
        "type": "str",
        "user_id": "int",
        "workspace_id": "int",
    }

    attribute_map = {
        "archived_at": "archivedAt",
        "created_at": "createdAt",
        "deleted_at": "deletedAt",
        "description": "description",
        "end": "end",
        "icon": "icon",
        "icon_color": "iconColor",
        "id": "id",
        "name": "name",
        "start": "start",
        "type": "type",
        "user_id": "userID",
        "workspace_id": "workspaceID",
    }

    def __init__(
        self,
        archived_at=None,
        created_at=None,
        deleted_at=None,
        description=None,
        end=None,
        icon=None,
        icon_color=None,
        id=None,
        name=None,
        start=None,
        type=None,
        user_id=None,
        workspace_id=None,
        _configuration=None,
    ):  # noqa: E501
        """ModelsGoal - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._archived_at = None
        self._created_at = None
        self._deleted_at = None
        self._description = None
        self._end = None
        self._icon = None
        self._icon_color = None
        self._id = None
        self._name = None
        self._start = None
        self._type = None
        self._user_id = None
        self._workspace_id = None
        self.discriminator = None

        if archived_at is not None:
            self.archived_at = archived_at
        if created_at is not None:
            self.created_at = created_at
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if description is not None:
            self.description = description
        if end is not None:
            self.end = end
        if icon is not None:
            self.icon = icon
        if icon_color is not None:
            self.icon_color = icon_color
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if start is not None:
            self.start = start
        if type is not None:
            self.type = type
        if user_id is not None:
            self.user_id = user_id
        if workspace_id is not None:
            self.workspace_id = workspace_id

    @property
    def archived_at(self):
        """Gets the archived_at of this ModelsGoal.  # noqa: E501


        :return: The archived_at of this ModelsGoal.  # noqa: E501
        :rtype: str
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this ModelsGoal.


        :param archived_at: The archived_at of this ModelsGoal.  # noqa: E501
        :type: str
        """

        self._archived_at = archived_at

    @property
    def created_at(self):
        """Gets the created_at of this ModelsGoal.  # noqa: E501


        :return: The created_at of this ModelsGoal.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ModelsGoal.


        :param created_at: The created_at of this ModelsGoal.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this ModelsGoal.  # noqa: E501


        :return: The deleted_at of this ModelsGoal.  # noqa: E501
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this ModelsGoal.


        :param deleted_at: The deleted_at of this ModelsGoal.  # noqa: E501
        :type: str
        """

        self._deleted_at = deleted_at

    @property
    def description(self):
        """Gets the description of this ModelsGoal.  # noqa: E501


        :return: The description of this ModelsGoal.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelsGoal.


        :param description: The description of this ModelsGoal.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def end(self):
        """Gets the end of this ModelsGoal.  # noqa: E501


        :return: The end of this ModelsGoal.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this ModelsGoal.


        :param end: The end of this ModelsGoal.  # noqa: E501
        :type: str
        """

        self._end = end

    @property
    def icon(self):
        """Gets the icon of this ModelsGoal.  # noqa: E501


        :return: The icon of this ModelsGoal.  # noqa: E501
        :rtype: int
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this ModelsGoal.


        :param icon: The icon of this ModelsGoal.  # noqa: E501
        :type: int
        """

        self._icon = icon

    @property
    def icon_color(self):
        """Gets the icon_color of this ModelsGoal.  # noqa: E501


        :return: The icon_color of this ModelsGoal.  # noqa: E501
        :rtype: str
        """
        return self._icon_color

    @icon_color.setter
    def icon_color(self, icon_color):
        """Sets the icon_color of this ModelsGoal.


        :param icon_color: The icon_color of this ModelsGoal.  # noqa: E501
        :type: str
        """

        self._icon_color = icon_color

    @property
    def id(self):
        """Gets the id of this ModelsGoal.  # noqa: E501


        :return: The id of this ModelsGoal.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelsGoal.


        :param id: The id of this ModelsGoal.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ModelsGoal.  # noqa: E501


        :return: The name of this ModelsGoal.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsGoal.


        :param name: The name of this ModelsGoal.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start(self):
        """Gets the start of this ModelsGoal.  # noqa: E501


        :return: The start of this ModelsGoal.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ModelsGoal.


        :param start: The start of this ModelsGoal.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def type(self):
        """Gets the type of this ModelsGoal.  # noqa: E501


        :return: The type of this ModelsGoal.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelsGoal.


        :param type: The type of this ModelsGoal.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this ModelsGoal.  # noqa: E501


        :return: The user_id of this ModelsGoal.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ModelsGoal.


        :param user_id: The user_id of this ModelsGoal.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this ModelsGoal.  # noqa: E501


        :return: The workspace_id of this ModelsGoal.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this ModelsGoal.


        :param workspace_id: The workspace_id of this ModelsGoal.  # noqa: E501
        :type: int
        """

        self._workspace_id = workspace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsGoal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsGoal):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsGoal):
            return True

        return self.to_dict() != other.to_dict()
