"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ModelsGoalCadence:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "achieved": "bool",
        "cadence_end": "str",
        "cadence_start": "str",
        "goal_cadence_id": "int",
        "goal_parameter_id": "int",
        "streak": "int",
        "tracked_value": "int",
    }

    attribute_map = {
        "achieved": "achieved",
        "cadence_end": "cadence_end",
        "cadence_start": "cadence_start",
        "goal_cadence_id": "goal_cadence_id",
        "goal_parameter_id": "goal_parameter_id",
        "streak": "streak",
        "tracked_value": "tracked_value",
    }

    def __init__(
        self,
        achieved=None,
        cadence_end=None,
        cadence_start=None,
        goal_cadence_id=None,
        goal_parameter_id=None,
        streak=None,
        tracked_value=None,
        _configuration=None,
    ):  # noqa: E501
        """ModelsGoalCadence - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._achieved = None
        self._cadence_end = None
        self._cadence_start = None
        self._goal_cadence_id = None
        self._goal_parameter_id = None
        self._streak = None
        self._tracked_value = None
        self.discriminator = None

        if achieved is not None:
            self.achieved = achieved
        if cadence_end is not None:
            self.cadence_end = cadence_end
        if cadence_start is not None:
            self.cadence_start = cadence_start
        if goal_cadence_id is not None:
            self.goal_cadence_id = goal_cadence_id
        if goal_parameter_id is not None:
            self.goal_parameter_id = goal_parameter_id
        if streak is not None:
            self.streak = streak
        if tracked_value is not None:
            self.tracked_value = tracked_value

    @property
    def achieved(self):
        """Gets the achieved of this ModelsGoalCadence.  # noqa: E501


        :return: The achieved of this ModelsGoalCadence.  # noqa: E501
        :rtype: bool
        """
        return self._achieved

    @achieved.setter
    def achieved(self, achieved):
        """Sets the achieved of this ModelsGoalCadence.


        :param achieved: The achieved of this ModelsGoalCadence.  # noqa: E501
        :type: bool
        """

        self._achieved = achieved

    @property
    def cadence_end(self):
        """Gets the cadence_end of this ModelsGoalCadence.  # noqa: E501


        :return: The cadence_end of this ModelsGoalCadence.  # noqa: E501
        :rtype: str
        """
        return self._cadence_end

    @cadence_end.setter
    def cadence_end(self, cadence_end):
        """Sets the cadence_end of this ModelsGoalCadence.


        :param cadence_end: The cadence_end of this ModelsGoalCadence.  # noqa: E501
        :type: str
        """

        self._cadence_end = cadence_end

    @property
    def cadence_start(self):
        """Gets the cadence_start of this ModelsGoalCadence.  # noqa: E501


        :return: The cadence_start of this ModelsGoalCadence.  # noqa: E501
        :rtype: str
        """
        return self._cadence_start

    @cadence_start.setter
    def cadence_start(self, cadence_start):
        """Sets the cadence_start of this ModelsGoalCadence.


        :param cadence_start: The cadence_start of this ModelsGoalCadence.  # noqa: E501
        :type: str
        """

        self._cadence_start = cadence_start

    @property
    def goal_cadence_id(self):
        """Gets the goal_cadence_id of this ModelsGoalCadence.  # noqa: E501


        :return: The goal_cadence_id of this ModelsGoalCadence.  # noqa: E501
        :rtype: int
        """
        return self._goal_cadence_id

    @goal_cadence_id.setter
    def goal_cadence_id(self, goal_cadence_id):
        """Sets the goal_cadence_id of this ModelsGoalCadence.


        :param goal_cadence_id: The goal_cadence_id of this ModelsGoalCadence.  # noqa: E501
        :type: int
        """

        self._goal_cadence_id = goal_cadence_id

    @property
    def goal_parameter_id(self):
        """Gets the goal_parameter_id of this ModelsGoalCadence.  # noqa: E501


        :return: The goal_parameter_id of this ModelsGoalCadence.  # noqa: E501
        :rtype: int
        """
        return self._goal_parameter_id

    @goal_parameter_id.setter
    def goal_parameter_id(self, goal_parameter_id):
        """Sets the goal_parameter_id of this ModelsGoalCadence.


        :param goal_parameter_id: The goal_parameter_id of this ModelsGoalCadence.  # noqa: E501
        :type: int
        """

        self._goal_parameter_id = goal_parameter_id

    @property
    def streak(self):
        """Gets the streak of this ModelsGoalCadence.  # noqa: E501


        :return: The streak of this ModelsGoalCadence.  # noqa: E501
        :rtype: int
        """
        return self._streak

    @streak.setter
    def streak(self, streak):
        """Sets the streak of this ModelsGoalCadence.


        :param streak: The streak of this ModelsGoalCadence.  # noqa: E501
        :type: int
        """

        self._streak = streak

    @property
    def tracked_value(self):
        """Gets the tracked_value of this ModelsGoalCadence.  # noqa: E501


        :return: The tracked_value of this ModelsGoalCadence.  # noqa: E501
        :rtype: int
        """
        return self._tracked_value

    @tracked_value.setter
    def tracked_value(self, tracked_value):
        """Sets the tracked_value of this ModelsGoalCadence.


        :param tracked_value: The tracked_value of this ModelsGoalCadence.  # noqa: E501
        :type: int
        """

        self._tracked_value = tracked_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsGoalCadence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsGoalCadence):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsGoalCadence):
            return True

        return self.to_dict() != other.to_dict()
