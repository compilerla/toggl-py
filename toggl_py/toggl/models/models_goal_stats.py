"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration


class ModelsGoalStats:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {"longest_streak": "int", "status": "str", "successful_cadences": "int", "total_cadences": "int"}

    attribute_map = {
        "longest_streak": "longest_streak",
        "status": "status",
        "successful_cadences": "successful_cadences",
        "total_cadences": "total_cadences",
    }

    def __init__(
        self,
        longest_streak: int = None,
        status: str = None,
        successful_cadences: int = None,
        total_cadences: int = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        ModelsGoalStats - a model defined in Swagger

        Parameters:
          longest_streak (int): Optional
          status (str): Optional
          successful_cadences (int): Optional
          total_cadences (int): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._longest_streak = None
        self._status = None
        self._successful_cadences = None
        self._total_cadences = None
        self.discriminator = None

        if longest_streak is not None:
            self.longest_streak = longest_streak
        if status is not None:
            self.status = status
        if successful_cadences is not None:
            self.successful_cadences = successful_cadences
        if total_cadences is not None:
            self.total_cadences = total_cadences

    @property
    def longest_streak(self) -> int:
        """Gets the longest_streak of this ModelsGoalStats.  # noqa: E501


        :return: The longest_streak of this ModelsGoalStats.  # noqa: E501
        :rtype: int
        """
        return self._longest_streak

    @longest_streak.setter
    def longest_streak(self, longest_streak: int):
        """Sets the longest_streak of this ModelsGoalStats.


        :param longest_streak: The longest_streak of this ModelsGoalStats.  # noqa: E501
        :type: int
        """

        self._longest_streak = longest_streak

    @property
    def status(self) -> str:
        """Gets the status of this ModelsGoalStats.  # noqa: E501

        open, finished or archived  # noqa: E501

        :return: The status of this ModelsGoalStats.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ModelsGoalStats.

        open, finished or archived  # noqa: E501

        :param status: The status of this ModelsGoalStats.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def successful_cadences(self) -> int:
        """Gets the successful_cadences of this ModelsGoalStats.  # noqa: E501


        :return: The successful_cadences of this ModelsGoalStats.  # noqa: E501
        :rtype: int
        """
        return self._successful_cadences

    @successful_cadences.setter
    def successful_cadences(self, successful_cadences: int):
        """Sets the successful_cadences of this ModelsGoalStats.


        :param successful_cadences: The successful_cadences of this ModelsGoalStats.  # noqa: E501
        :type: int
        """

        self._successful_cadences = successful_cadences

    @property
    def total_cadences(self) -> int:
        """Gets the total_cadences of this ModelsGoalStats.  # noqa: E501


        :return: The total_cadences of this ModelsGoalStats.  # noqa: E501
        :rtype: int
        """
        return self._total_cadences

    @total_cadences.setter
    def total_cadences(self, total_cadences: int):
        """Sets the total_cadences of this ModelsGoalStats.


        :param total_cadences: The total_cadences of this ModelsGoalStats.  # noqa: E501
        :type: int
        """

        self._total_cadences = total_cadences

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsGoalStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsGoalStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsGoalStats):
            return True

        return self.to_dict() != other.to_dict()
