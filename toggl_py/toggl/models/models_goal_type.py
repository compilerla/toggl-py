"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration
from toggl.models.models_goal_project_type import ModelsGoalProjectType  # noqa: F401


class ModelsGoalType:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {"billable": "bool", "projects": "list[ModelsGoalProjectType]"}

    attribute_map = {"billable": "billable", "projects": "projects"}

    def __init__(
        self,
        billable: bool = None,
        projects: list[ModelsGoalProjectType] = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        ModelsGoalType - a model defined in Swagger

        Parameters:
          billable (bool): Optional
          projects (list[ModelsGoalProjectType]): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._billable = None
        self._projects = None
        self.discriminator = None

        if billable is not None:
            self.billable = billable
        if projects is not None:
            self.projects = projects

    @property
    def billable(self) -> bool:
        """Gets the billable of this ModelsGoalType.  # noqa: E501

        For simplicity's sake we will not use GoalBillableType here  # noqa: E501

        :return: The billable of this ModelsGoalType.  # noqa: E501
        :rtype: bool
        """
        return self._billable

    @billable.setter
    def billable(self, billable: bool):
        """Sets the billable of this ModelsGoalType.

        For simplicity's sake we will not use GoalBillableType here  # noqa: E501

        :param billable: The billable of this ModelsGoalType.  # noqa: E501
        :type: bool
        """

        self._billable = billable

    @property
    def projects(self) -> list[ModelsGoalProjectType]:
        """Gets the projects of this ModelsGoalType.  # noqa: E501


        :return: The projects of this ModelsGoalType.  # noqa: E501
        :rtype: list[ModelsGoalProjectType]
        """
        return self._projects

    @projects.setter
    def projects(self, projects: list[ModelsGoalProjectType]):
        """Sets the projects of this ModelsGoalType.


        :param projects: The projects of this ModelsGoalType.  # noqa: E501
        :type: list[ModelsGoalProjectType]
        """

        self._projects = projects

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsGoalType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsGoalType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsGoalType):
            return True

        return self.to_dict() != other.to_dict()
