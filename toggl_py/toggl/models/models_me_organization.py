"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration
from toggl.models.models_trial_info import ModelsTrialInfo  # noqa: F401


class ModelsMeOrganization:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "admin": "bool",
        "at": "datetime",
        "created_at": "datetime",
        "id": "int",
        "is_multi_workspace_enabled": "bool",
        "is_unified": "bool",
        "max_data_retention_days": "int",
        "max_workspaces": "int",
        "name": "str",
        "owner": "bool",
        "payment_methods": "str",
        "permissions": "str",
        "pricing_plan_id": "int",
        "server_deleted_at": "datetime",
        "suspended_at": "str",
        "trial_info": "ModelsTrialInfo",
        "user_count": "int",
    }

    attribute_map = {
        "admin": "admin",
        "at": "at",
        "created_at": "created_at",
        "id": "id",
        "is_multi_workspace_enabled": "is_multi_workspace_enabled",
        "is_unified": "is_unified",
        "max_data_retention_days": "max_data_retention_days",
        "max_workspaces": "max_workspaces",
        "name": "name",
        "owner": "owner",
        "payment_methods": "payment_methods",
        "permissions": "permissions",
        "pricing_plan_id": "pricing_plan_id",
        "server_deleted_at": "server_deleted_at",
        "suspended_at": "suspended_at",
        "trial_info": "trial_info",
        "user_count": "user_count",
    }

    def __init__(
        self,
        admin: bool = None,
        at: datetime = None,
        created_at: datetime = None,
        id: int = None,
        is_multi_workspace_enabled: bool = None,
        is_unified: bool = None,
        max_data_retention_days: int = None,
        max_workspaces: int = None,
        name: str = None,
        owner: bool = None,
        payment_methods: str = None,
        permissions: str = None,
        pricing_plan_id: int = None,
        server_deleted_at: datetime = None,
        suspended_at: str = None,
        trial_info: ModelsTrialInfo = None,
        user_count: int = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        ModelsMeOrganization - a model defined in Swagger

        Parameters:
          admin (bool): Optional
          at (datetime): Optional
          created_at (datetime): Optional
          id (int): Optional
          is_multi_workspace_enabled (bool): Optional
          is_unified (bool): Optional
          max_data_retention_days (int): Optional
          max_workspaces (int): Optional
          name (str): Optional
          owner (bool): Optional
          payment_methods (str): Optional
          permissions (str): Optional
          pricing_plan_id (int): Optional
          server_deleted_at (datetime): Optional
          suspended_at (str): Optional
          trial_info (ModelsTrialInfo): Optional
          user_count (int): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._admin = None
        self._at = None
        self._created_at = None
        self._id = None
        self._is_multi_workspace_enabled = None
        self._is_unified = None
        self._max_data_retention_days = None
        self._max_workspaces = None
        self._name = None
        self._owner = None
        self._payment_methods = None
        self._permissions = None
        self._pricing_plan_id = None
        self._server_deleted_at = None
        self._suspended_at = None
        self._trial_info = None
        self._user_count = None
        self.discriminator = None

        if admin is not None:
            self.admin = admin
        if at is not None:
            self.at = at
        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if is_multi_workspace_enabled is not None:
            self.is_multi_workspace_enabled = is_multi_workspace_enabled
        if is_unified is not None:
            self.is_unified = is_unified
        if max_data_retention_days is not None:
            self.max_data_retention_days = max_data_retention_days
        if max_workspaces is not None:
            self.max_workspaces = max_workspaces
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if payment_methods is not None:
            self.payment_methods = payment_methods
        if permissions is not None:
            self.permissions = permissions
        if pricing_plan_id is not None:
            self.pricing_plan_id = pricing_plan_id
        if server_deleted_at is not None:
            self.server_deleted_at = server_deleted_at
        if suspended_at is not None:
            self.suspended_at = suspended_at
        if trial_info is not None:
            self.trial_info = trial_info
        if user_count is not None:
            self.user_count = user_count

    @property
    def admin(self) -> bool:
        """Gets the admin of this ModelsMeOrganization.  # noqa: E501

        Whether the requester is an admin of the organization  # noqa: E501

        :return: The admin of this ModelsMeOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin: bool):
        """Sets the admin of this ModelsMeOrganization.

        Whether the requester is an admin of the organization  # noqa: E501

        :param admin: The admin of this ModelsMeOrganization.  # noqa: E501
        :type: bool
        """

        self._admin = admin

    @property
    def at(self) -> datetime:
        """Gets the at of this ModelsMeOrganization.  # noqa: E501

        Organization's last modification date  # noqa: E501

        :return: The at of this ModelsMeOrganization.  # noqa: E501
        :rtype: datetime
        """
        return self._at

    @at.setter
    def at(self, at: datetime):
        """Sets the at of this ModelsMeOrganization.

        Organization's last modification date  # noqa: E501

        :param at: The at of this ModelsMeOrganization.  # noqa: E501
        :type: datetime
        """

        self._at = at

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this ModelsMeOrganization.  # noqa: E501

        Organization's creation date  # noqa: E501

        :return: The created_at of this ModelsMeOrganization.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this ModelsMeOrganization.

        Organization's creation date  # noqa: E501

        :param created_at: The created_at of this ModelsMeOrganization.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def id(self) -> int:
        """Gets the id of this ModelsMeOrganization.  # noqa: E501

        Organization ID  # noqa: E501

        :return: The id of this ModelsMeOrganization.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this ModelsMeOrganization.

        Organization ID  # noqa: E501

        :param id: The id of this ModelsMeOrganization.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_multi_workspace_enabled(self) -> bool:
        """Gets the is_multi_workspace_enabled of this ModelsMeOrganization.  # noqa: E501

        Is true when the organization option is_multi_workspace_enabled is set  # noqa: E501

        :return: The is_multi_workspace_enabled of this ModelsMeOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._is_multi_workspace_enabled

    @is_multi_workspace_enabled.setter
    def is_multi_workspace_enabled(self, is_multi_workspace_enabled: bool):
        """Sets the is_multi_workspace_enabled of this ModelsMeOrganization.

        Is true when the organization option is_multi_workspace_enabled is set  # noqa: E501

        :param is_multi_workspace_enabled: The is_multi_workspace_enabled of this ModelsMeOrganization.  # noqa: E501
        :type: bool
        """

        self._is_multi_workspace_enabled = is_multi_workspace_enabled

    @property
    def is_unified(self) -> bool:
        """Gets the is_unified of this ModelsMeOrganization.  # noqa: E501


        :return: The is_unified of this ModelsMeOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._is_unified

    @is_unified.setter
    def is_unified(self, is_unified: bool):
        """Sets the is_unified of this ModelsMeOrganization.


        :param is_unified: The is_unified of this ModelsMeOrganization.  # noqa: E501
        :type: bool
        """

        self._is_unified = is_unified

    @property
    def max_data_retention_days(self) -> int:
        """Gets the max_data_retention_days of this ModelsMeOrganization.  # noqa: E501

        How far back free workspaces in this org can access data.  # noqa: E501

        :return: The max_data_retention_days of this ModelsMeOrganization.  # noqa: E501
        :rtype: int
        """
        return self._max_data_retention_days

    @max_data_retention_days.setter
    def max_data_retention_days(self, max_data_retention_days: int):
        """Sets the max_data_retention_days of this ModelsMeOrganization.

        How far back free workspaces in this org can access data.  # noqa: E501

        :param max_data_retention_days: The max_data_retention_days of this ModelsMeOrganization.  # noqa: E501
        :type: int
        """

        self._max_data_retention_days = max_data_retention_days

    @property
    def max_workspaces(self) -> int:
        """Gets the max_workspaces of this ModelsMeOrganization.  # noqa: E501

        Maximum number of workspaces allowed for the organization  # noqa: E501

        :return: The max_workspaces of this ModelsMeOrganization.  # noqa: E501
        :rtype: int
        """
        return self._max_workspaces

    @max_workspaces.setter
    def max_workspaces(self, max_workspaces: int):
        """Sets the max_workspaces of this ModelsMeOrganization.

        Maximum number of workspaces allowed for the organization  # noqa: E501

        :param max_workspaces: The max_workspaces of this ModelsMeOrganization.  # noqa: E501
        :type: int
        """

        self._max_workspaces = max_workspaces

    @property
    def name(self) -> str:
        """Gets the name of this ModelsMeOrganization.  # noqa: E501

        Organization Name  # noqa: E501

        :return: The name of this ModelsMeOrganization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ModelsMeOrganization.

        Organization Name  # noqa: E501

        :param name: The name of this ModelsMeOrganization.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner(self) -> bool:
        """Gets the owner of this ModelsMeOrganization.  # noqa: E501

        Whether the requester is a the owner of the organization  # noqa: E501

        :return: The owner of this ModelsMeOrganization.  # noqa: E501
        :rtype: bool
        """
        return self._owner

    @owner.setter
    def owner(self, owner: bool):
        """Sets the owner of this ModelsMeOrganization.

        Whether the requester is a the owner of the organization  # noqa: E501

        :param owner: The owner of this ModelsMeOrganization.  # noqa: E501
        :type: bool
        """

        self._owner = owner

    @property
    def payment_methods(self) -> str:
        """Gets the payment_methods of this ModelsMeOrganization.  # noqa: E501

        Organization's subscription payment methods. Omitted if empty.  # noqa: E501

        :return: The payment_methods of this ModelsMeOrganization.  # noqa: E501
        :rtype: str
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods: str):
        """Sets the payment_methods of this ModelsMeOrganization.

        Organization's subscription payment methods. Omitted if empty.  # noqa: E501

        :param payment_methods: The payment_methods of this ModelsMeOrganization.  # noqa: E501
        :type: str
        """

        self._payment_methods = payment_methods

    @property
    def permissions(self) -> str:
        """Gets the permissions of this ModelsMeOrganization.  # noqa: E501


        :return: The permissions of this ModelsMeOrganization.  # noqa: E501
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions: str):
        """Sets the permissions of this ModelsMeOrganization.


        :param permissions: The permissions of this ModelsMeOrganization.  # noqa: E501
        :type: str
        """

        self._permissions = permissions

    @property
    def pricing_plan_id(self) -> int:
        """Gets the pricing_plan_id of this ModelsMeOrganization.  # noqa: E501

        Organization plan ID  # noqa: E501

        :return: The pricing_plan_id of this ModelsMeOrganization.  # noqa: E501
        :rtype: int
        """
        return self._pricing_plan_id

    @pricing_plan_id.setter
    def pricing_plan_id(self, pricing_plan_id: int):
        """Sets the pricing_plan_id of this ModelsMeOrganization.

        Organization plan ID  # noqa: E501

        :param pricing_plan_id: The pricing_plan_id of this ModelsMeOrganization.  # noqa: E501
        :type: int
        """

        self._pricing_plan_id = pricing_plan_id

    @property
    def server_deleted_at(self) -> datetime:
        """Gets the server_deleted_at of this ModelsMeOrganization.  # noqa: E501

        Organization's delete date  # noqa: E501

        :return: The server_deleted_at of this ModelsMeOrganization.  # noqa: E501
        :rtype: datetime
        """
        return self._server_deleted_at

    @server_deleted_at.setter
    def server_deleted_at(self, server_deleted_at: datetime):
        """Sets the server_deleted_at of this ModelsMeOrganization.

        Organization's delete date  # noqa: E501

        :param server_deleted_at: The server_deleted_at of this ModelsMeOrganization.  # noqa: E501
        :type: datetime
        """

        self._server_deleted_at = server_deleted_at

    @property
    def suspended_at(self) -> str:
        """Gets the suspended_at of this ModelsMeOrganization.  # noqa: E501

        Whether the organization is currently suspended  # noqa: E501

        :return: The suspended_at of this ModelsMeOrganization.  # noqa: E501
        :rtype: str
        """
        return self._suspended_at

    @suspended_at.setter
    def suspended_at(self, suspended_at: str):
        """Sets the suspended_at of this ModelsMeOrganization.

        Whether the organization is currently suspended  # noqa: E501

        :param suspended_at: The suspended_at of this ModelsMeOrganization.  # noqa: E501
        :type: str
        """

        self._suspended_at = suspended_at

    @property
    def trial_info(self) -> ModelsTrialInfo:
        """Gets the trial_info of this ModelsMeOrganization.  # noqa: E501


        :return: The trial_info of this ModelsMeOrganization.  # noqa: E501
        :rtype: ModelsTrialInfo
        """
        return self._trial_info

    @trial_info.setter
    def trial_info(self, trial_info: ModelsTrialInfo):
        """Sets the trial_info of this ModelsMeOrganization.


        :param trial_info: The trial_info of this ModelsMeOrganization.  # noqa: E501
        :type: ModelsTrialInfo
        """

        self._trial_info = trial_info

    @property
    def user_count(self) -> int:
        """Gets the user_count of this ModelsMeOrganization.  # noqa: E501

        Number of organization users  # noqa: E501

        :return: The user_count of this ModelsMeOrganization.  # noqa: E501
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count: int):
        """Sets the user_count of this ModelsMeOrganization.

        Number of organization users  # noqa: E501

        :param user_count: The user_count of this ModelsMeOrganization.  # noqa: E501
        :type: int
        """

        self._user_count = user_count

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsMeOrganization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsMeOrganization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsMeOrganization):
            return True

        return self.to_dict() != other.to_dict()
