"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ModelsMobileFeedback:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "attachment": "list[int]",
        "attachment_name": "str",
        "data": "list[ModelsMobileFeedbackData]",
        "email": "str",
        "intercom_enabled": "bool",
        "message": "str",
        "user_id": "int",
    }

    attribute_map = {
        "attachment": "attachment",
        "attachment_name": "attachment_name",
        "data": "data",
        "email": "email",
        "intercom_enabled": "intercomEnabled",
        "message": "message",
        "user_id": "userID",
    }

    def __init__(
        self,
        attachment=None,
        attachment_name=None,
        data=None,
        email=None,
        intercom_enabled=None,
        message=None,
        user_id=None,
        _configuration=None,
    ):  # noqa: E501
        """ModelsMobileFeedback - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attachment = None
        self._attachment_name = None
        self._data = None
        self._email = None
        self._intercom_enabled = None
        self._message = None
        self._user_id = None
        self.discriminator = None

        if attachment is not None:
            self.attachment = attachment
        if attachment_name is not None:
            self.attachment_name = attachment_name
        if data is not None:
            self.data = data
        if email is not None:
            self.email = email
        if intercom_enabled is not None:
            self.intercom_enabled = intercom_enabled
        if message is not None:
            self.message = message
        if user_id is not None:
            self.user_id = user_id

    @property
    def attachment(self):
        """Gets the attachment of this ModelsMobileFeedback.  # noqa: E501


        :return: The attachment of this ModelsMobileFeedback.  # noqa: E501
        :rtype: list[int]
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this ModelsMobileFeedback.


        :param attachment: The attachment of this ModelsMobileFeedback.  # noqa: E501
        :type: list[int]
        """

        self._attachment = attachment

    @property
    def attachment_name(self):
        """Gets the attachment_name of this ModelsMobileFeedback.  # noqa: E501


        :return: The attachment_name of this ModelsMobileFeedback.  # noqa: E501
        :rtype: str
        """
        return self._attachment_name

    @attachment_name.setter
    def attachment_name(self, attachment_name):
        """Sets the attachment_name of this ModelsMobileFeedback.


        :param attachment_name: The attachment_name of this ModelsMobileFeedback.  # noqa: E501
        :type: str
        """

        self._attachment_name = attachment_name

    @property
    def data(self):
        """Gets the data of this ModelsMobileFeedback.  # noqa: E501


        :return: The data of this ModelsMobileFeedback.  # noqa: E501
        :rtype: list[ModelsMobileFeedbackData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ModelsMobileFeedback.


        :param data: The data of this ModelsMobileFeedback.  # noqa: E501
        :type: list[ModelsMobileFeedbackData]
        """

        self._data = data

    @property
    def email(self):
        """Gets the email of this ModelsMobileFeedback.  # noqa: E501


        :return: The email of this ModelsMobileFeedback.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ModelsMobileFeedback.


        :param email: The email of this ModelsMobileFeedback.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def intercom_enabled(self):
        """Gets the intercom_enabled of this ModelsMobileFeedback.  # noqa: E501


        :return: The intercom_enabled of this ModelsMobileFeedback.  # noqa: E501
        :rtype: bool
        """
        return self._intercom_enabled

    @intercom_enabled.setter
    def intercom_enabled(self, intercom_enabled):
        """Sets the intercom_enabled of this ModelsMobileFeedback.


        :param intercom_enabled: The intercom_enabled of this ModelsMobileFeedback.  # noqa: E501
        :type: bool
        """

        self._intercom_enabled = intercom_enabled

    @property
    def message(self):
        """Gets the message of this ModelsMobileFeedback.  # noqa: E501


        :return: The message of this ModelsMobileFeedback.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ModelsMobileFeedback.


        :param message: The message of this ModelsMobileFeedback.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def user_id(self):
        """Gets the user_id of this ModelsMobileFeedback.  # noqa: E501


        :return: The user_id of this ModelsMobileFeedback.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ModelsMobileFeedback.


        :param user_id: The user_id of this ModelsMobileFeedback.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsMobileFeedback, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsMobileFeedback):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsMobileFeedback):
            return True

        return self.to_dict() != other.to_dict()
