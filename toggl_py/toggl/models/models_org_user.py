"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ModelsOrgUser:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "admin": "bool",
        "avatar_url": "str",
        "can_edit_email": "bool",
        "email": "str",
        "groups": "list[ModelsGroupDict]",
        "id": "int",
        "inactive": "bool",
        "invitation_code": "str",
        "joined": "bool",
        "name": "str",
        "owner": "bool",
        "user_id": "int",
        "workspaces": "list[ModelsOrgUserWorkspace]",
    }

    attribute_map = {
        "admin": "admin",
        "avatar_url": "avatar_url",
        "can_edit_email": "can_edit_email",
        "email": "email",
        "groups": "groups",
        "id": "id",
        "inactive": "inactive",
        "invitation_code": "invitation_code",
        "joined": "joined",
        "name": "name",
        "owner": "owner",
        "user_id": "user_id",
        "workspaces": "workspaces",
    }

    def __init__(
        self,
        admin=None,
        avatar_url=None,
        can_edit_email=None,
        email=None,
        groups=None,
        id=None,
        inactive=None,
        invitation_code=None,
        joined=None,
        name=None,
        owner=None,
        user_id=None,
        workspaces=None,
        _configuration=None,
    ):  # noqa: E501
        """ModelsOrgUser - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._admin = None
        self._avatar_url = None
        self._can_edit_email = None
        self._email = None
        self._groups = None
        self._id = None
        self._inactive = None
        self._invitation_code = None
        self._joined = None
        self._name = None
        self._owner = None
        self._user_id = None
        self._workspaces = None
        self.discriminator = None

        if admin is not None:
            self.admin = admin
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if can_edit_email is not None:
            self.can_edit_email = can_edit_email
        if email is not None:
            self.email = email
        if groups is not None:
            self.groups = groups
        if id is not None:
            self.id = id
        if inactive is not None:
            self.inactive = inactive
        if invitation_code is not None:
            self.invitation_code = invitation_code
        if joined is not None:
            self.joined = joined
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if user_id is not None:
            self.user_id = user_id
        if workspaces is not None:
            self.workspaces = workspaces

    @property
    def admin(self):
        """Gets the admin of this ModelsOrgUser.  # noqa: E501


        :return: The admin of this ModelsOrgUser.  # noqa: E501
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this ModelsOrgUser.


        :param admin: The admin of this ModelsOrgUser.  # noqa: E501
        :type: bool
        """

        self._admin = admin

    @property
    def avatar_url(self):
        """Gets the avatar_url of this ModelsOrgUser.  # noqa: E501


        :return: The avatar_url of this ModelsOrgUser.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this ModelsOrgUser.


        :param avatar_url: The avatar_url of this ModelsOrgUser.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def can_edit_email(self):
        """Gets the can_edit_email of this ModelsOrgUser.  # noqa: E501


        :return: The can_edit_email of this ModelsOrgUser.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_email

    @can_edit_email.setter
    def can_edit_email(self, can_edit_email):
        """Sets the can_edit_email of this ModelsOrgUser.


        :param can_edit_email: The can_edit_email of this ModelsOrgUser.  # noqa: E501
        :type: bool
        """

        self._can_edit_email = can_edit_email

    @property
    def email(self):
        """Gets the email of this ModelsOrgUser.  # noqa: E501


        :return: The email of this ModelsOrgUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ModelsOrgUser.


        :param email: The email of this ModelsOrgUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def groups(self):
        """Gets the groups of this ModelsOrgUser.  # noqa: E501


        :return: The groups of this ModelsOrgUser.  # noqa: E501
        :rtype: list[ModelsGroupDict]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ModelsOrgUser.


        :param groups: The groups of this ModelsOrgUser.  # noqa: E501
        :type: list[ModelsGroupDict]
        """

        self._groups = groups

    @property
    def id(self):
        """Gets the id of this ModelsOrgUser.  # noqa: E501


        :return: The id of this ModelsOrgUser.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelsOrgUser.


        :param id: The id of this ModelsOrgUser.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def inactive(self):
        """Gets the inactive of this ModelsOrgUser.  # noqa: E501


        :return: The inactive of this ModelsOrgUser.  # noqa: E501
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this ModelsOrgUser.


        :param inactive: The inactive of this ModelsOrgUser.  # noqa: E501
        :type: bool
        """

        self._inactive = inactive

    @property
    def invitation_code(self):
        """Gets the invitation_code of this ModelsOrgUser.  # noqa: E501


        :return: The invitation_code of this ModelsOrgUser.  # noqa: E501
        :rtype: str
        """
        return self._invitation_code

    @invitation_code.setter
    def invitation_code(self, invitation_code):
        """Sets the invitation_code of this ModelsOrgUser.


        :param invitation_code: The invitation_code of this ModelsOrgUser.  # noqa: E501
        :type: str
        """

        self._invitation_code = invitation_code

    @property
    def joined(self):
        """Gets the joined of this ModelsOrgUser.  # noqa: E501


        :return: The joined of this ModelsOrgUser.  # noqa: E501
        :rtype: bool
        """
        return self._joined

    @joined.setter
    def joined(self, joined):
        """Sets the joined of this ModelsOrgUser.


        :param joined: The joined of this ModelsOrgUser.  # noqa: E501
        :type: bool
        """

        self._joined = joined

    @property
    def name(self):
        """Gets the name of this ModelsOrgUser.  # noqa: E501


        :return: The name of this ModelsOrgUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsOrgUser.


        :param name: The name of this ModelsOrgUser.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this ModelsOrgUser.  # noqa: E501


        :return: The owner of this ModelsOrgUser.  # noqa: E501
        :rtype: bool
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ModelsOrgUser.


        :param owner: The owner of this ModelsOrgUser.  # noqa: E501
        :type: bool
        """

        self._owner = owner

    @property
    def user_id(self):
        """Gets the user_id of this ModelsOrgUser.  # noqa: E501


        :return: The user_id of this ModelsOrgUser.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ModelsOrgUser.


        :param user_id: The user_id of this ModelsOrgUser.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def workspaces(self):
        """Gets the workspaces of this ModelsOrgUser.  # noqa: E501


        :return: The workspaces of this ModelsOrgUser.  # noqa: E501
        :rtype: list[ModelsOrgUserWorkspace]
        """
        return self._workspaces

    @workspaces.setter
    def workspaces(self, workspaces):
        """Sets the workspaces of this ModelsOrgUser.


        :param workspaces: The workspaces of this ModelsOrgUser.  # noqa: E501
        :type: list[ModelsOrgUserWorkspace]
        """

        self._workspaces = workspaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsOrgUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsOrgUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsOrgUser):
            return True

        return self.to_dict() != other.to_dict()
