"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ModelsOrgUserWorkspaceDetails:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "admin": "bool",
        "cost": "float",
        "default_currency": "str",
        "groups": "list[ModelsGroupDict]",
        "inactive": "bool",
        "rate": "float",
        "role": "str",
        "working_hours": "float",
        "workspace_id": "int",
        "workspace_name": "str",
        "workspace_user_id": "int",
    }

    attribute_map = {
        "admin": "admin",
        "cost": "cost",
        "default_currency": "default_currency",
        "groups": "groups",
        "inactive": "inactive",
        "rate": "rate",
        "role": "role",
        "working_hours": "working_hours",
        "workspace_id": "workspace_id",
        "workspace_name": "workspace_name",
        "workspace_user_id": "workspace_user_id",
    }

    def __init__(
        self,
        admin=None,
        cost=None,
        default_currency=None,
        groups=None,
        inactive=None,
        rate=None,
        role=None,
        working_hours=None,
        workspace_id=None,
        workspace_name=None,
        workspace_user_id=None,
        _configuration=None,
    ):  # noqa: E501
        """ModelsOrgUserWorkspaceDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._admin = None
        self._cost = None
        self._default_currency = None
        self._groups = None
        self._inactive = None
        self._rate = None
        self._role = None
        self._working_hours = None
        self._workspace_id = None
        self._workspace_name = None
        self._workspace_user_id = None
        self.discriminator = None

        if admin is not None:
            self.admin = admin
        if cost is not None:
            self.cost = cost
        if default_currency is not None:
            self.default_currency = default_currency
        if groups is not None:
            self.groups = groups
        if inactive is not None:
            self.inactive = inactive
        if rate is not None:
            self.rate = rate
        if role is not None:
            self.role = role
        if working_hours is not None:
            self.working_hours = working_hours
        if workspace_id is not None:
            self.workspace_id = workspace_id
        if workspace_name is not None:
            self.workspace_name = workspace_name
        if workspace_user_id is not None:
            self.workspace_user_id = workspace_user_id

    @property
    def admin(self):
        """Gets the admin of this ModelsOrgUserWorkspaceDetails.  # noqa: E501


        :return: The admin of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this ModelsOrgUserWorkspaceDetails.


        :param admin: The admin of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :type: bool
        """

        self._admin = admin

    @property
    def cost(self):
        """Gets the cost of this ModelsOrgUserWorkspaceDetails.  # noqa: E501


        :return: The cost of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ModelsOrgUserWorkspaceDetails.


        :param cost: The cost of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def default_currency(self):
        """Gets the default_currency of this ModelsOrgUserWorkspaceDetails.  # noqa: E501


        :return: The default_currency of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._default_currency

    @default_currency.setter
    def default_currency(self, default_currency):
        """Sets the default_currency of this ModelsOrgUserWorkspaceDetails.


        :param default_currency: The default_currency of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :type: str
        """

        self._default_currency = default_currency

    @property
    def groups(self):
        """Gets the groups of this ModelsOrgUserWorkspaceDetails.  # noqa: E501


        :return: The groups of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :rtype: list[ModelsGroupDict]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ModelsOrgUserWorkspaceDetails.


        :param groups: The groups of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :type: list[ModelsGroupDict]
        """

        self._groups = groups

    @property
    def inactive(self):
        """Gets the inactive of this ModelsOrgUserWorkspaceDetails.  # noqa: E501


        :return: The inactive of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this ModelsOrgUserWorkspaceDetails.


        :param inactive: The inactive of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :type: bool
        """

        self._inactive = inactive

    @property
    def rate(self):
        """Gets the rate of this ModelsOrgUserWorkspaceDetails.  # noqa: E501


        :return: The rate of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this ModelsOrgUserWorkspaceDetails.


        :param rate: The rate of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :type: float
        """

        self._rate = rate

    @property
    def role(self):
        """Gets the role of this ModelsOrgUserWorkspaceDetails.  # noqa: E501


        :return: The role of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ModelsOrgUserWorkspaceDetails.


        :param role: The role of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def working_hours(self):
        """Gets the working_hours of this ModelsOrgUserWorkspaceDetails.  # noqa: E501


        :return: The working_hours of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :rtype: float
        """
        return self._working_hours

    @working_hours.setter
    def working_hours(self, working_hours):
        """Sets the working_hours of this ModelsOrgUserWorkspaceDetails.


        :param working_hours: The working_hours of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :type: float
        """

        self._working_hours = working_hours

    @property
    def workspace_id(self):
        """Gets the workspace_id of this ModelsOrgUserWorkspaceDetails.  # noqa: E501


        :return: The workspace_id of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this ModelsOrgUserWorkspaceDetails.


        :param workspace_id: The workspace_id of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :type: int
        """

        self._workspace_id = workspace_id

    @property
    def workspace_name(self):
        """Gets the workspace_name of this ModelsOrgUserWorkspaceDetails.  # noqa: E501


        :return: The workspace_name of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :rtype: str
        """
        return self._workspace_name

    @workspace_name.setter
    def workspace_name(self, workspace_name):
        """Sets the workspace_name of this ModelsOrgUserWorkspaceDetails.


        :param workspace_name: The workspace_name of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :type: str
        """

        self._workspace_name = workspace_name

    @property
    def workspace_user_id(self):
        """Gets the workspace_user_id of this ModelsOrgUserWorkspaceDetails.  # noqa: E501


        :return: The workspace_user_id of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :rtype: int
        """
        return self._workspace_user_id

    @workspace_user_id.setter
    def workspace_user_id(self, workspace_user_id):
        """Sets the workspace_user_id of this ModelsOrgUserWorkspaceDetails.


        :param workspace_user_id: The workspace_user_id of this ModelsOrgUserWorkspaceDetails.  # noqa: E501
        :type: int
        """

        self._workspace_user_id = workspace_user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsOrgUserWorkspaceDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsOrgUserWorkspaceDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsOrgUserWorkspaceDetails):
            return True

        return self.to_dict() != other.to_dict()
