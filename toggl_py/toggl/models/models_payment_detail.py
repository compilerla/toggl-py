"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ModelsPaymentDetail:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "created_at": "str",
        "currency": "str",
        "customer_id": "int",
        "payment_type": "str",
        "reference": "str",
        "user_id": "int",
    }

    attribute_map = {
        "created_at": "created_at",
        "currency": "currency",
        "customer_id": "customer_id",
        "payment_type": "payment_type",
        "reference": "reference",
        "user_id": "user_id",
    }

    def __init__(
        self,
        created_at=None,
        currency=None,
        customer_id=None,
        payment_type=None,
        reference=None,
        user_id=None,
        _configuration=None,
    ):  # noqa: E501
        """ModelsPaymentDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_at = None
        self._currency = None
        self._customer_id = None
        self._payment_type = None
        self._reference = None
        self._user_id = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if currency is not None:
            self.currency = currency
        if customer_id is not None:
            self.customer_id = customer_id
        if payment_type is not None:
            self.payment_type = payment_type
        if reference is not None:
            self.reference = reference
        if user_id is not None:
            self.user_id = user_id

    @property
    def created_at(self):
        """Gets the created_at of this ModelsPaymentDetail.  # noqa: E501


        :return: The created_at of this ModelsPaymentDetail.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ModelsPaymentDetail.


        :param created_at: The created_at of this ModelsPaymentDetail.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this ModelsPaymentDetail.  # noqa: E501


        :return: The currency of this ModelsPaymentDetail.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ModelsPaymentDetail.


        :param currency: The currency of this ModelsPaymentDetail.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def customer_id(self):
        """Gets the customer_id of this ModelsPaymentDetail.  # noqa: E501


        :return: The customer_id of this ModelsPaymentDetail.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ModelsPaymentDetail.


        :param customer_id: The customer_id of this ModelsPaymentDetail.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def payment_type(self):
        """Gets the payment_type of this ModelsPaymentDetail.  # noqa: E501


        :return: The payment_type of this ModelsPaymentDetail.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this ModelsPaymentDetail.


        :param payment_type: The payment_type of this ModelsPaymentDetail.  # noqa: E501
        :type: str
        """

        self._payment_type = payment_type

    @property
    def reference(self):
        """Gets the reference of this ModelsPaymentDetail.  # noqa: E501


        :return: The reference of this ModelsPaymentDetail.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ModelsPaymentDetail.


        :param reference: The reference of this ModelsPaymentDetail.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def user_id(self):
        """Gets the user_id of this ModelsPaymentDetail.  # noqa: E501


        :return: The user_id of this ModelsPaymentDetail.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ModelsPaymentDetail.


        :param user_id: The user_id of this ModelsPaymentDetail.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsPaymentDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsPaymentDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsPaymentDetail):
            return True

        return self.to_dict() != other.to_dict()
