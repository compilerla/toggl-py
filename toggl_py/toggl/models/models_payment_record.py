"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ModelsPaymentRecord:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "creation_date": "datetime",
        "currency": "str",
        "currency_id": "int",
        "description": "str",
        "id": "int",
        "initial_id": "int",
        "record_type": "str",
        "total_amount": "int",
        "uid": "str",
    }

    attribute_map = {
        "creation_date": "creation_date",
        "currency": "currency",
        "currency_id": "currency_id",
        "description": "description",
        "id": "id",
        "initial_id": "initial_id",
        "record_type": "record_type",
        "total_amount": "total_amount",
        "uid": "uid",
    }

    def __init__(
        self,
        creation_date=None,
        currency=None,
        currency_id=None,
        description=None,
        id=None,
        initial_id=None,
        record_type=None,
        total_amount=None,
        uid=None,
        _configuration=None,
    ):  # noqa: E501
        """ModelsPaymentRecord - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._creation_date = None
        self._currency = None
        self._currency_id = None
        self._description = None
        self._id = None
        self._initial_id = None
        self._record_type = None
        self._total_amount = None
        self._uid = None
        self.discriminator = None

        if creation_date is not None:
            self.creation_date = creation_date
        if currency is not None:
            self.currency = currency
        if currency_id is not None:
            self.currency_id = currency_id
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if initial_id is not None:
            self.initial_id = initial_id
        if record_type is not None:
            self.record_type = record_type
        if total_amount is not None:
            self.total_amount = total_amount
        if uid is not None:
            self.uid = uid

    @property
    def creation_date(self):
        """Gets the creation_date of this ModelsPaymentRecord.  # noqa: E501


        :return: The creation_date of this ModelsPaymentRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ModelsPaymentRecord.


        :param creation_date: The creation_date of this ModelsPaymentRecord.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def currency(self):
        """Gets the currency of this ModelsPaymentRecord.  # noqa: E501

        DEPRECATED  # noqa: E501

        :return: The currency of this ModelsPaymentRecord.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ModelsPaymentRecord.

        DEPRECATED  # noqa: E501

        :param currency: The currency of this ModelsPaymentRecord.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def currency_id(self):
        """Gets the currency_id of this ModelsPaymentRecord.  # noqa: E501


        :return: The currency_id of this ModelsPaymentRecord.  # noqa: E501
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this ModelsPaymentRecord.


        :param currency_id: The currency_id of this ModelsPaymentRecord.  # noqa: E501
        :type: int
        """

        self._currency_id = currency_id

    @property
    def description(self):
        """Gets the description of this ModelsPaymentRecord.  # noqa: E501


        :return: The description of this ModelsPaymentRecord.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelsPaymentRecord.


        :param description: The description of this ModelsPaymentRecord.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ModelsPaymentRecord.  # noqa: E501


        :return: The id of this ModelsPaymentRecord.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelsPaymentRecord.


        :param id: The id of this ModelsPaymentRecord.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def initial_id(self):
        """Gets the initial_id of this ModelsPaymentRecord.  # noqa: E501


        :return: The initial_id of this ModelsPaymentRecord.  # noqa: E501
        :rtype: int
        """
        return self._initial_id

    @initial_id.setter
    def initial_id(self, initial_id):
        """Sets the initial_id of this ModelsPaymentRecord.


        :param initial_id: The initial_id of this ModelsPaymentRecord.  # noqa: E501
        :type: int
        """

        self._initial_id = initial_id

    @property
    def record_type(self):
        """Gets the record_type of this ModelsPaymentRecord.  # noqa: E501


        :return: The record_type of this ModelsPaymentRecord.  # noqa: E501
        :rtype: str
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this ModelsPaymentRecord.


        :param record_type: The record_type of this ModelsPaymentRecord.  # noqa: E501
        :type: str
        """

        self._record_type = record_type

    @property
    def total_amount(self):
        """Gets the total_amount of this ModelsPaymentRecord.  # noqa: E501


        :return: The total_amount of this ModelsPaymentRecord.  # noqa: E501
        :rtype: int
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this ModelsPaymentRecord.


        :param total_amount: The total_amount of this ModelsPaymentRecord.  # noqa: E501
        :type: int
        """

        self._total_amount = total_amount

    @property
    def uid(self):
        """Gets the uid of this ModelsPaymentRecord.  # noqa: E501


        :return: The uid of this ModelsPaymentRecord.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this ModelsPaymentRecord.


        :param uid: The uid of this ModelsPaymentRecord.  # noqa: E501
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsPaymentRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsPaymentRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsPaymentRecord):
            return True

        return self.to_dict() != other.to_dict()
