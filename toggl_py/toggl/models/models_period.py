"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration


class ModelsPeriod:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "created_at": "str",
        "finished_on": "str",
        "started_on": "str",
        "subscription_id": "int",
        "subscription_period_id": "int",
        "trial": "bool",
        "user_count": "int",
    }

    attribute_map = {
        "created_at": "created_at",
        "finished_on": "finished_on",
        "started_on": "started_on",
        "subscription_id": "subscription_id",
        "subscription_period_id": "subscription_period_id",
        "trial": "trial",
        "user_count": "user_count",
    }

    def __init__(
        self,
        created_at: str = None,
        finished_on: str = None,
        started_on: str = None,
        subscription_id: int = None,
        subscription_period_id: int = None,
        trial: bool = None,
        user_count: int = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        ModelsPeriod - a model defined in Swagger

        Parameters:
          created_at (str): Optional
          finished_on (str): Optional
          started_on (str): Optional
          subscription_id (int): Optional
          subscription_period_id (int): Optional
          trial (bool): Optional
          user_count (int): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_at = None
        self._finished_on = None
        self._started_on = None
        self._subscription_id = None
        self._subscription_period_id = None
        self._trial = None
        self._user_count = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if finished_on is not None:
            self.finished_on = finished_on
        if started_on is not None:
            self.started_on = started_on
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if subscription_period_id is not None:
            self.subscription_period_id = subscription_period_id
        if trial is not None:
            self.trial = trial
        if user_count is not None:
            self.user_count = user_count

    @property
    def created_at(self) -> str:
        """Gets the created_at of this ModelsPeriod.  # noqa: E501


        :return: The created_at of this ModelsPeriod.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this ModelsPeriod.


        :param created_at: The created_at of this ModelsPeriod.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def finished_on(self) -> str:
        """Gets the finished_on of this ModelsPeriod.  # noqa: E501


        :return: The finished_on of this ModelsPeriod.  # noqa: E501
        :rtype: str
        """
        return self._finished_on

    @finished_on.setter
    def finished_on(self, finished_on: str):
        """Sets the finished_on of this ModelsPeriod.


        :param finished_on: The finished_on of this ModelsPeriod.  # noqa: E501
        :type: str
        """

        self._finished_on = finished_on

    @property
    def started_on(self) -> str:
        """Gets the started_on of this ModelsPeriod.  # noqa: E501


        :return: The started_on of this ModelsPeriod.  # noqa: E501
        :rtype: str
        """
        return self._started_on

    @started_on.setter
    def started_on(self, started_on: str):
        """Sets the started_on of this ModelsPeriod.


        :param started_on: The started_on of this ModelsPeriod.  # noqa: E501
        :type: str
        """

        self._started_on = started_on

    @property
    def subscription_id(self) -> int:
        """Gets the subscription_id of this ModelsPeriod.  # noqa: E501


        :return: The subscription_id of this ModelsPeriod.  # noqa: E501
        :rtype: int
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id: int):
        """Sets the subscription_id of this ModelsPeriod.


        :param subscription_id: The subscription_id of this ModelsPeriod.  # noqa: E501
        :type: int
        """

        self._subscription_id = subscription_id

    @property
    def subscription_period_id(self) -> int:
        """Gets the subscription_period_id of this ModelsPeriod.  # noqa: E501


        :return: The subscription_period_id of this ModelsPeriod.  # noqa: E501
        :rtype: int
        """
        return self._subscription_period_id

    @subscription_period_id.setter
    def subscription_period_id(self, subscription_period_id: int):
        """Sets the subscription_period_id of this ModelsPeriod.


        :param subscription_period_id: The subscription_period_id of this ModelsPeriod.  # noqa: E501
        :type: int
        """

        self._subscription_period_id = subscription_period_id

    @property
    def trial(self) -> bool:
        """Gets the trial of this ModelsPeriod.  # noqa: E501


        :return: The trial of this ModelsPeriod.  # noqa: E501
        :rtype: bool
        """
        return self._trial

    @trial.setter
    def trial(self, trial: bool):
        """Sets the trial of this ModelsPeriod.


        :param trial: The trial of this ModelsPeriod.  # noqa: E501
        :type: bool
        """

        self._trial = trial

    @property
    def user_count(self) -> int:
        """Gets the user_count of this ModelsPeriod.  # noqa: E501


        :return: The user_count of this ModelsPeriod.  # noqa: E501
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count: int):
        """Sets the user_count of this ModelsPeriod.


        :param user_count: The user_count of this ModelsPeriod.  # noqa: E501
        :type: int
        """

        self._user_count = user_count

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsPeriod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsPeriod):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsPeriod):
            return True

        return self.to_dict() != other.to_dict()
