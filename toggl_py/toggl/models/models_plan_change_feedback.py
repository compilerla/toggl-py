"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ModelsPlanChangeFeedback:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {"comment": "str", "master_signup": "bool", "selections": "list[dict(str, str)]"}

    attribute_map = {"comment": "comment", "master_signup": "master_signup", "selections": "selections"}

    def __init__(self, comment=None, master_signup=None, selections=None, _configuration=None):  # noqa: E501
        """ModelsPlanChangeFeedback - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._comment = None
        self._master_signup = None
        self._selections = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if master_signup is not None:
            self.master_signup = master_signup
        if selections is not None:
            self.selections = selections

    @property
    def comment(self):
        """Gets the comment of this ModelsPlanChangeFeedback.  # noqa: E501


        :return: The comment of this ModelsPlanChangeFeedback.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ModelsPlanChangeFeedback.


        :param comment: The comment of this ModelsPlanChangeFeedback.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def master_signup(self):
        """Gets the master_signup of this ModelsPlanChangeFeedback.  # noqa: E501


        :return: The master_signup of this ModelsPlanChangeFeedback.  # noqa: E501
        :rtype: bool
        """
        return self._master_signup

    @master_signup.setter
    def master_signup(self, master_signup):
        """Sets the master_signup of this ModelsPlanChangeFeedback.


        :param master_signup: The master_signup of this ModelsPlanChangeFeedback.  # noqa: E501
        :type: bool
        """

        self._master_signup = master_signup

    @property
    def selections(self):
        """Gets the selections of this ModelsPlanChangeFeedback.  # noqa: E501


        :return: The selections of this ModelsPlanChangeFeedback.  # noqa: E501
        :rtype: list[dict(str, str)]
        """
        return self._selections

    @selections.setter
    def selections(self, selections):
        """Sets the selections of this ModelsPlanChangeFeedback.


        :param selections: The selections of this ModelsPlanChangeFeedback.  # noqa: E501
        :type: list[dict(str, str)]
        """

        self._selections = selections

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsPlanChangeFeedback, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsPlanChangeFeedback):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsPlanChangeFeedback):
            return True

        return self.to_dict() != other.to_dict()
