"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration
from toggl.models.models_recurring_period import ModelsRecurringPeriod  # noqa: F401
from toggl.models.models_recurring_project_parameters import ModelsRecurringProjectParameters  # noqa: F401


class ModelsProject:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "active": "bool",
        "actual_hours": "int",
        "actual_seconds": "int",
        "at": "str",
        "auto_estimates": "bool",
        "billable": "bool",
        "cid": "int",
        "client_id": "int",
        "color": "str",
        "created_at": "str",
        "currency": "str",
        "current_period": "ModelsRecurringPeriod",
        "end_date": "str",
        "estimated_hours": "int",
        "estimated_seconds": "int",
        "fixed_fee": "float",
        "id": "int",
        "is_private": "bool",
        "name": "str",
        "permissions": "str",
        "rate": "float",
        "rate_last_updated": "str",
        "recurring": "bool",
        "recurring_parameters": "list[ModelsRecurringProjectParameters]",
        "server_deleted_at": "str",
        "start_date": "str",
        "status": "str",
        "template": "bool",
        "template_id": "int",
        "wid": "int",
        "workspace_id": "int",
    }

    attribute_map = {
        "active": "active",
        "actual_hours": "actual_hours",
        "actual_seconds": "actual_seconds",
        "at": "at",
        "auto_estimates": "auto_estimates",
        "billable": "billable",
        "cid": "cid",
        "client_id": "client_id",
        "color": "color",
        "created_at": "created_at",
        "currency": "currency",
        "current_period": "current_period",
        "end_date": "end_date",
        "estimated_hours": "estimated_hours",
        "estimated_seconds": "estimated_seconds",
        "fixed_fee": "fixed_fee",
        "id": "id",
        "is_private": "is_private",
        "name": "name",
        "permissions": "permissions",
        "rate": "rate",
        "rate_last_updated": "rate_last_updated",
        "recurring": "recurring",
        "recurring_parameters": "recurring_parameters",
        "server_deleted_at": "server_deleted_at",
        "start_date": "start_date",
        "status": "status",
        "template": "template",
        "template_id": "template_id",
        "wid": "wid",
        "workspace_id": "workspace_id",
    }

    def __init__(
        self,
        active: bool = None,
        actual_hours: int = None,
        actual_seconds: int = None,
        at: str = None,
        auto_estimates: bool = None,
        billable: bool = None,
        cid: int = None,
        client_id: int = None,
        color: str = None,
        created_at: str = None,
        currency: str = None,
        current_period: ModelsRecurringPeriod = None,
        end_date: str = None,
        estimated_hours: int = None,
        estimated_seconds: int = None,
        fixed_fee: float = None,
        id: int = None,
        is_private: bool = None,
        name: str = None,
        permissions: str = None,
        rate: float = None,
        rate_last_updated: str = None,
        recurring: bool = None,
        recurring_parameters: list[ModelsRecurringProjectParameters] = None,
        server_deleted_at: str = None,
        start_date: str = None,
        status: str = None,
        template: bool = None,
        template_id: int = None,
        wid: int = None,
        workspace_id: int = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        ModelsProject - a model defined in Swagger

        Parameters:
          active (bool): Optional
          actual_hours (int): Optional
          actual_seconds (int): Optional
          at (str): Optional
          auto_estimates (bool): Optional
          billable (bool): Optional
          cid (int): Optional
          client_id (int): Optional
          color (str): Optional
          created_at (str): Optional
          currency (str): Optional
          current_period (ModelsRecurringPeriod): Optional
          end_date (str): Optional
          estimated_hours (int): Optional
          estimated_seconds (int): Optional
          fixed_fee (float): Optional
          id (int): Optional
          is_private (bool): Optional
          name (str): Optional
          permissions (str): Optional
          rate (float): Optional
          rate_last_updated (str): Optional
          recurring (bool): Optional
          recurring_parameters (list[ModelsRecurringProjectParameters]): Optional
          server_deleted_at (str): Optional
          start_date (str): Optional
          status (str): Optional
          template (bool): Optional
          template_id (int): Optional
          wid (int): Optional
          workspace_id (int): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active = None
        self._actual_hours = None
        self._actual_seconds = None
        self._at = None
        self._auto_estimates = None
        self._billable = None
        self._cid = None
        self._client_id = None
        self._color = None
        self._created_at = None
        self._currency = None
        self._current_period = None
        self._end_date = None
        self._estimated_hours = None
        self._estimated_seconds = None
        self._fixed_fee = None
        self._id = None
        self._is_private = None
        self._name = None
        self._permissions = None
        self._rate = None
        self._rate_last_updated = None
        self._recurring = None
        self._recurring_parameters = None
        self._server_deleted_at = None
        self._start_date = None
        self._status = None
        self._template = None
        self._template_id = None
        self._wid = None
        self._workspace_id = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if actual_hours is not None:
            self.actual_hours = actual_hours
        if actual_seconds is not None:
            self.actual_seconds = actual_seconds
        if at is not None:
            self.at = at
        if auto_estimates is not None:
            self.auto_estimates = auto_estimates
        if billable is not None:
            self.billable = billable
        if cid is not None:
            self.cid = cid
        if client_id is not None:
            self.client_id = client_id
        if color is not None:
            self.color = color
        if created_at is not None:
            self.created_at = created_at
        if currency is not None:
            self.currency = currency
        if current_period is not None:
            self.current_period = current_period
        if end_date is not None:
            self.end_date = end_date
        if estimated_hours is not None:
            self.estimated_hours = estimated_hours
        if estimated_seconds is not None:
            self.estimated_seconds = estimated_seconds
        if fixed_fee is not None:
            self.fixed_fee = fixed_fee
        if id is not None:
            self.id = id
        if is_private is not None:
            self.is_private = is_private
        if name is not None:
            self.name = name
        if permissions is not None:
            self.permissions = permissions
        if rate is not None:
            self.rate = rate
        if rate_last_updated is not None:
            self.rate_last_updated = rate_last_updated
        if recurring is not None:
            self.recurring = recurring
        if recurring_parameters is not None:
            self.recurring_parameters = recurring_parameters
        if server_deleted_at is not None:
            self.server_deleted_at = server_deleted_at
        if start_date is not None:
            self.start_date = start_date
        if status is not None:
            self.status = status
        if template is not None:
            self.template = template
        if template_id is not None:
            self.template_id = template_id
        if wid is not None:
            self.wid = wid
        if workspace_id is not None:
            self.workspace_id = workspace_id

    @property
    def active(self) -> bool:
        """Gets the active of this ModelsProject.  # noqa: E501

        Whether the project is active or archived  # noqa: E501

        :return: The active of this ModelsProject.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this ModelsProject.

        Whether the project is active or archived  # noqa: E501

        :param active: The active of this ModelsProject.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def actual_hours(self) -> int:
        """Gets the actual_hours of this ModelsProject.  # noqa: E501

        Actual hours  # noqa: E501

        :return: The actual_hours of this ModelsProject.  # noqa: E501
        :rtype: int
        """
        return self._actual_hours

    @actual_hours.setter
    def actual_hours(self, actual_hours: int):
        """Sets the actual_hours of this ModelsProject.

        Actual hours  # noqa: E501

        :param actual_hours: The actual_hours of this ModelsProject.  # noqa: E501
        :type: int
        """

        self._actual_hours = actual_hours

    @property
    def actual_seconds(self) -> int:
        """Gets the actual_seconds of this ModelsProject.  # noqa: E501

        Actual seconds  # noqa: E501

        :return: The actual_seconds of this ModelsProject.  # noqa: E501
        :rtype: int
        """
        return self._actual_seconds

    @actual_seconds.setter
    def actual_seconds(self, actual_seconds: int):
        """Sets the actual_seconds of this ModelsProject.

        Actual seconds  # noqa: E501

        :param actual_seconds: The actual_seconds of this ModelsProject.  # noqa: E501
        :type: int
        """

        self._actual_seconds = actual_seconds

    @property
    def at(self) -> str:
        """Gets the at of this ModelsProject.  # noqa: E501

        Last updated date  # noqa: E501

        :return: The at of this ModelsProject.  # noqa: E501
        :rtype: str
        """
        return self._at

    @at.setter
    def at(self, at: str):
        """Sets the at of this ModelsProject.

        Last updated date  # noqa: E501

        :param at: The at of this ModelsProject.  # noqa: E501
        :type: str
        """

        self._at = at

    @property
    def auto_estimates(self) -> bool:
        """Gets the auto_estimates of this ModelsProject.  # noqa: E501

        Whether estimates are based on task hours, premium feature  # noqa: E501

        :return: The auto_estimates of this ModelsProject.  # noqa: E501
        :rtype: bool
        """
        return self._auto_estimates

    @auto_estimates.setter
    def auto_estimates(self, auto_estimates: bool):
        """Sets the auto_estimates of this ModelsProject.

        Whether estimates are based on task hours, premium feature  # noqa: E501

        :param auto_estimates: The auto_estimates of this ModelsProject.  # noqa: E501
        :type: bool
        """

        self._auto_estimates = auto_estimates

    @property
    def billable(self) -> bool:
        """Gets the billable of this ModelsProject.  # noqa: E501

        Whether the project is billable, premium feature  # noqa: E501

        :return: The billable of this ModelsProject.  # noqa: E501
        :rtype: bool
        """
        return self._billable

    @billable.setter
    def billable(self, billable: bool):
        """Sets the billable of this ModelsProject.

        Whether the project is billable, premium feature  # noqa: E501

        :param billable: The billable of this ModelsProject.  # noqa: E501
        :type: bool
        """

        self._billable = billable

    @property
    def cid(self) -> int:
        """Gets the cid of this ModelsProject.  # noqa: E501

        Client ID legacy field  # noqa: E501

        :return: The cid of this ModelsProject.  # noqa: E501
        :rtype: int
        """
        return self._cid

    @cid.setter
    def cid(self, cid: int):
        """Sets the cid of this ModelsProject.

        Client ID legacy field  # noqa: E501

        :param cid: The cid of this ModelsProject.  # noqa: E501
        :type: int
        """

        self._cid = cid

    @property
    def client_id(self) -> int:
        """Gets the client_id of this ModelsProject.  # noqa: E501

        Client ID  # noqa: E501

        :return: The client_id of this ModelsProject.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id: int):
        """Sets the client_id of this ModelsProject.

        Client ID  # noqa: E501

        :param client_id: The client_id of this ModelsProject.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def color(self) -> str:
        """Gets the color of this ModelsProject.  # noqa: E501

        Color  # noqa: E501

        :return: The color of this ModelsProject.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color: str):
        """Sets the color of this ModelsProject.

        Color  # noqa: E501

        :param color: The color of this ModelsProject.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def created_at(self) -> str:
        """Gets the created_at of this ModelsProject.  # noqa: E501

        Creation date  # noqa: E501

        :return: The created_at of this ModelsProject.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this ModelsProject.

        Creation date  # noqa: E501

        :param created_at: The created_at of this ModelsProject.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def currency(self) -> str:
        """Gets the currency of this ModelsProject.  # noqa: E501

        Currency, premium feature  # noqa: E501

        :return: The currency of this ModelsProject.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this ModelsProject.

        Currency, premium feature  # noqa: E501

        :param currency: The currency of this ModelsProject.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def current_period(self) -> ModelsRecurringPeriod:
        """Gets the current_period of this ModelsProject.  # noqa: E501

        Current project period, premium feature  # noqa: E501

        :return: The current_period of this ModelsProject.  # noqa: E501
        :rtype: ModelsRecurringPeriod
        """
        return self._current_period

    @current_period.setter
    def current_period(self, current_period: ModelsRecurringPeriod):
        """Sets the current_period of this ModelsProject.

        Current project period, premium feature  # noqa: E501

        :param current_period: The current_period of this ModelsProject.  # noqa: E501
        :type: ModelsRecurringPeriod
        """

        self._current_period = current_period

    @property
    def end_date(self) -> str:
        """Gets the end_date of this ModelsProject.  # noqa: E501

        End date  # noqa: E501

        :return: The end_date of this ModelsProject.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: str):
        """Sets the end_date of this ModelsProject.

        End date  # noqa: E501

        :param end_date: The end_date of this ModelsProject.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def estimated_hours(self) -> int:
        """Gets the estimated_hours of this ModelsProject.  # noqa: E501

        Estimated hours  # noqa: E501

        :return: The estimated_hours of this ModelsProject.  # noqa: E501
        :rtype: int
        """
        return self._estimated_hours

    @estimated_hours.setter
    def estimated_hours(self, estimated_hours: int):
        """Sets the estimated_hours of this ModelsProject.

        Estimated hours  # noqa: E501

        :param estimated_hours: The estimated_hours of this ModelsProject.  # noqa: E501
        :type: int
        """

        self._estimated_hours = estimated_hours

    @property
    def estimated_seconds(self) -> int:
        """Gets the estimated_seconds of this ModelsProject.  # noqa: E501

        Estimated seconds  # noqa: E501

        :return: The estimated_seconds of this ModelsProject.  # noqa: E501
        :rtype: int
        """
        return self._estimated_seconds

    @estimated_seconds.setter
    def estimated_seconds(self, estimated_seconds: int):
        """Sets the estimated_seconds of this ModelsProject.

        Estimated seconds  # noqa: E501

        :param estimated_seconds: The estimated_seconds of this ModelsProject.  # noqa: E501
        :type: int
        """

        self._estimated_seconds = estimated_seconds

    @property
    def fixed_fee(self) -> float:
        """Gets the fixed_fee of this ModelsProject.  # noqa: E501

        Fixed fee, premium feature  # noqa: E501

        :return: The fixed_fee of this ModelsProject.  # noqa: E501
        :rtype: float
        """
        return self._fixed_fee

    @fixed_fee.setter
    def fixed_fee(self, fixed_fee: float):
        """Sets the fixed_fee of this ModelsProject.

        Fixed fee, premium feature  # noqa: E501

        :param fixed_fee: The fixed_fee of this ModelsProject.  # noqa: E501
        :type: float
        """

        self._fixed_fee = fixed_fee

    @property
    def id(self) -> int:
        """Gets the id of this ModelsProject.  # noqa: E501

        Project ID  # noqa: E501

        :return: The id of this ModelsProject.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this ModelsProject.

        Project ID  # noqa: E501

        :param id: The id of this ModelsProject.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_private(self) -> bool:
        """Gets the is_private of this ModelsProject.  # noqa: E501

        Whether the project is private  # noqa: E501

        :return: The is_private of this ModelsProject.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private: bool):
        """Sets the is_private of this ModelsProject.

        Whether the project is private  # noqa: E501

        :param is_private: The is_private of this ModelsProject.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def name(self) -> str:
        """Gets the name of this ModelsProject.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this ModelsProject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ModelsProject.

        Name  # noqa: E501

        :param name: The name of this ModelsProject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def permissions(self) -> str:
        """Gets the permissions of this ModelsProject.  # noqa: E501


        :return: The permissions of this ModelsProject.  # noqa: E501
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions: str):
        """Sets the permissions of this ModelsProject.


        :param permissions: The permissions of this ModelsProject.  # noqa: E501
        :type: str
        """

        self._permissions = permissions

    @property
    def rate(self) -> float:
        """Gets the rate of this ModelsProject.  # noqa: E501

        Hourly rate  # noqa: E501

        :return: The rate of this ModelsProject.  # noqa: E501
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate: float):
        """Sets the rate of this ModelsProject.

        Hourly rate  # noqa: E501

        :param rate: The rate of this ModelsProject.  # noqa: E501
        :type: float
        """

        self._rate = rate

    @property
    def rate_last_updated(self) -> str:
        """Gets the rate_last_updated of this ModelsProject.  # noqa: E501

        Last date for rate change  # noqa: E501

        :return: The rate_last_updated of this ModelsProject.  # noqa: E501
        :rtype: str
        """
        return self._rate_last_updated

    @rate_last_updated.setter
    def rate_last_updated(self, rate_last_updated: str):
        """Sets the rate_last_updated of this ModelsProject.

        Last date for rate change  # noqa: E501

        :param rate_last_updated: The rate_last_updated of this ModelsProject.  # noqa: E501
        :type: str
        """

        self._rate_last_updated = rate_last_updated

    @property
    def recurring(self) -> bool:
        """Gets the recurring of this ModelsProject.  # noqa: E501

        Whether the project is recurring, premium feature  # noqa: E501

        :return: The recurring of this ModelsProject.  # noqa: E501
        :rtype: bool
        """
        return self._recurring

    @recurring.setter
    def recurring(self, recurring: bool):
        """Sets the recurring of this ModelsProject.

        Whether the project is recurring, premium feature  # noqa: E501

        :param recurring: The recurring of this ModelsProject.  # noqa: E501
        :type: bool
        """

        self._recurring = recurring

    @property
    def recurring_parameters(self) -> list[ModelsRecurringProjectParameters]:
        """Gets the recurring_parameters of this ModelsProject.  # noqa: E501

        Project recurring parameters, premium feature  # noqa: E501

        :return: The recurring_parameters of this ModelsProject.  # noqa: E501
        :rtype: list[ModelsRecurringProjectParameters]
        """
        return self._recurring_parameters

    @recurring_parameters.setter
    def recurring_parameters(self, recurring_parameters: list[ModelsRecurringProjectParameters]):
        """Sets the recurring_parameters of this ModelsProject.

        Project recurring parameters, premium feature  # noqa: E501

        :param recurring_parameters: The recurring_parameters of this ModelsProject.  # noqa: E501
        :type: list[ModelsRecurringProjectParameters]
        """

        self._recurring_parameters = recurring_parameters

    @property
    def server_deleted_at(self) -> str:
        """Gets the server_deleted_at of this ModelsProject.  # noqa: E501

        Deletion date  # noqa: E501

        :return: The server_deleted_at of this ModelsProject.  # noqa: E501
        :rtype: str
        """
        return self._server_deleted_at

    @server_deleted_at.setter
    def server_deleted_at(self, server_deleted_at: str):
        """Sets the server_deleted_at of this ModelsProject.

        Deletion date  # noqa: E501

        :param server_deleted_at: The server_deleted_at of this ModelsProject.  # noqa: E501
        :type: str
        """

        self._server_deleted_at = server_deleted_at

    @property
    def start_date(self) -> str:
        """Gets the start_date of this ModelsProject.  # noqa: E501

        Start date  # noqa: E501

        :return: The start_date of this ModelsProject.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: str):
        """Sets the start_date of this ModelsProject.

        Start date  # noqa: E501

        :param start_date: The start_date of this ModelsProject.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def status(self) -> str:
        """Gets the status of this ModelsProject.  # noqa: E501

        Status of the project (upcoming, active, ended, archived, deleted)  # noqa: E501

        :return: The status of this ModelsProject.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ModelsProject.

        Status of the project (upcoming, active, ended, archived, deleted)  # noqa: E501

        :param status: The status of this ModelsProject.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def template(self) -> bool:
        """Gets the template of this ModelsProject.  # noqa: E501

        Whether the project is used as template, premium feature  # noqa: E501

        :return: The template of this ModelsProject.  # noqa: E501
        :rtype: bool
        """
        return self._template

    @template.setter
    def template(self, template: bool):
        """Sets the template of this ModelsProject.

        Whether the project is used as template, premium feature  # noqa: E501

        :param template: The template of this ModelsProject.  # noqa: E501
        :type: bool
        """

        self._template = template

    @property
    def template_id(self) -> int:
        """Gets the template_id of this ModelsProject.  # noqa: E501

        Template ID  # noqa: E501

        :return: The template_id of this ModelsProject.  # noqa: E501
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id: int):
        """Sets the template_id of this ModelsProject.

        Template ID  # noqa: E501

        :param template_id: The template_id of this ModelsProject.  # noqa: E501
        :type: int
        """

        self._template_id = template_id

    @property
    def wid(self) -> int:
        """Gets the wid of this ModelsProject.  # noqa: E501

        Workspace ID legacy field  # noqa: E501

        :return: The wid of this ModelsProject.  # noqa: E501
        :rtype: int
        """
        return self._wid

    @wid.setter
    def wid(self, wid: int):
        """Sets the wid of this ModelsProject.

        Workspace ID legacy field  # noqa: E501

        :param wid: The wid of this ModelsProject.  # noqa: E501
        :type: int
        """

        self._wid = wid

    @property
    def workspace_id(self) -> int:
        """Gets the workspace_id of this ModelsProject.  # noqa: E501

        Workspace ID  # noqa: E501

        :return: The workspace_id of this ModelsProject.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id: int):
        """Sets the workspace_id of this ModelsProject.

        Workspace ID  # noqa: E501

        :param workspace_id: The workspace_id of this ModelsProject.  # noqa: E501
        :type: int
        """

        self._workspace_id = workspace_id

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsProject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsProject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsProject):
            return True

        return self.to_dict() != other.to_dict()
