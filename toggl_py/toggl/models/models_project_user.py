"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ModelsProjectUser:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "at": "str",
        "gid": "int",
        "group_id": "int",
        "id": "int",
        "labour_cost": "int",
        "manager": "bool",
        "project_id": "int",
        "rate": "float",
        "rate_last_updated": "str",
        "user_id": "int",
        "workspace_id": "int",
    }

    attribute_map = {
        "at": "at",
        "gid": "gid",
        "group_id": "group_id",
        "id": "id",
        "labour_cost": "labour_cost",
        "manager": "manager",
        "project_id": "project_id",
        "rate": "rate",
        "rate_last_updated": "rate_last_updated",
        "user_id": "user_id",
        "workspace_id": "workspace_id",
    }

    def __init__(
        self,
        at=None,
        gid=None,
        group_id=None,
        id=None,
        labour_cost=None,
        manager=None,
        project_id=None,
        rate=None,
        rate_last_updated=None,
        user_id=None,
        workspace_id=None,
        _configuration=None,
    ):  # noqa: E501
        """ModelsProjectUser - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._at = None
        self._gid = None
        self._group_id = None
        self._id = None
        self._labour_cost = None
        self._manager = None
        self._project_id = None
        self._rate = None
        self._rate_last_updated = None
        self._user_id = None
        self._workspace_id = None
        self.discriminator = None

        if at is not None:
            self.at = at
        if gid is not None:
            self.gid = gid
        if group_id is not None:
            self.group_id = group_id
        if id is not None:
            self.id = id
        if labour_cost is not None:
            self.labour_cost = labour_cost
        if manager is not None:
            self.manager = manager
        if project_id is not None:
            self.project_id = project_id
        if rate is not None:
            self.rate = rate
        if rate_last_updated is not None:
            self.rate_last_updated = rate_last_updated
        if user_id is not None:
            self.user_id = user_id
        if workspace_id is not None:
            self.workspace_id = workspace_id

    @property
    def at(self):
        """Gets the at of this ModelsProjectUser.  # noqa: E501

        When was last modified  # noqa: E501

        :return: The at of this ModelsProjectUser.  # noqa: E501
        :rtype: str
        """
        return self._at

    @at.setter
    def at(self, at):
        """Sets the at of this ModelsProjectUser.

        When was last modified  # noqa: E501

        :param at: The at of this ModelsProjectUser.  # noqa: E501
        :type: str
        """

        self._at = at

    @property
    def gid(self):
        """Gets the gid of this ModelsProjectUser.  # noqa: E501

        Group ID, legacy field  # noqa: E501

        :return: The gid of this ModelsProjectUser.  # noqa: E501
        :rtype: int
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this ModelsProjectUser.

        Group ID, legacy field  # noqa: E501

        :param gid: The gid of this ModelsProjectUser.  # noqa: E501
        :type: int
        """

        self._gid = gid

    @property
    def group_id(self):
        """Gets the group_id of this ModelsProjectUser.  # noqa: E501

        Group ID  # noqa: E501

        :return: The group_id of this ModelsProjectUser.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ModelsProjectUser.

        Group ID  # noqa: E501

        :param group_id: The group_id of this ModelsProjectUser.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this ModelsProjectUser.  # noqa: E501

        Project User ID  # noqa: E501

        :return: The id of this ModelsProjectUser.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelsProjectUser.

        Project User ID  # noqa: E501

        :param id: The id of this ModelsProjectUser.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def labour_cost(self):
        """Gets the labour_cost of this ModelsProjectUser.  # noqa: E501

        Labour cost for this project user  # noqa: E501

        :return: The labour_cost of this ModelsProjectUser.  # noqa: E501
        :rtype: int
        """
        return self._labour_cost

    @labour_cost.setter
    def labour_cost(self, labour_cost):
        """Sets the labour_cost of this ModelsProjectUser.

        Labour cost for this project user  # noqa: E501

        :param labour_cost: The labour_cost of this ModelsProjectUser.  # noqa: E501
        :type: int
        """

        self._labour_cost = labour_cost

    @property
    def manager(self):
        """Gets the manager of this ModelsProjectUser.  # noqa: E501

        Whether the user is manager of the project  # noqa: E501

        :return: The manager of this ModelsProjectUser.  # noqa: E501
        :rtype: bool
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """Sets the manager of this ModelsProjectUser.

        Whether the user is manager of the project  # noqa: E501

        :param manager: The manager of this ModelsProjectUser.  # noqa: E501
        :type: bool
        """

        self._manager = manager

    @property
    def project_id(self):
        """Gets the project_id of this ModelsProjectUser.  # noqa: E501

        Project ID  # noqa: E501

        :return: The project_id of this ModelsProjectUser.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ModelsProjectUser.

        Project ID  # noqa: E501

        :param project_id: The project_id of this ModelsProjectUser.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def rate(self):
        """Gets the rate of this ModelsProjectUser.  # noqa: E501

        Custom rate for project user  # noqa: E501

        :return: The rate of this ModelsProjectUser.  # noqa: E501
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this ModelsProjectUser.

        Custom rate for project user  # noqa: E501

        :param rate: The rate of this ModelsProjectUser.  # noqa: E501
        :type: float
        """

        self._rate = rate

    @property
    def rate_last_updated(self):
        """Gets the rate_last_updated of this ModelsProjectUser.  # noqa: E501

        Date for rate last updated  # noqa: E501

        :return: The rate_last_updated of this ModelsProjectUser.  # noqa: E501
        :rtype: str
        """
        return self._rate_last_updated

    @rate_last_updated.setter
    def rate_last_updated(self, rate_last_updated):
        """Sets the rate_last_updated of this ModelsProjectUser.

        Date for rate last updated  # noqa: E501

        :param rate_last_updated: The rate_last_updated of this ModelsProjectUser.  # noqa: E501
        :type: str
        """

        self._rate_last_updated = rate_last_updated

    @property
    def user_id(self):
        """Gets the user_id of this ModelsProjectUser.  # noqa: E501

        User ID  # noqa: E501

        :return: The user_id of this ModelsProjectUser.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ModelsProjectUser.

        User ID  # noqa: E501

        :param user_id: The user_id of this ModelsProjectUser.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this ModelsProjectUser.  # noqa: E501

        Workspace ID  # noqa: E501

        :return: The workspace_id of this ModelsProjectUser.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this ModelsProjectUser.

        Workspace ID  # noqa: E501

        :param workspace_id: The workspace_id of this ModelsProjectUser.  # noqa: E501
        :type: int
        """

        self._workspace_id = workspace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsProjectUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsProjectUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsProjectUser):
            return True

        return self.to_dict() != other.to_dict()
