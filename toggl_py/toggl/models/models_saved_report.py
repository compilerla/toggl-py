"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ModelsSavedReport:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "deleted_at": "str",
        "fixed_daterange": "bool",
        "id": "int",
        "is_na_resource": "bool",
        "name": "str",
        "params": "str",
        "public": "bool",
        "scheduled_email_gids": "UtilsInt64Slice",
        "scheduled_email_uids": "UtilsInt64Slice",
        "token": "str",
        "uid": "int",
        "updated_at": "str",
        "updated_by": "int",
    }

    attribute_map = {
        "deleted_at": "deleted_at",
        "fixed_daterange": "fixed_daterange",
        "id": "id",
        "is_na_resource": "isNAResource",
        "name": "name",
        "params": "params",
        "public": "public",
        "scheduled_email_gids": "scheduled_email_gids",
        "scheduled_email_uids": "scheduled_email_uids",
        "token": "token",
        "uid": "uid",
        "updated_at": "updated_at",
        "updated_by": "updated_by",
    }

    def __init__(
        self,
        deleted_at=None,
        fixed_daterange=None,
        id=None,
        is_na_resource=None,
        name=None,
        params=None,
        public=None,
        scheduled_email_gids=None,
        scheduled_email_uids=None,
        token=None,
        uid=None,
        updated_at=None,
        updated_by=None,
        _configuration=None,
    ):  # noqa: E501
        """ModelsSavedReport - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._deleted_at = None
        self._fixed_daterange = None
        self._id = None
        self._is_na_resource = None
        self._name = None
        self._params = None
        self._public = None
        self._scheduled_email_gids = None
        self._scheduled_email_uids = None
        self._token = None
        self._uid = None
        self._updated_at = None
        self._updated_by = None
        self.discriminator = None

        if deleted_at is not None:
            self.deleted_at = deleted_at
        if fixed_daterange is not None:
            self.fixed_daterange = fixed_daterange
        if id is not None:
            self.id = id
        if is_na_resource is not None:
            self.is_na_resource = is_na_resource
        if name is not None:
            self.name = name
        if params is not None:
            self.params = params
        if public is not None:
            self.public = public
        if scheduled_email_gids is not None:
            self.scheduled_email_gids = scheduled_email_gids
        if scheduled_email_uids is not None:
            self.scheduled_email_uids = scheduled_email_uids
        if token is not None:
            self.token = token
        if uid is not None:
            self.uid = uid
        if updated_at is not None:
            self.updated_at = updated_at
        if updated_by is not None:
            self.updated_by = updated_by

    @property
    def deleted_at(self):
        """Gets the deleted_at of this ModelsSavedReport.  # noqa: E501


        :return: The deleted_at of this ModelsSavedReport.  # noqa: E501
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this ModelsSavedReport.


        :param deleted_at: The deleted_at of this ModelsSavedReport.  # noqa: E501
        :type: str
        """

        self._deleted_at = deleted_at

    @property
    def fixed_daterange(self):
        """Gets the fixed_daterange of this ModelsSavedReport.  # noqa: E501


        :return: The fixed_daterange of this ModelsSavedReport.  # noqa: E501
        :rtype: bool
        """
        return self._fixed_daterange

    @fixed_daterange.setter
    def fixed_daterange(self, fixed_daterange):
        """Sets the fixed_daterange of this ModelsSavedReport.


        :param fixed_daterange: The fixed_daterange of this ModelsSavedReport.  # noqa: E501
        :type: bool
        """

        self._fixed_daterange = fixed_daterange

    @property
    def id(self):
        """Gets the id of this ModelsSavedReport.  # noqa: E501


        :return: The id of this ModelsSavedReport.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelsSavedReport.


        :param id: The id of this ModelsSavedReport.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_na_resource(self):
        """Gets the is_na_resource of this ModelsSavedReport.  # noqa: E501


        :return: The is_na_resource of this ModelsSavedReport.  # noqa: E501
        :rtype: bool
        """
        return self._is_na_resource

    @is_na_resource.setter
    def is_na_resource(self, is_na_resource):
        """Sets the is_na_resource of this ModelsSavedReport.


        :param is_na_resource: The is_na_resource of this ModelsSavedReport.  # noqa: E501
        :type: bool
        """

        self._is_na_resource = is_na_resource

    @property
    def name(self):
        """Gets the name of this ModelsSavedReport.  # noqa: E501


        :return: The name of this ModelsSavedReport.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsSavedReport.


        :param name: The name of this ModelsSavedReport.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def params(self):
        """Gets the params of this ModelsSavedReport.  # noqa: E501


        :return: The params of this ModelsSavedReport.  # noqa: E501
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ModelsSavedReport.


        :param params: The params of this ModelsSavedReport.  # noqa: E501
        :type: str
        """

        self._params = params

    @property
    def public(self):
        """Gets the public of this ModelsSavedReport.  # noqa: E501


        :return: The public of this ModelsSavedReport.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this ModelsSavedReport.


        :param public: The public of this ModelsSavedReport.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def scheduled_email_gids(self):
        """Gets the scheduled_email_gids of this ModelsSavedReport.  # noqa: E501


        :return: The scheduled_email_gids of this ModelsSavedReport.  # noqa: E501
        :rtype: UtilsInt64Slice
        """
        return self._scheduled_email_gids

    @scheduled_email_gids.setter
    def scheduled_email_gids(self, scheduled_email_gids):
        """Sets the scheduled_email_gids of this ModelsSavedReport.


        :param scheduled_email_gids: The scheduled_email_gids of this ModelsSavedReport.  # noqa: E501
        :type: UtilsInt64Slice
        """

        self._scheduled_email_gids = scheduled_email_gids

    @property
    def scheduled_email_uids(self):
        """Gets the scheduled_email_uids of this ModelsSavedReport.  # noqa: E501


        :return: The scheduled_email_uids of this ModelsSavedReport.  # noqa: E501
        :rtype: UtilsInt64Slice
        """
        return self._scheduled_email_uids

    @scheduled_email_uids.setter
    def scheduled_email_uids(self, scheduled_email_uids):
        """Sets the scheduled_email_uids of this ModelsSavedReport.


        :param scheduled_email_uids: The scheduled_email_uids of this ModelsSavedReport.  # noqa: E501
        :type: UtilsInt64Slice
        """

        self._scheduled_email_uids = scheduled_email_uids

    @property
    def token(self):
        """Gets the token of this ModelsSavedReport.  # noqa: E501


        :return: The token of this ModelsSavedReport.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ModelsSavedReport.


        :param token: The token of this ModelsSavedReport.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def uid(self):
        """Gets the uid of this ModelsSavedReport.  # noqa: E501


        :return: The uid of this ModelsSavedReport.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this ModelsSavedReport.


        :param uid: The uid of this ModelsSavedReport.  # noqa: E501
        :type: int
        """

        self._uid = uid

    @property
    def updated_at(self):
        """Gets the updated_at of this ModelsSavedReport.  # noqa: E501


        :return: The updated_at of this ModelsSavedReport.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ModelsSavedReport.


        :param updated_at: The updated_at of this ModelsSavedReport.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this ModelsSavedReport.  # noqa: E501


        :return: The updated_by of this ModelsSavedReport.  # noqa: E501
        :rtype: int
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this ModelsSavedReport.


        :param updated_by: The updated_by of this ModelsSavedReport.  # noqa: E501
        :type: int
        """

        self._updated_by = updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsSavedReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsSavedReport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsSavedReport):
            return True

        return self.to_dict() != other.to_dict()
