"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ModelsSSOConfig:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "certificate": "str",
        "domain": "str",
        "enabled": "bool",
        "entity_id": "str",
        "metadata_url": "str",
        "name": "str",
        "sso_url": "str",
    }

    attribute_map = {
        "certificate": "certificate",
        "domain": "domain",
        "enabled": "enabled",
        "entity_id": "entity_id",
        "metadata_url": "metadata_url",
        "name": "name",
        "sso_url": "sso_url",
    }

    def __init__(
        self,
        certificate=None,
        domain=None,
        enabled=None,
        entity_id=None,
        metadata_url=None,
        name=None,
        sso_url=None,
        _configuration=None,
    ):  # noqa: E501
        """ModelsSSOConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._certificate = None
        self._domain = None
        self._enabled = None
        self._entity_id = None
        self._metadata_url = None
        self._name = None
        self._sso_url = None
        self.discriminator = None

        if certificate is not None:
            self.certificate = certificate
        if domain is not None:
            self.domain = domain
        if enabled is not None:
            self.enabled = enabled
        if entity_id is not None:
            self.entity_id = entity_id
        if metadata_url is not None:
            self.metadata_url = metadata_url
        if name is not None:
            self.name = name
        if sso_url is not None:
            self.sso_url = sso_url

    @property
    def certificate(self):
        """Gets the certificate of this ModelsSSOConfig.  # noqa: E501


        :return: The certificate of this ModelsSSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this ModelsSSOConfig.


        :param certificate: The certificate of this ModelsSSOConfig.  # noqa: E501
        :type: str
        """

        self._certificate = certificate

    @property
    def domain(self):
        """Gets the domain of this ModelsSSOConfig.  # noqa: E501


        :return: The domain of this ModelsSSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ModelsSSOConfig.


        :param domain: The domain of this ModelsSSOConfig.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def enabled(self):
        """Gets the enabled of this ModelsSSOConfig.  # noqa: E501


        :return: The enabled of this ModelsSSOConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ModelsSSOConfig.


        :param enabled: The enabled of this ModelsSSOConfig.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def entity_id(self):
        """Gets the entity_id of this ModelsSSOConfig.  # noqa: E501


        :return: The entity_id of this ModelsSSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this ModelsSSOConfig.


        :param entity_id: The entity_id of this ModelsSSOConfig.  # noqa: E501
        :type: str
        """

        self._entity_id = entity_id

    @property
    def metadata_url(self):
        """Gets the metadata_url of this ModelsSSOConfig.  # noqa: E501


        :return: The metadata_url of this ModelsSSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._metadata_url

    @metadata_url.setter
    def metadata_url(self, metadata_url):
        """Sets the metadata_url of this ModelsSSOConfig.


        :param metadata_url: The metadata_url of this ModelsSSOConfig.  # noqa: E501
        :type: str
        """

        self._metadata_url = metadata_url

    @property
    def name(self):
        """Gets the name of this ModelsSSOConfig.  # noqa: E501


        :return: The name of this ModelsSSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelsSSOConfig.


        :param name: The name of this ModelsSSOConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sso_url(self):
        """Gets the sso_url of this ModelsSSOConfig.  # noqa: E501


        :return: The sso_url of this ModelsSSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._sso_url

    @sso_url.setter
    def sso_url(self, sso_url):
        """Sets the sso_url of this ModelsSSOConfig.


        :param sso_url: The sso_url of this ModelsSSOConfig.  # noqa: E501
        :type: str
        """

        self._sso_url = sso_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsSSOConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsSSOConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsSSOConfig):
            return True

        return self.to_dict() != other.to_dict()
