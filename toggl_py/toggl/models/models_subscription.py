"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ModelsSubscription:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "auto_renew": "bool",
        "card_details": "ModelsCardDetails",
        "company_id": "int",
        "contact_detail": "ModelsContactDetail",
        "created_at": "datetime",
        "currency": "str",
        "customer_id": "int",
        "deleted_at": "datetime",
        "last_pricing_plan_id": "int",
        "organization_id": "int",
        "payment_details": "ModelsPaymentDetail",
        "pricing_plan_id": "int",
        "renewal_at": "datetime",
        "subscription_id": "int",
        "subscription_period": "ModelsPeriod",
        "workspace_id": "int",
    }

    attribute_map = {
        "auto_renew": "auto_renew",
        "card_details": "card_details",
        "company_id": "company_id",
        "contact_detail": "contact_detail",
        "created_at": "created_at",
        "currency": "currency",
        "customer_id": "customer_id",
        "deleted_at": "deleted_at",
        "last_pricing_plan_id": "last_pricing_plan_id",
        "organization_id": "organization_id",
        "payment_details": "payment_details",
        "pricing_plan_id": "pricing_plan_id",
        "renewal_at": "renewal_at",
        "subscription_id": "subscription_id",
        "subscription_period": "subscription_period",
        "workspace_id": "workspace_id",
    }

    def __init__(
        self,
        auto_renew=None,
        card_details=None,
        company_id=None,
        contact_detail=None,
        created_at=None,
        currency=None,
        customer_id=None,
        deleted_at=None,
        last_pricing_plan_id=None,
        organization_id=None,
        payment_details=None,
        pricing_plan_id=None,
        renewal_at=None,
        subscription_id=None,
        subscription_period=None,
        workspace_id=None,
        _configuration=None,
    ):  # noqa: E501
        """ModelsSubscription - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auto_renew = None
        self._card_details = None
        self._company_id = None
        self._contact_detail = None
        self._created_at = None
        self._currency = None
        self._customer_id = None
        self._deleted_at = None
        self._last_pricing_plan_id = None
        self._organization_id = None
        self._payment_details = None
        self._pricing_plan_id = None
        self._renewal_at = None
        self._subscription_id = None
        self._subscription_period = None
        self._workspace_id = None
        self.discriminator = None

        if auto_renew is not None:
            self.auto_renew = auto_renew
        if card_details is not None:
            self.card_details = card_details
        if company_id is not None:
            self.company_id = company_id
        if contact_detail is not None:
            self.contact_detail = contact_detail
        if created_at is not None:
            self.created_at = created_at
        if currency is not None:
            self.currency = currency
        if customer_id is not None:
            self.customer_id = customer_id
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if last_pricing_plan_id is not None:
            self.last_pricing_plan_id = last_pricing_plan_id
        if organization_id is not None:
            self.organization_id = organization_id
        if payment_details is not None:
            self.payment_details = payment_details
        if pricing_plan_id is not None:
            self.pricing_plan_id = pricing_plan_id
        if renewal_at is not None:
            self.renewal_at = renewal_at
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if subscription_period is not None:
            self.subscription_period = subscription_period
        if workspace_id is not None:
            self.workspace_id = workspace_id

    @property
    def auto_renew(self):
        """Gets the auto_renew of this ModelsSubscription.  # noqa: E501


        :return: The auto_renew of this ModelsSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._auto_renew

    @auto_renew.setter
    def auto_renew(self, auto_renew):
        """Sets the auto_renew of this ModelsSubscription.


        :param auto_renew: The auto_renew of this ModelsSubscription.  # noqa: E501
        :type: bool
        """

        self._auto_renew = auto_renew

    @property
    def card_details(self):
        """Gets the card_details of this ModelsSubscription.  # noqa: E501


        :return: The card_details of this ModelsSubscription.  # noqa: E501
        :rtype: ModelsCardDetails
        """
        return self._card_details

    @card_details.setter
    def card_details(self, card_details):
        """Sets the card_details of this ModelsSubscription.


        :param card_details: The card_details of this ModelsSubscription.  # noqa: E501
        :type: ModelsCardDetails
        """

        self._card_details = card_details

    @property
    def company_id(self):
        """Gets the company_id of this ModelsSubscription.  # noqa: E501


        :return: The company_id of this ModelsSubscription.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this ModelsSubscription.


        :param company_id: The company_id of this ModelsSubscription.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def contact_detail(self):
        """Gets the contact_detail of this ModelsSubscription.  # noqa: E501


        :return: The contact_detail of this ModelsSubscription.  # noqa: E501
        :rtype: ModelsContactDetail
        """
        return self._contact_detail

    @contact_detail.setter
    def contact_detail(self, contact_detail):
        """Sets the contact_detail of this ModelsSubscription.


        :param contact_detail: The contact_detail of this ModelsSubscription.  # noqa: E501
        :type: ModelsContactDetail
        """

        self._contact_detail = contact_detail

    @property
    def created_at(self):
        """Gets the created_at of this ModelsSubscription.  # noqa: E501


        :return: The created_at of this ModelsSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ModelsSubscription.


        :param created_at: The created_at of this ModelsSubscription.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this ModelsSubscription.  # noqa: E501


        :return: The currency of this ModelsSubscription.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ModelsSubscription.


        :param currency: The currency of this ModelsSubscription.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def customer_id(self):
        """Gets the customer_id of this ModelsSubscription.  # noqa: E501


        :return: The customer_id of this ModelsSubscription.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ModelsSubscription.


        :param customer_id: The customer_id of this ModelsSubscription.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def deleted_at(self):
        """Gets the deleted_at of this ModelsSubscription.  # noqa: E501


        :return: The deleted_at of this ModelsSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this ModelsSubscription.


        :param deleted_at: The deleted_at of this ModelsSubscription.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    @property
    def last_pricing_plan_id(self):
        """Gets the last_pricing_plan_id of this ModelsSubscription.  # noqa: E501


        :return: The last_pricing_plan_id of this ModelsSubscription.  # noqa: E501
        :rtype: int
        """
        return self._last_pricing_plan_id

    @last_pricing_plan_id.setter
    def last_pricing_plan_id(self, last_pricing_plan_id):
        """Sets the last_pricing_plan_id of this ModelsSubscription.


        :param last_pricing_plan_id: The last_pricing_plan_id of this ModelsSubscription.  # noqa: E501
        :type: int
        """

        self._last_pricing_plan_id = last_pricing_plan_id

    @property
    def organization_id(self):
        """Gets the organization_id of this ModelsSubscription.  # noqa: E501


        :return: The organization_id of this ModelsSubscription.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ModelsSubscription.


        :param organization_id: The organization_id of this ModelsSubscription.  # noqa: E501
        :type: int
        """

        self._organization_id = organization_id

    @property
    def payment_details(self):
        """Gets the payment_details of this ModelsSubscription.  # noqa: E501


        :return: The payment_details of this ModelsSubscription.  # noqa: E501
        :rtype: ModelsPaymentDetail
        """
        return self._payment_details

    @payment_details.setter
    def payment_details(self, payment_details):
        """Sets the payment_details of this ModelsSubscription.


        :param payment_details: The payment_details of this ModelsSubscription.  # noqa: E501
        :type: ModelsPaymentDetail
        """

        self._payment_details = payment_details

    @property
    def pricing_plan_id(self):
        """Gets the pricing_plan_id of this ModelsSubscription.  # noqa: E501


        :return: The pricing_plan_id of this ModelsSubscription.  # noqa: E501
        :rtype: int
        """
        return self._pricing_plan_id

    @pricing_plan_id.setter
    def pricing_plan_id(self, pricing_plan_id):
        """Sets the pricing_plan_id of this ModelsSubscription.


        :param pricing_plan_id: The pricing_plan_id of this ModelsSubscription.  # noqa: E501
        :type: int
        """

        self._pricing_plan_id = pricing_plan_id

    @property
    def renewal_at(self):
        """Gets the renewal_at of this ModelsSubscription.  # noqa: E501


        :return: The renewal_at of this ModelsSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._renewal_at

    @renewal_at.setter
    def renewal_at(self, renewal_at):
        """Sets the renewal_at of this ModelsSubscription.


        :param renewal_at: The renewal_at of this ModelsSubscription.  # noqa: E501
        :type: datetime
        """

        self._renewal_at = renewal_at

    @property
    def subscription_id(self):
        """Gets the subscription_id of this ModelsSubscription.  # noqa: E501


        :return: The subscription_id of this ModelsSubscription.  # noqa: E501
        :rtype: int
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this ModelsSubscription.


        :param subscription_id: The subscription_id of this ModelsSubscription.  # noqa: E501
        :type: int
        """

        self._subscription_id = subscription_id

    @property
    def subscription_period(self):
        """Gets the subscription_period of this ModelsSubscription.  # noqa: E501


        :return: The subscription_period of this ModelsSubscription.  # noqa: E501
        :rtype: ModelsPeriod
        """
        return self._subscription_period

    @subscription_period.setter
    def subscription_period(self, subscription_period):
        """Sets the subscription_period of this ModelsSubscription.


        :param subscription_period: The subscription_period of this ModelsSubscription.  # noqa: E501
        :type: ModelsPeriod
        """

        self._subscription_period = subscription_period

    @property
    def workspace_id(self):
        """Gets the workspace_id of this ModelsSubscription.  # noqa: E501


        :return: The workspace_id of this ModelsSubscription.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this ModelsSubscription.


        :param workspace_id: The workspace_id of this ModelsSubscription.  # noqa: E501
        :type: int
        """

        self._workspace_id = workspace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsSubscription):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsSubscription):
            return True

        return self.to_dict() != other.to_dict()
