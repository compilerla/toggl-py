"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ModelsSuggestion:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "accuracy": "float",
        "billable": "bool",
        "description_match": "bool",
        "last_seen": "str",
        "project_id": "int",
        "tag_ids": "list[int]",
        "task_id": "int",
        "workspace_id": "int",
    }

    attribute_map = {
        "accuracy": "accuracy",
        "billable": "billable",
        "description_match": "description_match",
        "last_seen": "last_seen",
        "project_id": "project_id",
        "tag_ids": "tag_ids",
        "task_id": "task_id",
        "workspace_id": "workspace_id",
    }

    def __init__(
        self,
        accuracy=None,
        billable=None,
        description_match=None,
        last_seen=None,
        project_id=None,
        tag_ids=None,
        task_id=None,
        workspace_id=None,
        _configuration=None,
    ):  # noqa: E501
        """ModelsSuggestion - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._accuracy = None
        self._billable = None
        self._description_match = None
        self._last_seen = None
        self._project_id = None
        self._tag_ids = None
        self._task_id = None
        self._workspace_id = None
        self.discriminator = None

        if accuracy is not None:
            self.accuracy = accuracy
        if billable is not None:
            self.billable = billable
        if description_match is not None:
            self.description_match = description_match
        if last_seen is not None:
            self.last_seen = last_seen
        if project_id is not None:
            self.project_id = project_id
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if task_id is not None:
            self.task_id = task_id
        if workspace_id is not None:
            self.workspace_id = workspace_id

    @property
    def accuracy(self):
        """Gets the accuracy of this ModelsSuggestion.  # noqa: E501


        :return: The accuracy of this ModelsSuggestion.  # noqa: E501
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this ModelsSuggestion.


        :param accuracy: The accuracy of this ModelsSuggestion.  # noqa: E501
        :type: float
        """

        self._accuracy = accuracy

    @property
    def billable(self):
        """Gets the billable of this ModelsSuggestion.  # noqa: E501


        :return: The billable of this ModelsSuggestion.  # noqa: E501
        :rtype: bool
        """
        return self._billable

    @billable.setter
    def billable(self, billable):
        """Sets the billable of this ModelsSuggestion.


        :param billable: The billable of this ModelsSuggestion.  # noqa: E501
        :type: bool
        """

        self._billable = billable

    @property
    def description_match(self):
        """Gets the description_match of this ModelsSuggestion.  # noqa: E501


        :return: The description_match of this ModelsSuggestion.  # noqa: E501
        :rtype: bool
        """
        return self._description_match

    @description_match.setter
    def description_match(self, description_match):
        """Sets the description_match of this ModelsSuggestion.


        :param description_match: The description_match of this ModelsSuggestion.  # noqa: E501
        :type: bool
        """

        self._description_match = description_match

    @property
    def last_seen(self):
        """Gets the last_seen of this ModelsSuggestion.  # noqa: E501


        :return: The last_seen of this ModelsSuggestion.  # noqa: E501
        :rtype: str
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this ModelsSuggestion.


        :param last_seen: The last_seen of this ModelsSuggestion.  # noqa: E501
        :type: str
        """

        self._last_seen = last_seen

    @property
    def project_id(self):
        """Gets the project_id of this ModelsSuggestion.  # noqa: E501


        :return: The project_id of this ModelsSuggestion.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ModelsSuggestion.


        :param project_id: The project_id of this ModelsSuggestion.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def tag_ids(self):
        """Gets the tag_ids of this ModelsSuggestion.  # noqa: E501


        :return: The tag_ids of this ModelsSuggestion.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this ModelsSuggestion.


        :param tag_ids: The tag_ids of this ModelsSuggestion.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def task_id(self):
        """Gets the task_id of this ModelsSuggestion.  # noqa: E501


        :return: The task_id of this ModelsSuggestion.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this ModelsSuggestion.


        :param task_id: The task_id of this ModelsSuggestion.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this ModelsSuggestion.  # noqa: E501


        :return: The workspace_id of this ModelsSuggestion.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this ModelsSuggestion.


        :param workspace_id: The workspace_id of this ModelsSuggestion.  # noqa: E501
        :type: int
        """

        self._workspace_id = workspace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsSuggestion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsSuggestion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsSuggestion):
            return True

        return self.to_dict() != other.to_dict()
