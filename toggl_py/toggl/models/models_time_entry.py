"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

from __future__ import annotations  # noqa: F401
import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from toggl.models.models_time_entry_shared_with import ModelsTimeEntrySharedWith  # noqa: F401


class ModelsTimeEntry:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "at": "str",
        "billable": "bool",
        "client_name": "str",
        "description": "str",
        "duration": "int",
        "duronly": "bool",
        "id": "int",
        "permissions": "list[str]",
        "pid": "int",
        "project_active": "bool",
        "project_color": "str",
        "project_id": "int",
        "project_name": "str",
        "server_deleted_at": "str",
        "shared_with": "list[ModelsTimeEntrySharedWith]",
        "start": "str",
        "stop": "str",
        "tag_ids": "list[int]",
        "tags": "list[str]",
        "task_id": "int",
        "task_name": "str",
        "tid": "int",
        "uid": "int",
        "user_id": "int",
        "wid": "int",
        "workspace_id": "int",
    }

    attribute_map = {
        "at": "at",
        "billable": "billable",
        "client_name": "client_name",
        "description": "description",
        "duration": "duration",
        "duronly": "duronly",
        "id": "id",
        "permissions": "permissions",
        "pid": "pid",
        "project_active": "project_active",
        "project_color": "project_color",
        "project_id": "project_id",
        "project_name": "project_name",
        "server_deleted_at": "server_deleted_at",
        "shared_with": "shared_with",
        "start": "start",
        "stop": "stop",
        "tag_ids": "tag_ids",
        "tags": "tags",
        "task_id": "task_id",
        "task_name": "task_name",
        "tid": "tid",
        "uid": "uid",
        "user_id": "user_id",
        "wid": "wid",
        "workspace_id": "workspace_id",
    }

    def __init__(
        self,
        at: str = None,
        billable: bool = None,
        client_name: str = None,
        description: str = None,
        duration: int = None,
        duronly: bool = None,
        id: int = None,
        permissions: list[str] = None,
        pid: int = None,
        project_active: bool = None,
        project_color: str = None,
        project_id: int = None,
        project_name: str = None,
        server_deleted_at: str = None,
        shared_with: list[ModelsTimeEntrySharedWith] = None,
        start: str = None,
        stop: str = None,
        tag_ids: list[int] = None,
        tags: list[str] = None,
        task_id: int = None,
        task_name: str = None,
        tid: int = None,
        uid: int = None,
        user_id: int = None,
        wid: int = None,
        workspace_id: int = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        ModelsTimeEntry - a model defined in Swagger

        Parameters:
          at (str): Optional
          billable (bool): Optional
          client_name (str): Optional
          description (str): Optional
          duration (int): Optional
          duronly (bool): Optional
          id (int): Optional
          permissions (list[str]): Optional
          pid (int): Optional
          project_active (bool): Optional
          project_color (str): Optional
          project_id (int): Optional
          project_name (str): Optional
          server_deleted_at (str): Optional
          shared_with (list[ModelsTimeEntrySharedWith]): Optional
          start (str): Optional
          stop (str): Optional
          tag_ids (list[int]): Optional
          tags (list[str]): Optional
          task_id (int): Optional
          task_name (str): Optional
          tid (int): Optional
          uid (int): Optional
          user_id (int): Optional
          wid (int): Optional
          workspace_id (int): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._at = None
        self._billable = None
        self._client_name = None
        self._description = None
        self._duration = None
        self._duronly = None
        self._id = None
        self._permissions = None
        self._pid = None
        self._project_active = None
        self._project_color = None
        self._project_id = None
        self._project_name = None
        self._server_deleted_at = None
        self._shared_with = None
        self._start = None
        self._stop = None
        self._tag_ids = None
        self._tags = None
        self._task_id = None
        self._task_name = None
        self._tid = None
        self._uid = None
        self._user_id = None
        self._wid = None
        self._workspace_id = None
        self.discriminator = None

        if at is not None:
            self.at = at
        if billable is not None:
            self.billable = billable
        if client_name is not None:
            self.client_name = client_name
        if description is not None:
            self.description = description
        if duration is not None:
            self.duration = duration
        if duronly is not None:
            self.duronly = duronly
        if id is not None:
            self.id = id
        if permissions is not None:
            self.permissions = permissions
        if pid is not None:
            self.pid = pid
        if project_active is not None:
            self.project_active = project_active
        if project_color is not None:
            self.project_color = project_color
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if server_deleted_at is not None:
            self.server_deleted_at = server_deleted_at
        if shared_with is not None:
            self.shared_with = shared_with
        if start is not None:
            self.start = start
        if stop is not None:
            self.stop = stop
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if tags is not None:
            self.tags = tags
        if task_id is not None:
            self.task_id = task_id
        if task_name is not None:
            self.task_name = task_name
        if tid is not None:
            self.tid = tid
        if uid is not None:
            self.uid = uid
        if user_id is not None:
            self.user_id = user_id
        if wid is not None:
            self.wid = wid
        if workspace_id is not None:
            self.workspace_id = workspace_id

    @property
    def at(self) -> str:
        """Gets the at of this ModelsTimeEntry.  # noqa: E501

        When was last updated  # noqa: E501

        :return: The at of this ModelsTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._at

    @at.setter
    def at(self, at: str):
        """Sets the at of this ModelsTimeEntry.

        When was last updated  # noqa: E501

        :param at: The at of this ModelsTimeEntry.  # noqa: E501
        :type: str
        """

        self._at = at

    @property
    def billable(self) -> bool:
        """Gets the billable of this ModelsTimeEntry.  # noqa: E501

        Whether the time entry is marked as billable  # noqa: E501

        :return: The billable of this ModelsTimeEntry.  # noqa: E501
        :rtype: bool
        """
        return self._billable

    @billable.setter
    def billable(self, billable: bool):
        """Sets the billable of this ModelsTimeEntry.

        Whether the time entry is marked as billable  # noqa: E501

        :param billable: The billable of this ModelsTimeEntry.  # noqa: E501
        :type: bool
        """

        self._billable = billable

    @property
    def client_name(self) -> str:
        """Gets the client_name of this ModelsTimeEntry.  # noqa: E501

        Related entities meta fields - if requested  # noqa: E501

        :return: The client_name of this ModelsTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name: str):
        """Sets the client_name of this ModelsTimeEntry.

        Related entities meta fields - if requested  # noqa: E501

        :param client_name: The client_name of this ModelsTimeEntry.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def description(self) -> str:
        """Gets the description of this ModelsTimeEntry.  # noqa: E501

        Time Entry description, null if not provided at creation/update  # noqa: E501

        :return: The description of this ModelsTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ModelsTimeEntry.

        Time Entry description, null if not provided at creation/update  # noqa: E501

        :param description: The description of this ModelsTimeEntry.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def duration(self) -> int:
        """Gets the duration of this ModelsTimeEntry.  # noqa: E501

        Time entry duration. For running entries should be negative, preferable -1  # noqa: E501

        :return: The duration of this ModelsTimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration: int):
        """Sets the duration of this ModelsTimeEntry.

        Time entry duration. For running entries should be negative, preferable -1  # noqa: E501

        :param duration: The duration of this ModelsTimeEntry.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def duronly(self) -> bool:
        """Gets the duronly of this ModelsTimeEntry.  # noqa: E501

        Used to create a TE with a duration but without a stop time, this field is deprecated for GET endpoints where the value will always be true.  # noqa: E501

        :return: The duronly of this ModelsTimeEntry.  # noqa: E501
        :rtype: bool
        """
        return self._duronly

    @duronly.setter
    def duronly(self, duronly: bool):
        """Sets the duronly of this ModelsTimeEntry.

        Used to create a TE with a duration but without a stop time, this field is deprecated for GET endpoints where the value will always be true.  # noqa: E501

        :param duronly: The duronly of this ModelsTimeEntry.  # noqa: E501
        :type: bool
        """

        self._duronly = duronly

    @property
    def id(self) -> int:
        """Gets the id of this ModelsTimeEntry.  # noqa: E501

        Time Entry ID  # noqa: E501

        :return: The id of this ModelsTimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this ModelsTimeEntry.

        Time Entry ID  # noqa: E501

        :param id: The id of this ModelsTimeEntry.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def permissions(self) -> list[str]:
        """Gets the permissions of this ModelsTimeEntry.  # noqa: E501

        Permission list  # noqa: E501

        :return: The permissions of this ModelsTimeEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions: list[str]):
        """Sets the permissions of this ModelsTimeEntry.

        Permission list  # noqa: E501

        :param permissions: The permissions of this ModelsTimeEntry.  # noqa: E501
        :type: list[str]
        """

        self._permissions = permissions

    @property
    def pid(self) -> int:
        """Gets the pid of this ModelsTimeEntry.  # noqa: E501

        Project ID, legacy field  # noqa: E501

        :return: The pid of this ModelsTimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid: int):
        """Sets the pid of this ModelsTimeEntry.

        Project ID, legacy field  # noqa: E501

        :param pid: The pid of this ModelsTimeEntry.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def project_active(self) -> bool:
        """Gets the project_active of this ModelsTimeEntry.  # noqa: E501


        :return: The project_active of this ModelsTimeEntry.  # noqa: E501
        :rtype: bool
        """
        return self._project_active

    @project_active.setter
    def project_active(self, project_active: bool):
        """Sets the project_active of this ModelsTimeEntry.


        :param project_active: The project_active of this ModelsTimeEntry.  # noqa: E501
        :type: bool
        """

        self._project_active = project_active

    @property
    def project_color(self) -> str:
        """Gets the project_color of this ModelsTimeEntry.  # noqa: E501


        :return: The project_color of this ModelsTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._project_color

    @project_color.setter
    def project_color(self, project_color: str):
        """Sets the project_color of this ModelsTimeEntry.


        :param project_color: The project_color of this ModelsTimeEntry.  # noqa: E501
        :type: str
        """

        self._project_color = project_color

    @property
    def project_id(self) -> int:
        """Gets the project_id of this ModelsTimeEntry.  # noqa: E501

        Project ID. Can be null if project was not provided or project was later deleted  # noqa: E501

        :return: The project_id of this ModelsTimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: int):
        """Sets the project_id of this ModelsTimeEntry.

        Project ID. Can be null if project was not provided or project was later deleted  # noqa: E501

        :param project_id: The project_id of this ModelsTimeEntry.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def project_name(self) -> str:
        """Gets the project_name of this ModelsTimeEntry.  # noqa: E501


        :return: The project_name of this ModelsTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name: str):
        """Sets the project_name of this ModelsTimeEntry.


        :param project_name: The project_name of this ModelsTimeEntry.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def server_deleted_at(self) -> str:
        """Gets the server_deleted_at of this ModelsTimeEntry.  # noqa: E501

        When was deleted, null if not deleted  # noqa: E501

        :return: The server_deleted_at of this ModelsTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._server_deleted_at

    @server_deleted_at.setter
    def server_deleted_at(self, server_deleted_at: str):
        """Sets the server_deleted_at of this ModelsTimeEntry.

        When was deleted, null if not deleted  # noqa: E501

        :param server_deleted_at: The server_deleted_at of this ModelsTimeEntry.  # noqa: E501
        :type: str
        """

        self._server_deleted_at = server_deleted_at

    @property
    def shared_with(self) -> list[ModelsTimeEntrySharedWith]:
        """Gets the shared_with of this ModelsTimeEntry.  # noqa: E501

        Indicates who the time entry has been shared with  # noqa: E501

        :return: The shared_with of this ModelsTimeEntry.  # noqa: E501
        :rtype: list[ModelsTimeEntrySharedWith]
        """
        return self._shared_with

    @shared_with.setter
    def shared_with(self, shared_with: list[ModelsTimeEntrySharedWith]):
        """Sets the shared_with of this ModelsTimeEntry.

        Indicates who the time entry has been shared with  # noqa: E501

        :param shared_with: The shared_with of this ModelsTimeEntry.  # noqa: E501
        :type: list[ModelsTimeEntrySharedWith]
        """

        self._shared_with = shared_with

    @property
    def start(self) -> str:
        """Gets the start of this ModelsTimeEntry.  # noqa: E501

        Start time in UTC  # noqa: E501

        :return: The start of this ModelsTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start: str):
        """Sets the start of this ModelsTimeEntry.

        Start time in UTC  # noqa: E501

        :param start: The start of this ModelsTimeEntry.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def stop(self) -> str:
        """Gets the stop of this ModelsTimeEntry.  # noqa: E501

        Stop time in UTC, can be null if it's still running or created with \"duration\" and \"duronly\" fields  # noqa: E501

        :return: The stop of this ModelsTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._stop

    @stop.setter
    def stop(self, stop: str):
        """Sets the stop of this ModelsTimeEntry.

        Stop time in UTC, can be null if it's still running or created with \"duration\" and \"duronly\" fields  # noqa: E501

        :param stop: The stop of this ModelsTimeEntry.  # noqa: E501
        :type: str
        """

        self._stop = stop

    @property
    def tag_ids(self) -> list[int]:
        """Gets the tag_ids of this ModelsTimeEntry.  # noqa: E501

        Tag IDs, null if tags were not provided or were later deleted  # noqa: E501

        :return: The tag_ids of this ModelsTimeEntry.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids: list[int]):
        """Sets the tag_ids of this ModelsTimeEntry.

        Tag IDs, null if tags were not provided or were later deleted  # noqa: E501

        :param tag_ids: The tag_ids of this ModelsTimeEntry.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def tags(self) -> list[str]:
        """Gets the tags of this ModelsTimeEntry.  # noqa: E501

        Tag names, null if tags were not provided or were later deleted  # noqa: E501

        :return: The tags of this ModelsTimeEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: list[str]):
        """Sets the tags of this ModelsTimeEntry.

        Tag names, null if tags were not provided or were later deleted  # noqa: E501

        :param tags: The tags of this ModelsTimeEntry.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def task_id(self) -> int:
        """Gets the task_id of this ModelsTimeEntry.  # noqa: E501

        Task ID. Can be null if task was not provided or project was later deleted  # noqa: E501

        :return: The task_id of this ModelsTimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id: int):
        """Sets the task_id of this ModelsTimeEntry.

        Task ID. Can be null if task was not provided or project was later deleted  # noqa: E501

        :param task_id: The task_id of this ModelsTimeEntry.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def task_name(self) -> str:
        """Gets the task_name of this ModelsTimeEntry.  # noqa: E501


        :return: The task_name of this ModelsTimeEntry.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name: str):
        """Sets the task_name of this ModelsTimeEntry.


        :param task_name: The task_name of this ModelsTimeEntry.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def tid(self) -> int:
        """Gets the tid of this ModelsTimeEntry.  # noqa: E501

        Task ID, legacy field  # noqa: E501

        :return: The tid of this ModelsTimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._tid

    @tid.setter
    def tid(self, tid: int):
        """Sets the tid of this ModelsTimeEntry.

        Task ID, legacy field  # noqa: E501

        :param tid: The tid of this ModelsTimeEntry.  # noqa: E501
        :type: int
        """

        self._tid = tid

    @property
    def uid(self) -> int:
        """Gets the uid of this ModelsTimeEntry.  # noqa: E501

        Time Entry creator ID, legacy field  # noqa: E501

        :return: The uid of this ModelsTimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid: int):
        """Sets the uid of this ModelsTimeEntry.

        Time Entry creator ID, legacy field  # noqa: E501

        :param uid: The uid of this ModelsTimeEntry.  # noqa: E501
        :type: int
        """

        self._uid = uid

    @property
    def user_id(self) -> int:
        """Gets the user_id of this ModelsTimeEntry.  # noqa: E501

        Time Entry creator ID  # noqa: E501

        :return: The user_id of this ModelsTimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this ModelsTimeEntry.

        Time Entry creator ID  # noqa: E501

        :param user_id: The user_id of this ModelsTimeEntry.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def wid(self) -> int:
        """Gets the wid of this ModelsTimeEntry.  # noqa: E501

        Workspace ID, legacy field  # noqa: E501

        :return: The wid of this ModelsTimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._wid

    @wid.setter
    def wid(self, wid: int):
        """Sets the wid of this ModelsTimeEntry.

        Workspace ID, legacy field  # noqa: E501

        :param wid: The wid of this ModelsTimeEntry.  # noqa: E501
        :type: int
        """

        self._wid = wid

    @property
    def workspace_id(self) -> int:
        """Gets the workspace_id of this ModelsTimeEntry.  # noqa: E501

        Workspace ID  # noqa: E501

        :return: The workspace_id of this ModelsTimeEntry.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id: int):
        """Sets the workspace_id of this ModelsTimeEntry.

        Workspace ID  # noqa: E501

        :param workspace_id: The workspace_id of this ModelsTimeEntry.  # noqa: E501
        :type: int
        """

        self._workspace_id = workspace_id

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsTimeEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsTimeEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsTimeEntry):
            return True

        return self.to_dict() != other.to_dict()
