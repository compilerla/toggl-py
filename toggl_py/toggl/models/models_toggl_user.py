"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ModelsTogglUser:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "api_token": "str",
        "at": "datetime",
        "beginning_of_week": "int",
        "country_id": "int",
        "created_at": "datetime",
        "default_workspace_id": "int",
        "email": "str",
        "fullname": "str",
        "has_password": "bool",
        "id": "int",
        "image_url": "str",
        "openid_email": "str",
        "openid_enabled": "bool",
        "options": "ModelsOptions",
        "timezone": "str",
        "updated_at": "datetime",
    }

    attribute_map = {
        "api_token": "api_token",
        "at": "at",
        "beginning_of_week": "beginning_of_week",
        "country_id": "country_id",
        "created_at": "created_at",
        "default_workspace_id": "default_workspace_id",
        "email": "email",
        "fullname": "fullname",
        "has_password": "has_password",
        "id": "id",
        "image_url": "image_url",
        "openid_email": "openid_email",
        "openid_enabled": "openid_enabled",
        "options": "options",
        "timezone": "timezone",
        "updated_at": "updated_at",
    }

    def __init__(
        self,
        api_token=None,
        at=None,
        beginning_of_week=None,
        country_id=None,
        created_at=None,
        default_workspace_id=None,
        email=None,
        fullname=None,
        has_password=None,
        id=None,
        image_url=None,
        openid_email=None,
        openid_enabled=None,
        options=None,
        timezone=None,
        updated_at=None,
        _configuration=None,
    ):  # noqa: E501
        """ModelsTogglUser - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._api_token = None
        self._at = None
        self._beginning_of_week = None
        self._country_id = None
        self._created_at = None
        self._default_workspace_id = None
        self._email = None
        self._fullname = None
        self._has_password = None
        self._id = None
        self._image_url = None
        self._openid_email = None
        self._openid_enabled = None
        self._options = None
        self._timezone = None
        self._updated_at = None
        self.discriminator = None

        if api_token is not None:
            self.api_token = api_token
        if at is not None:
            self.at = at
        if beginning_of_week is not None:
            self.beginning_of_week = beginning_of_week
        if country_id is not None:
            self.country_id = country_id
        if created_at is not None:
            self.created_at = created_at
        if default_workspace_id is not None:
            self.default_workspace_id = default_workspace_id
        if email is not None:
            self.email = email
        if fullname is not None:
            self.fullname = fullname
        if has_password is not None:
            self.has_password = has_password
        if id is not None:
            self.id = id
        if image_url is not None:
            self.image_url = image_url
        if openid_email is not None:
            self.openid_email = openid_email
        if openid_enabled is not None:
            self.openid_enabled = openid_enabled
        if options is not None:
            self.options = options
        if timezone is not None:
            self.timezone = timezone
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def api_token(self):
        """Gets the api_token of this ModelsTogglUser.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The api_token of this ModelsTogglUser.  # noqa: E501
        :rtype: str
        """
        return self._api_token

    @api_token.setter
    def api_token(self, api_token):
        """Sets the api_token of this ModelsTogglUser.

        will be omitted if empty  # noqa: E501

        :param api_token: The api_token of this ModelsTogglUser.  # noqa: E501
        :type: str
        """

        self._api_token = api_token

    @property
    def at(self):
        """Gets the at of this ModelsTogglUser.  # noqa: E501


        :return: The at of this ModelsTogglUser.  # noqa: E501
        :rtype: datetime
        """
        return self._at

    @at.setter
    def at(self, at):
        """Sets the at of this ModelsTogglUser.


        :param at: The at of this ModelsTogglUser.  # noqa: E501
        :type: datetime
        """

        self._at = at

    @property
    def beginning_of_week(self):
        """Gets the beginning_of_week of this ModelsTogglUser.  # noqa: E501


        :return: The beginning_of_week of this ModelsTogglUser.  # noqa: E501
        :rtype: int
        """
        return self._beginning_of_week

    @beginning_of_week.setter
    def beginning_of_week(self, beginning_of_week):
        """Sets the beginning_of_week of this ModelsTogglUser.


        :param beginning_of_week: The beginning_of_week of this ModelsTogglUser.  # noqa: E501
        :type: int
        """

        self._beginning_of_week = beginning_of_week

    @property
    def country_id(self):
        """Gets the country_id of this ModelsTogglUser.  # noqa: E501


        :return: The country_id of this ModelsTogglUser.  # noqa: E501
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this ModelsTogglUser.


        :param country_id: The country_id of this ModelsTogglUser.  # noqa: E501
        :type: int
        """

        self._country_id = country_id

    @property
    def created_at(self):
        """Gets the created_at of this ModelsTogglUser.  # noqa: E501


        :return: The created_at of this ModelsTogglUser.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ModelsTogglUser.


        :param created_at: The created_at of this ModelsTogglUser.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def default_workspace_id(self):
        """Gets the default_workspace_id of this ModelsTogglUser.  # noqa: E501


        :return: The default_workspace_id of this ModelsTogglUser.  # noqa: E501
        :rtype: int
        """
        return self._default_workspace_id

    @default_workspace_id.setter
    def default_workspace_id(self, default_workspace_id):
        """Sets the default_workspace_id of this ModelsTogglUser.


        :param default_workspace_id: The default_workspace_id of this ModelsTogglUser.  # noqa: E501
        :type: int
        """

        self._default_workspace_id = default_workspace_id

    @property
    def email(self):
        """Gets the email of this ModelsTogglUser.  # noqa: E501


        :return: The email of this ModelsTogglUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ModelsTogglUser.


        :param email: The email of this ModelsTogglUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def fullname(self):
        """Gets the fullname of this ModelsTogglUser.  # noqa: E501


        :return: The fullname of this ModelsTogglUser.  # noqa: E501
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this ModelsTogglUser.


        :param fullname: The fullname of this ModelsTogglUser.  # noqa: E501
        :type: str
        """

        self._fullname = fullname

    @property
    def has_password(self):
        """Gets the has_password of this ModelsTogglUser.  # noqa: E501


        :return: The has_password of this ModelsTogglUser.  # noqa: E501
        :rtype: bool
        """
        return self._has_password

    @has_password.setter
    def has_password(self, has_password):
        """Sets the has_password of this ModelsTogglUser.


        :param has_password: The has_password of this ModelsTogglUser.  # noqa: E501
        :type: bool
        """

        self._has_password = has_password

    @property
    def id(self):
        """Gets the id of this ModelsTogglUser.  # noqa: E501


        :return: The id of this ModelsTogglUser.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelsTogglUser.


        :param id: The id of this ModelsTogglUser.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this ModelsTogglUser.  # noqa: E501


        :return: The image_url of this ModelsTogglUser.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this ModelsTogglUser.


        :param image_url: The image_url of this ModelsTogglUser.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def openid_email(self):
        """Gets the openid_email of this ModelsTogglUser.  # noqa: E501


        :return: The openid_email of this ModelsTogglUser.  # noqa: E501
        :rtype: str
        """
        return self._openid_email

    @openid_email.setter
    def openid_email(self, openid_email):
        """Sets the openid_email of this ModelsTogglUser.


        :param openid_email: The openid_email of this ModelsTogglUser.  # noqa: E501
        :type: str
        """

        self._openid_email = openid_email

    @property
    def openid_enabled(self):
        """Gets the openid_enabled of this ModelsTogglUser.  # noqa: E501


        :return: The openid_enabled of this ModelsTogglUser.  # noqa: E501
        :rtype: bool
        """
        return self._openid_enabled

    @openid_enabled.setter
    def openid_enabled(self, openid_enabled):
        """Sets the openid_enabled of this ModelsTogglUser.


        :param openid_enabled: The openid_enabled of this ModelsTogglUser.  # noqa: E501
        :type: bool
        """

        self._openid_enabled = openid_enabled

    @property
    def options(self):
        """Gets the options of this ModelsTogglUser.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The options of this ModelsTogglUser.  # noqa: E501
        :rtype: ModelsOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ModelsTogglUser.

        will be omitted if empty  # noqa: E501

        :param options: The options of this ModelsTogglUser.  # noqa: E501
        :type: ModelsOptions
        """

        self._options = options

    @property
    def timezone(self):
        """Gets the timezone of this ModelsTogglUser.  # noqa: E501


        :return: The timezone of this ModelsTogglUser.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this ModelsTogglUser.


        :param timezone: The timezone of this ModelsTogglUser.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def updated_at(self):
        """Gets the updated_at of this ModelsTogglUser.  # noqa: E501


        :return: The updated_at of this ModelsTogglUser.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ModelsTogglUser.


        :param updated_at: The updated_at of this ModelsTogglUser.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsTogglUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsTogglUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsTogglUser):
            return True

        return self.to_dict() != other.to_dict()
