"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration


class ModelsWindowsAutoTrackingParameters:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {"keyword": "str", "time_of_day": "str", "week_days": "str"}

    attribute_map = {"keyword": "keyword", "time_of_day": "time_of_day", "week_days": "week_days"}

    def __init__(
        self,
        keyword: str = None,
        time_of_day: str = None,
        week_days: str = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        ModelsWindowsAutoTrackingParameters - a model defined in Swagger

        Parameters:
          keyword (str): Optional
          time_of_day (str): Optional
          week_days (str): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._keyword = None
        self._time_of_day = None
        self._week_days = None
        self.discriminator = None

        if keyword is not None:
            self.keyword = keyword
        if time_of_day is not None:
            self.time_of_day = time_of_day
        if week_days is not None:
            self.week_days = week_days

    @property
    def keyword(self) -> str:
        """Gets the keyword of this ModelsWindowsAutoTrackingParameters.  # noqa: E501


        :return: The keyword of this ModelsWindowsAutoTrackingParameters.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword: str):
        """Sets the keyword of this ModelsWindowsAutoTrackingParameters.


        :param keyword: The keyword of this ModelsWindowsAutoTrackingParameters.  # noqa: E501
        :type: str
        """

        self._keyword = keyword

    @property
    def time_of_day(self) -> str:
        """Gets the time_of_day of this ModelsWindowsAutoTrackingParameters.  # noqa: E501


        :return: The time_of_day of this ModelsWindowsAutoTrackingParameters.  # noqa: E501
        :rtype: str
        """
        return self._time_of_day

    @time_of_day.setter
    def time_of_day(self, time_of_day: str):
        """Sets the time_of_day of this ModelsWindowsAutoTrackingParameters.


        :param time_of_day: The time_of_day of this ModelsWindowsAutoTrackingParameters.  # noqa: E501
        :type: str
        """

        self._time_of_day = time_of_day

    @property
    def week_days(self) -> str:
        """Gets the week_days of this ModelsWindowsAutoTrackingParameters.  # noqa: E501


        :return: The week_days of this ModelsWindowsAutoTrackingParameters.  # noqa: E501
        :rtype: str
        """
        return self._week_days

    @week_days.setter
    def week_days(self, week_days: str):
        """Sets the week_days of this ModelsWindowsAutoTrackingParameters.


        :param week_days: The week_days of this ModelsWindowsAutoTrackingParameters.  # noqa: E501
        :type: str
        """

        self._week_days = week_days

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsWindowsAutoTrackingParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsWindowsAutoTrackingParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsWindowsAutoTrackingParameters):
            return True

        return self.to_dict() != other.to_dict()
