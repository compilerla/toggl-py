"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration


class ModelsWorkspacePreferences:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "annual_master_campaign_2018": "str",
        "hide_start_end_times": "bool",
        "inc_tos_accepted_at": "str",
        "inc_tos_accepted_by": "int",
        "initial_pricing_plan": "int",
        "january_2018_campaign": "bool",
        "master_signup": "bool",
        "report_locked_at": "str",
        "single_sign_on": "bool",
        "sso_requested_at": "str",
    }

    attribute_map = {
        "annual_master_campaign_2018": "annual-master-campaign-2018",
        "hide_start_end_times": "hide_start_end_times",
        "inc_tos_accepted_at": "inc_tos_accepted_at",
        "inc_tos_accepted_by": "inc_tos_accepted_by",
        "initial_pricing_plan": "initial_pricing_plan",
        "january_2018_campaign": "january-2018-campaign",
        "master_signup": "master_signup",
        "report_locked_at": "report_locked_at",
        "single_sign_on": "single_sign_on",
        "sso_requested_at": "sso_requested_at",
    }

    def __init__(
        self,
        annual_master_campaign_2018: str = None,
        hide_start_end_times: bool = None,
        inc_tos_accepted_at: str = None,
        inc_tos_accepted_by: int = None,
        initial_pricing_plan: int = None,
        january_2018_campaign: bool = None,
        master_signup: bool = None,
        report_locked_at: str = None,
        single_sign_on: bool = None,
        sso_requested_at: str = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        ModelsWorkspacePreferences - a model defined in Swagger

        Parameters:
          annual_master_campaign_2018 (str): Optional
          hide_start_end_times (bool): Optional
          inc_tos_accepted_at (str): Optional
          inc_tos_accepted_by (int): Optional
          initial_pricing_plan (int): Optional
          january_2018_campaign (bool): Optional
          master_signup (bool): Optional
          report_locked_at (str): Optional
          single_sign_on (bool): Optional
          sso_requested_at (str): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._annual_master_campaign_2018 = None
        self._hide_start_end_times = None
        self._inc_tos_accepted_at = None
        self._inc_tos_accepted_by = None
        self._initial_pricing_plan = None
        self._january_2018_campaign = None
        self._master_signup = None
        self._report_locked_at = None
        self._single_sign_on = None
        self._sso_requested_at = None
        self.discriminator = None

        if annual_master_campaign_2018 is not None:
            self.annual_master_campaign_2018 = annual_master_campaign_2018
        if hide_start_end_times is not None:
            self.hide_start_end_times = hide_start_end_times
        if inc_tos_accepted_at is not None:
            self.inc_tos_accepted_at = inc_tos_accepted_at
        if inc_tos_accepted_by is not None:
            self.inc_tos_accepted_by = inc_tos_accepted_by
        if initial_pricing_plan is not None:
            self.initial_pricing_plan = initial_pricing_plan
        if january_2018_campaign is not None:
            self.january_2018_campaign = january_2018_campaign
        if master_signup is not None:
            self.master_signup = master_signup
        if report_locked_at is not None:
            self.report_locked_at = report_locked_at
        if single_sign_on is not None:
            self.single_sign_on = single_sign_on
        if sso_requested_at is not None:
            self.sso_requested_at = sso_requested_at

    @property
    def annual_master_campaign_2018(self) -> str:
        """Gets the annual_master_campaign_2018 of this ModelsWorkspacePreferences.  # noqa: E501

        Legacy field  # noqa: E501

        :return: The annual_master_campaign_2018 of this ModelsWorkspacePreferences.  # noqa: E501
        :rtype: str
        """
        return self._annual_master_campaign_2018

    @annual_master_campaign_2018.setter
    def annual_master_campaign_2018(self, annual_master_campaign_2018: str):
        """Sets the annual_master_campaign_2018 of this ModelsWorkspacePreferences.

        Legacy field  # noqa: E501

        :param annual_master_campaign_2018: The annual_master_campaign_2018 of this ModelsWorkspacePreferences.  # noqa: E501
        :type: str
        """

        self._annual_master_campaign_2018 = annual_master_campaign_2018

    @property
    def hide_start_end_times(self) -> bool:
        """Gets the hide_start_end_times of this ModelsWorkspacePreferences.  # noqa: E501

        This workspace works with duration only time entries  # noqa: E501

        :return: The hide_start_end_times of this ModelsWorkspacePreferences.  # noqa: E501
        :rtype: bool
        """
        return self._hide_start_end_times

    @hide_start_end_times.setter
    def hide_start_end_times(self, hide_start_end_times: bool):
        """Sets the hide_start_end_times of this ModelsWorkspacePreferences.

        This workspace works with duration only time entries  # noqa: E501

        :param hide_start_end_times: The hide_start_end_times of this ModelsWorkspacePreferences.  # noqa: E501
        :type: bool
        """

        self._hide_start_end_times = hide_start_end_times

    @property
    def inc_tos_accepted_at(self) -> str:
        """Gets the inc_tos_accepted_at of this ModelsWorkspacePreferences.  # noqa: E501

        Time of acceptance of the terms of service  # noqa: E501

        :return: The inc_tos_accepted_at of this ModelsWorkspacePreferences.  # noqa: E501
        :rtype: str
        """
        return self._inc_tos_accepted_at

    @inc_tos_accepted_at.setter
    def inc_tos_accepted_at(self, inc_tos_accepted_at: str):
        """Sets the inc_tos_accepted_at of this ModelsWorkspacePreferences.

        Time of acceptance of the terms of service  # noqa: E501

        :param inc_tos_accepted_at: The inc_tos_accepted_at of this ModelsWorkspacePreferences.  # noqa: E501
        :type: str
        """

        self._inc_tos_accepted_at = inc_tos_accepted_at

    @property
    def inc_tos_accepted_by(self) -> int:
        """Gets the inc_tos_accepted_by of this ModelsWorkspacePreferences.  # noqa: E501

        User ID who accepted the terms of service  # noqa: E501

        :return: The inc_tos_accepted_by of this ModelsWorkspacePreferences.  # noqa: E501
        :rtype: int
        """
        return self._inc_tos_accepted_by

    @inc_tos_accepted_by.setter
    def inc_tos_accepted_by(self, inc_tos_accepted_by: int):
        """Sets the inc_tos_accepted_by of this ModelsWorkspacePreferences.

        User ID who accepted the terms of service  # noqa: E501

        :param inc_tos_accepted_by: The inc_tos_accepted_by of this ModelsWorkspacePreferences.  # noqa: E501
        :type: int
        """

        self._inc_tos_accepted_by = inc_tos_accepted_by

    @property
    def initial_pricing_plan(self) -> int:
        """Gets the initial_pricing_plan of this ModelsWorkspacePreferences.  # noqa: E501

        Pricing plan ID  # noqa: E501

        :return: The initial_pricing_plan of this ModelsWorkspacePreferences.  # noqa: E501
        :rtype: int
        """
        return self._initial_pricing_plan

    @initial_pricing_plan.setter
    def initial_pricing_plan(self, initial_pricing_plan: int):
        """Sets the initial_pricing_plan of this ModelsWorkspacePreferences.

        Pricing plan ID  # noqa: E501

        :param initial_pricing_plan: The initial_pricing_plan of this ModelsWorkspacePreferences.  # noqa: E501
        :type: int
        """

        self._initial_pricing_plan = initial_pricing_plan

    @property
    def january_2018_campaign(self) -> bool:
        """Gets the january_2018_campaign of this ModelsWorkspacePreferences.  # noqa: E501

        Legacy field  # noqa: E501

        :return: The january_2018_campaign of this ModelsWorkspacePreferences.  # noqa: E501
        :rtype: bool
        """
        return self._january_2018_campaign

    @january_2018_campaign.setter
    def january_2018_campaign(self, january_2018_campaign: bool):
        """Sets the january_2018_campaign of this ModelsWorkspacePreferences.

        Legacy field  # noqa: E501

        :param january_2018_campaign: The january_2018_campaign of this ModelsWorkspacePreferences.  # noqa: E501
        :type: bool
        """

        self._january_2018_campaign = january_2018_campaign

    @property
    def master_signup(self) -> bool:
        """Gets the master_signup of this ModelsWorkspacePreferences.  # noqa: E501

        Legacy field  # noqa: E501

        :return: The master_signup of this ModelsWorkspacePreferences.  # noqa: E501
        :rtype: bool
        """
        return self._master_signup

    @master_signup.setter
    def master_signup(self, master_signup: bool):
        """Sets the master_signup of this ModelsWorkspacePreferences.

        Legacy field  # noqa: E501

        :param master_signup: The master_signup of this ModelsWorkspacePreferences.  # noqa: E501
        :type: bool
        """

        self._master_signup = master_signup

    @property
    def report_locked_at(self) -> str:
        """Gets the report_locked_at of this ModelsWorkspacePreferences.  # noqa: E501

        Date on which \"Lock Time Entries\" feature was enabled  # noqa: E501

        :return: The report_locked_at of this ModelsWorkspacePreferences.  # noqa: E501
        :rtype: str
        """
        return self._report_locked_at

    @report_locked_at.setter
    def report_locked_at(self, report_locked_at: str):
        """Sets the report_locked_at of this ModelsWorkspacePreferences.

        Date on which \"Lock Time Entries\" feature was enabled  # noqa: E501

        :param report_locked_at: The report_locked_at of this ModelsWorkspacePreferences.  # noqa: E501
        :type: str
        """

        self._report_locked_at = report_locked_at

    @property
    def single_sign_on(self) -> bool:
        """Gets the single_sign_on of this ModelsWorkspacePreferences.  # noqa: E501

        Whether SSO is enabled for this workspace  # noqa: E501

        :return: The single_sign_on of this ModelsWorkspacePreferences.  # noqa: E501
        :rtype: bool
        """
        return self._single_sign_on

    @single_sign_on.setter
    def single_sign_on(self, single_sign_on: bool):
        """Sets the single_sign_on of this ModelsWorkspacePreferences.

        Whether SSO is enabled for this workspace  # noqa: E501

        :param single_sign_on: The single_sign_on of this ModelsWorkspacePreferences.  # noqa: E501
        :type: bool
        """

        self._single_sign_on = single_sign_on

    @property
    def sso_requested_at(self) -> str:
        """Gets the sso_requested_at of this ModelsWorkspacePreferences.  # noqa: E501

        Date on which SSO was requested  # noqa: E501

        :return: The sso_requested_at of this ModelsWorkspacePreferences.  # noqa: E501
        :rtype: str
        """
        return self._sso_requested_at

    @sso_requested_at.setter
    def sso_requested_at(self, sso_requested_at: str):
        """Sets the sso_requested_at of this ModelsWorkspacePreferences.

        Date on which SSO was requested  # noqa: E501

        :param sso_requested_at: The sso_requested_at of this ModelsWorkspacePreferences.  # noqa: E501
        :type: str
        """

        self._sso_requested_at = sso_requested_at

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ModelsWorkspacePreferences, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsWorkspacePreferences):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelsWorkspacePreferences):
            return True

        return self.to_dict() != other.to_dict()
