"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

from __future__ import annotations  # noqa: F401
import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration


class ProjectsProjectResponse:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "active": "bool",
        "billable": "bool",
        "client_id": "int",
        "color": "str",
        "currency": "str",
        "id": "int",
        "name": "str",
    }

    attribute_map = {
        "active": "active",
        "billable": "billable",
        "client_id": "client_id",
        "color": "color",
        "currency": "currency",
        "id": "id",
        "name": "name",
    }

    def __init__(
        self,
        active: bool = None,
        billable: bool = None,
        client_id: int = None,
        color: str = None,
        currency: str = None,
        id: int = None,
        name: str = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        ProjectsProjectResponse - a model defined in Swagger

        Parameters:
          active (bool): Optional
          billable (bool): Optional
          client_id (int): Optional
          color (str): Optional
          currency (str): Optional
          id (int): Optional
          name (str): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active = None
        self._billable = None
        self._client_id = None
        self._color = None
        self._currency = None
        self._id = None
        self._name = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if billable is not None:
            self.billable = billable
        if client_id is not None:
            self.client_id = client_id
        if color is not None:
            self.color = color
        if currency is not None:
            self.currency = currency
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name

    @property
    def active(self) -> bool:
        """Gets the active of this ProjectsProjectResponse.  # noqa: E501


        :return: The active of this ProjectsProjectResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this ProjectsProjectResponse.


        :param active: The active of this ProjectsProjectResponse.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def billable(self) -> bool:
        """Gets the billable of this ProjectsProjectResponse.  # noqa: E501


        :return: The billable of this ProjectsProjectResponse.  # noqa: E501
        :rtype: bool
        """
        return self._billable

    @billable.setter
    def billable(self, billable: bool):
        """Sets the billable of this ProjectsProjectResponse.


        :param billable: The billable of this ProjectsProjectResponse.  # noqa: E501
        :type: bool
        """

        self._billable = billable

    @property
    def client_id(self) -> int:
        """Gets the client_id of this ProjectsProjectResponse.  # noqa: E501


        :return: The client_id of this ProjectsProjectResponse.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id: int):
        """Sets the client_id of this ProjectsProjectResponse.


        :param client_id: The client_id of this ProjectsProjectResponse.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def color(self) -> str:
        """Gets the color of this ProjectsProjectResponse.  # noqa: E501


        :return: The color of this ProjectsProjectResponse.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color: str):
        """Sets the color of this ProjectsProjectResponse.


        :param color: The color of this ProjectsProjectResponse.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def currency(self) -> str:
        """Gets the currency of this ProjectsProjectResponse.  # noqa: E501


        :return: The currency of this ProjectsProjectResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this ProjectsProjectResponse.


        :param currency: The currency of this ProjectsProjectResponse.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def id(self) -> int:
        """Gets the id of this ProjectsProjectResponse.  # noqa: E501


        :return: The id of this ProjectsProjectResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this ProjectsProjectResponse.


        :param id: The id of this ProjectsProjectResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this ProjectsProjectResponse.  # noqa: E501


        :return: The name of this ProjectsProjectResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ProjectsProjectResponse.


        :param name: The name of this ProjectsProjectResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ProjectsProjectResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectsProjectResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectsProjectResponse):
            return True

        return self.to_dict() != other.to_dict()
