"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ProjectsProjectTrends:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "current_period_seconds": "list[int]",
        "previous_period_seconds": "list[int]",
        "project_id": "int",
        "start": "str",
        "user_ids": "list[int]",
    }

    attribute_map = {
        "current_period_seconds": "current_period_seconds",
        "previous_period_seconds": "previous_period_seconds",
        "project_id": "project_id",
        "start": "start",
        "user_ids": "user_ids",
    }

    def __init__(
        self,
        current_period_seconds=None,
        previous_period_seconds=None,
        project_id=None,
        start=None,
        user_ids=None,
        _configuration=None,
    ):  # noqa: E501
        """ProjectsProjectTrends - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._current_period_seconds = None
        self._previous_period_seconds = None
        self._project_id = None
        self._start = None
        self._user_ids = None
        self.discriminator = None

        if current_period_seconds is not None:
            self.current_period_seconds = current_period_seconds
        if previous_period_seconds is not None:
            self.previous_period_seconds = previous_period_seconds
        if project_id is not None:
            self.project_id = project_id
        if start is not None:
            self.start = start
        if user_ids is not None:
            self.user_ids = user_ids

    @property
    def current_period_seconds(self):
        """Gets the current_period_seconds of this ProjectsProjectTrends.  # noqa: E501


        :return: The current_period_seconds of this ProjectsProjectTrends.  # noqa: E501
        :rtype: list[int]
        """
        return self._current_period_seconds

    @current_period_seconds.setter
    def current_period_seconds(self, current_period_seconds):
        """Sets the current_period_seconds of this ProjectsProjectTrends.


        :param current_period_seconds: The current_period_seconds of this ProjectsProjectTrends.  # noqa: E501
        :type: list[int]
        """

        self._current_period_seconds = current_period_seconds

    @property
    def previous_period_seconds(self):
        """Gets the previous_period_seconds of this ProjectsProjectTrends.  # noqa: E501


        :return: The previous_period_seconds of this ProjectsProjectTrends.  # noqa: E501
        :rtype: list[int]
        """
        return self._previous_period_seconds

    @previous_period_seconds.setter
    def previous_period_seconds(self, previous_period_seconds):
        """Sets the previous_period_seconds of this ProjectsProjectTrends.


        :param previous_period_seconds: The previous_period_seconds of this ProjectsProjectTrends.  # noqa: E501
        :type: list[int]
        """

        self._previous_period_seconds = previous_period_seconds

    @property
    def project_id(self):
        """Gets the project_id of this ProjectsProjectTrends.  # noqa: E501


        :return: The project_id of this ProjectsProjectTrends.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectsProjectTrends.


        :param project_id: The project_id of this ProjectsProjectTrends.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def start(self):
        """Gets the start of this ProjectsProjectTrends.  # noqa: E501


        :return: The start of this ProjectsProjectTrends.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ProjectsProjectTrends.


        :param start: The start of this ProjectsProjectTrends.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def user_ids(self):
        """Gets the user_ids of this ProjectsProjectTrends.  # noqa: E501


        :return: The user_ids of this ProjectsProjectTrends.  # noqa: E501
        :rtype: list[int]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this ProjectsProjectTrends.


        :param user_ids: The user_ids of this ProjectsProjectTrends.  # noqa: E501
        :type: list[int]
        """

        self._user_ids = user_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ProjectsProjectTrends, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectsProjectTrends):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectsProjectTrends):
            return True

        return self.to_dict() != other.to_dict()
