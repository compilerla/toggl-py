"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ProjectsProjectsPost:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "client_ids": "list[int]",
        "currency": "str",
        "ids": "list[int]",
        "is_active": "bool",
        "is_billable": "bool",
        "is_private": "bool",
        "name": "str",
        "page_size": "int",
        "start": "int",
    }

    attribute_map = {
        "client_ids": "client_ids",
        "currency": "currency",
        "ids": "ids",
        "is_active": "is_active",
        "is_billable": "is_billable",
        "is_private": "is_private",
        "name": "name",
        "page_size": "page_size",
        "start": "start",
    }

    def __init__(
        self,
        client_ids=None,
        currency=None,
        ids=None,
        is_active=None,
        is_billable=None,
        is_private=None,
        name=None,
        page_size=None,
        start=None,
        _configuration=None,
    ):  # noqa: E501
        """ProjectsProjectsPost - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._client_ids = None
        self._currency = None
        self._ids = None
        self._is_active = None
        self._is_billable = None
        self._is_private = None
        self._name = None
        self._page_size = None
        self._start = None
        self.discriminator = None

        if client_ids is not None:
            self.client_ids = client_ids
        if currency is not None:
            self.currency = currency
        if ids is not None:
            self.ids = ids
        if is_active is not None:
            self.is_active = is_active
        if is_billable is not None:
            self.is_billable = is_billable
        if is_private is not None:
            self.is_private = is_private
        if name is not None:
            self.name = name
        if page_size is not None:
            self.page_size = page_size
        if start is not None:
            self.start = start

    @property
    def client_ids(self):
        """Gets the client_ids of this ProjectsProjectsPost.  # noqa: E501

        Client IDs, optional.  # noqa: E501

        :return: The client_ids of this ProjectsProjectsPost.  # noqa: E501
        :rtype: list[int]
        """
        return self._client_ids

    @client_ids.setter
    def client_ids(self, client_ids):
        """Sets the client_ids of this ProjectsProjectsPost.

        Client IDs, optional.  # noqa: E501

        :param client_ids: The client_ids of this ProjectsProjectsPost.  # noqa: E501
        :type: list[int]
        """

        self._client_ids = client_ids

    @property
    def currency(self):
        """Gets the currency of this ProjectsProjectsPost.  # noqa: E501

        Currency, optional, example \"EUR\".  # noqa: E501

        :return: The currency of this ProjectsProjectsPost.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ProjectsProjectsPost.

        Currency, optional, example \"EUR\".  # noqa: E501

        :param currency: The currency of this ProjectsProjectsPost.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def ids(self):
        """Gets the ids of this ProjectsProjectsPost.  # noqa: E501

        Project IDs, optional.  # noqa: E501

        :return: The ids of this ProjectsProjectsPost.  # noqa: E501
        :rtype: list[int]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this ProjectsProjectsPost.

        Project IDs, optional.  # noqa: E501

        :param ids: The ids of this ProjectsProjectsPost.  # noqa: E501
        :type: list[int]
        """

        self._ids = ids

    @property
    def is_active(self):
        """Gets the is_active of this ProjectsProjectsPost.  # noqa: E501

        Whether the wanted projects are archived, optional, default false.  # noqa: E501

        :return: The is_active of this ProjectsProjectsPost.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ProjectsProjectsPost.

        Whether the wanted projects are archived, optional, default false.  # noqa: E501

        :param is_active: The is_active of this ProjectsProjectsPost.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_billable(self):
        """Gets the is_billable of this ProjectsProjectsPost.  # noqa: E501

        Whether the wanted projects are billable, optional, premium feature, default false.  # noqa: E501

        :return: The is_billable of this ProjectsProjectsPost.  # noqa: E501
        :rtype: bool
        """
        return self._is_billable

    @is_billable.setter
    def is_billable(self, is_billable):
        """Sets the is_billable of this ProjectsProjectsPost.

        Whether the wanted projects are billable, optional, premium feature, default false.  # noqa: E501

        :param is_billable: The is_billable of this ProjectsProjectsPost.  # noqa: E501
        :type: bool
        """

        self._is_billable = is_billable

    @property
    def is_private(self):
        """Gets the is_private of this ProjectsProjectsPost.  # noqa: E501

        Whether the wanted projects are private, optional, default false.  # noqa: E501

        :return: The is_private of this ProjectsProjectsPost.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this ProjectsProjectsPost.

        Whether the wanted projects are private, optional, default false.  # noqa: E501

        :param is_private: The is_private of this ProjectsProjectsPost.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def name(self):
        """Gets the name of this ProjectsProjectsPost.  # noqa: E501

        Project name, optional.  # noqa: E501

        :return: The name of this ProjectsProjectsPost.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectsProjectsPost.

        Project name, optional.  # noqa: E501

        :param name: The name of this ProjectsProjectsPost.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def page_size(self):
        """Gets the page_size of this ProjectsProjectsPost.  # noqa: E501

        PageSize is the number of records returned per page. If unset, the default value of 201 will be used.  # noqa: E501

        :return: The page_size of this ProjectsProjectsPost.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ProjectsProjectsPost.

        PageSize is the number of records returned per page. If unset, the default value of 201 will be used.  # noqa: E501

        :param page_size: The page_size of this ProjectsProjectsPost.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def start(self):
        """Gets the start of this ProjectsProjectsPost.  # noqa: E501

        Start is used for pagination, optional, default 0. The api will return the next projects page with id >= Start.  # noqa: E501

        :return: The start of this ProjectsProjectsPost.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ProjectsProjectsPost.

        Start is used for pagination, optional, default 0. The api will return the next projects page with id >= Start.  # noqa: E501

        :param start: The start of this ProjectsProjectsPost.  # noqa: E501
        :type: int
        """

        self._start = start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ProjectsProjectsPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectsProjectsPost):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectsProjectsPost):
            return True

        return self.to_dict() != other.to_dict()
