"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class ProjectsReportTableRow:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "billable_seconds": "int",
        "color": "str",
        "currency": "str",
        "earnings": "int",
        "labour_cost": "int",
        "name": "str",
        "project_id": "int",
        "total_seconds": "int",
    }

    attribute_map = {
        "billable_seconds": "billable_seconds",
        "color": "color",
        "currency": "currency",
        "earnings": "earnings",
        "labour_cost": "labour_cost",
        "name": "name",
        "project_id": "project_id",
        "total_seconds": "total_seconds",
    }

    def __init__(
        self,
        billable_seconds=None,
        color=None,
        currency=None,
        earnings=None,
        labour_cost=None,
        name=None,
        project_id=None,
        total_seconds=None,
        _configuration=None,
    ):  # noqa: E501
        """ProjectsReportTableRow - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._billable_seconds = None
        self._color = None
        self._currency = None
        self._earnings = None
        self._labour_cost = None
        self._name = None
        self._project_id = None
        self._total_seconds = None
        self.discriminator = None

        if billable_seconds is not None:
            self.billable_seconds = billable_seconds
        if color is not None:
            self.color = color
        if currency is not None:
            self.currency = currency
        if earnings is not None:
            self.earnings = earnings
        if labour_cost is not None:
            self.labour_cost = labour_cost
        if name is not None:
            self.name = name
        if project_id is not None:
            self.project_id = project_id
        if total_seconds is not None:
            self.total_seconds = total_seconds

    @property
    def billable_seconds(self):
        """Gets the billable_seconds of this ProjectsReportTableRow.  # noqa: E501


        :return: The billable_seconds of this ProjectsReportTableRow.  # noqa: E501
        :rtype: int
        """
        return self._billable_seconds

    @billable_seconds.setter
    def billable_seconds(self, billable_seconds):
        """Sets the billable_seconds of this ProjectsReportTableRow.


        :param billable_seconds: The billable_seconds of this ProjectsReportTableRow.  # noqa: E501
        :type: int
        """

        self._billable_seconds = billable_seconds

    @property
    def color(self):
        """Gets the color of this ProjectsReportTableRow.  # noqa: E501


        :return: The color of this ProjectsReportTableRow.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ProjectsReportTableRow.


        :param color: The color of this ProjectsReportTableRow.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def currency(self):
        """Gets the currency of this ProjectsReportTableRow.  # noqa: E501


        :return: The currency of this ProjectsReportTableRow.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ProjectsReportTableRow.


        :param currency: The currency of this ProjectsReportTableRow.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def earnings(self):
        """Gets the earnings of this ProjectsReportTableRow.  # noqa: E501


        :return: The earnings of this ProjectsReportTableRow.  # noqa: E501
        :rtype: int
        """
        return self._earnings

    @earnings.setter
    def earnings(self, earnings):
        """Sets the earnings of this ProjectsReportTableRow.


        :param earnings: The earnings of this ProjectsReportTableRow.  # noqa: E501
        :type: int
        """

        self._earnings = earnings

    @property
    def labour_cost(self):
        """Gets the labour_cost of this ProjectsReportTableRow.  # noqa: E501


        :return: The labour_cost of this ProjectsReportTableRow.  # noqa: E501
        :rtype: int
        """
        return self._labour_cost

    @labour_cost.setter
    def labour_cost(self, labour_cost):
        """Sets the labour_cost of this ProjectsReportTableRow.


        :param labour_cost: The labour_cost of this ProjectsReportTableRow.  # noqa: E501
        :type: int
        """

        self._labour_cost = labour_cost

    @property
    def name(self):
        """Gets the name of this ProjectsReportTableRow.  # noqa: E501


        :return: The name of this ProjectsReportTableRow.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectsReportTableRow.


        :param name: The name of this ProjectsReportTableRow.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this ProjectsReportTableRow.  # noqa: E501


        :return: The project_id of this ProjectsReportTableRow.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectsReportTableRow.


        :param project_id: The project_id of this ProjectsReportTableRow.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def total_seconds(self):
        """Gets the total_seconds of this ProjectsReportTableRow.  # noqa: E501


        :return: The total_seconds of this ProjectsReportTableRow.  # noqa: E501
        :rtype: int
        """
        return self._total_seconds

    @total_seconds.setter
    def total_seconds(self, total_seconds):
        """Sets the total_seconds of this ProjectsReportTableRow.


        :param total_seconds: The total_seconds of this ProjectsReportTableRow.  # noqa: E501
        :type: int
        """

        self._total_seconds = total_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(ProjectsReportTableRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectsReportTableRow):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectsReportTableRow):
            return True

        return self.to_dict() != other.to_dict()
