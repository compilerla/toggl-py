"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

from __future__ import annotations  # noqa: F401
import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from toggl.models.models_client import ModelsClient  # noqa: F401
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from toggl.models.models_options import ModelsOptions  # noqa: F401
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from toggl.models.models_project import ModelsProject  # noqa: F401
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from toggl.models.models_tag import ModelsTag  # noqa: F401
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from toggl.models.models_task import ModelsTask  # noqa: F401
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from toggl.models.models_time_entry import ModelsTimeEntry  # noqa: F401
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from toggl.models.workspace_workspace import WorkspaceWorkspace  # noqa: F401


class RelatedUserWithRelated:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "api_token": "str",
        "at": "datetime",
        "authorization_updated_at": "str",
        "beginning_of_week": "int",
        "clients": "list[ModelsClient]",
        "country_id": "int",
        "created_at": "datetime",
        "default_workspace_id": "int",
        "email": "str",
        "fullname": "str",
        "has_password": "bool",
        "id": "int",
        "image_url": "str",
        "intercom_hash": "str",
        "oauth_providers": "list[str]",
        "openid_email": "str",
        "openid_enabled": "bool",
        "options": "ModelsOptions",
        "projects": "list[ModelsProject]",
        "tags": "list[ModelsTag]",
        "tasks": "list[ModelsTask]",
        "time_entries": "list[ModelsTimeEntry]",
        "timezone": "str",
        "updated_at": "datetime",
        "workspaces": "list[WorkspaceWorkspace]",
    }

    attribute_map = {
        "api_token": "api_token",
        "at": "at",
        "authorization_updated_at": "authorization_updated_at",
        "beginning_of_week": "beginning_of_week",
        "clients": "clients",
        "country_id": "country_id",
        "created_at": "created_at",
        "default_workspace_id": "default_workspace_id",
        "email": "email",
        "fullname": "fullname",
        "has_password": "has_password",
        "id": "id",
        "image_url": "image_url",
        "intercom_hash": "intercom_hash",
        "oauth_providers": "oauth_providers",
        "openid_email": "openid_email",
        "openid_enabled": "openid_enabled",
        "options": "options",
        "projects": "projects",
        "tags": "tags",
        "tasks": "tasks",
        "time_entries": "time_entries",
        "timezone": "timezone",
        "updated_at": "updated_at",
        "workspaces": "workspaces",
    }

    def __init__(
        self,
        api_token: str = None,
        at: datetime = None,
        authorization_updated_at: str = None,
        beginning_of_week: int = None,
        clients: list[ModelsClient] = None,
        country_id: int = None,
        created_at: datetime = None,
        default_workspace_id: int = None,
        email: str = None,
        fullname: str = None,
        has_password: bool = None,
        id: int = None,
        image_url: str = None,
        intercom_hash: str = None,
        oauth_providers: list[str] = None,
        openid_email: str = None,
        openid_enabled: bool = None,
        options: ModelsOptions = None,
        projects: list[ModelsProject] = None,
        tags: list[ModelsTag] = None,
        tasks: list[ModelsTask] = None,
        time_entries: list[ModelsTimeEntry] = None,
        timezone: str = None,
        updated_at: datetime = None,
        workspaces: list[WorkspaceWorkspace] = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        RelatedUserWithRelated - a model defined in Swagger

        Parameters:
          api_token (str): Optional
          at (datetime): Optional
          authorization_updated_at (str): Optional
          beginning_of_week (int): Optional
          clients (list[ModelsClient]): Optional
          country_id (int): Optional
          created_at (datetime): Optional
          default_workspace_id (int): Optional
          email (str): Optional
          fullname (str): Optional
          has_password (bool): Optional
          id (int): Optional
          image_url (str): Optional
          intercom_hash (str): Optional
          oauth_providers (list[str]): Optional
          openid_email (str): Optional
          openid_enabled (bool): Optional
          options (ModelsOptions): Optional
          projects (list[ModelsProject]): Optional
          tags (list[ModelsTag]): Optional
          tasks (list[ModelsTask]): Optional
          time_entries (list[ModelsTimeEntry]): Optional
          timezone (str): Optional
          updated_at (datetime): Optional
          workspaces (list[WorkspaceWorkspace]): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._api_token = None
        self._at = None
        self._authorization_updated_at = None
        self._beginning_of_week = None
        self._clients = None
        self._country_id = None
        self._created_at = None
        self._default_workspace_id = None
        self._email = None
        self._fullname = None
        self._has_password = None
        self._id = None
        self._image_url = None
        self._intercom_hash = None
        self._oauth_providers = None
        self._openid_email = None
        self._openid_enabled = None
        self._options = None
        self._projects = None
        self._tags = None
        self._tasks = None
        self._time_entries = None
        self._timezone = None
        self._updated_at = None
        self._workspaces = None
        self.discriminator = None

        if api_token is not None:
            self.api_token = api_token
        if at is not None:
            self.at = at
        if authorization_updated_at is not None:
            self.authorization_updated_at = authorization_updated_at
        if beginning_of_week is not None:
            self.beginning_of_week = beginning_of_week
        if clients is not None:
            self.clients = clients
        if country_id is not None:
            self.country_id = country_id
        if created_at is not None:
            self.created_at = created_at
        if default_workspace_id is not None:
            self.default_workspace_id = default_workspace_id
        if email is not None:
            self.email = email
        if fullname is not None:
            self.fullname = fullname
        if has_password is not None:
            self.has_password = has_password
        if id is not None:
            self.id = id
        if image_url is not None:
            self.image_url = image_url
        if intercom_hash is not None:
            self.intercom_hash = intercom_hash
        if oauth_providers is not None:
            self.oauth_providers = oauth_providers
        if openid_email is not None:
            self.openid_email = openid_email
        if openid_enabled is not None:
            self.openid_enabled = openid_enabled
        if options is not None:
            self.options = options
        if projects is not None:
            self.projects = projects
        if tags is not None:
            self.tags = tags
        if tasks is not None:
            self.tasks = tasks
        if time_entries is not None:
            self.time_entries = time_entries
        if timezone is not None:
            self.timezone = timezone
        if updated_at is not None:
            self.updated_at = updated_at
        if workspaces is not None:
            self.workspaces = workspaces

    @property
    def api_token(self) -> str:
        """Gets the api_token of this RelatedUserWithRelated.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The api_token of this RelatedUserWithRelated.  # noqa: E501
        :rtype: str
        """
        return self._api_token

    @api_token.setter
    def api_token(self, api_token: str):
        """Sets the api_token of this RelatedUserWithRelated.

        will be omitted if empty  # noqa: E501

        :param api_token: The api_token of this RelatedUserWithRelated.  # noqa: E501
        :type: str
        """

        self._api_token = api_token

    @property
    def at(self) -> datetime:
        """Gets the at of this RelatedUserWithRelated.  # noqa: E501


        :return: The at of this RelatedUserWithRelated.  # noqa: E501
        :rtype: datetime
        """
        return self._at

    @at.setter
    def at(self, at: datetime):
        """Sets the at of this RelatedUserWithRelated.


        :param at: The at of this RelatedUserWithRelated.  # noqa: E501
        :type: datetime
        """

        self._at = at

    @property
    def authorization_updated_at(self) -> str:
        """Gets the authorization_updated_at of this RelatedUserWithRelated.  # noqa: E501

        AuthorizationUpdatedAt timestamp when the authorization user session object was last updated.  # noqa: E501

        :return: The authorization_updated_at of this RelatedUserWithRelated.  # noqa: E501
        :rtype: str
        """
        return self._authorization_updated_at

    @authorization_updated_at.setter
    def authorization_updated_at(self, authorization_updated_at: str):
        """Sets the authorization_updated_at of this RelatedUserWithRelated.

        AuthorizationUpdatedAt timestamp when the authorization user session object was last updated.  # noqa: E501

        :param authorization_updated_at: The authorization_updated_at of this RelatedUserWithRelated.  # noqa: E501
        :type: str
        """

        self._authorization_updated_at = authorization_updated_at

    @property
    def beginning_of_week(self) -> int:
        """Gets the beginning_of_week of this RelatedUserWithRelated.  # noqa: E501


        :return: The beginning_of_week of this RelatedUserWithRelated.  # noqa: E501
        :rtype: int
        """
        return self._beginning_of_week

    @beginning_of_week.setter
    def beginning_of_week(self, beginning_of_week: int):
        """Sets the beginning_of_week of this RelatedUserWithRelated.


        :param beginning_of_week: The beginning_of_week of this RelatedUserWithRelated.  # noqa: E501
        :type: int
        """

        self._beginning_of_week = beginning_of_week

    @property
    def clients(self) -> list[ModelsClient]:
        """Gets the clients of this RelatedUserWithRelated.  # noqa: E501

        Clients, null if with_related_data was not set to true or if the user does not have any clients  # noqa: E501

        :return: The clients of this RelatedUserWithRelated.  # noqa: E501
        :rtype: list[ModelsClient]
        """
        return self._clients

    @clients.setter
    def clients(self, clients: list[ModelsClient]):
        """Sets the clients of this RelatedUserWithRelated.

        Clients, null if with_related_data was not set to true or if the user does not have any clients  # noqa: E501

        :param clients: The clients of this RelatedUserWithRelated.  # noqa: E501
        :type: list[ModelsClient]
        """

        self._clients = clients

    @property
    def country_id(self) -> int:
        """Gets the country_id of this RelatedUserWithRelated.  # noqa: E501


        :return: The country_id of this RelatedUserWithRelated.  # noqa: E501
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id: int):
        """Sets the country_id of this RelatedUserWithRelated.


        :param country_id: The country_id of this RelatedUserWithRelated.  # noqa: E501
        :type: int
        """

        self._country_id = country_id

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this RelatedUserWithRelated.  # noqa: E501


        :return: The created_at of this RelatedUserWithRelated.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this RelatedUserWithRelated.


        :param created_at: The created_at of this RelatedUserWithRelated.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def default_workspace_id(self) -> int:
        """Gets the default_workspace_id of this RelatedUserWithRelated.  # noqa: E501


        :return: The default_workspace_id of this RelatedUserWithRelated.  # noqa: E501
        :rtype: int
        """
        return self._default_workspace_id

    @default_workspace_id.setter
    def default_workspace_id(self, default_workspace_id: int):
        """Sets the default_workspace_id of this RelatedUserWithRelated.


        :param default_workspace_id: The default_workspace_id of this RelatedUserWithRelated.  # noqa: E501
        :type: int
        """

        self._default_workspace_id = default_workspace_id

    @property
    def email(self) -> str:
        """Gets the email of this RelatedUserWithRelated.  # noqa: E501


        :return: The email of this RelatedUserWithRelated.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this RelatedUserWithRelated.


        :param email: The email of this RelatedUserWithRelated.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def fullname(self) -> str:
        """Gets the fullname of this RelatedUserWithRelated.  # noqa: E501


        :return: The fullname of this RelatedUserWithRelated.  # noqa: E501
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname: str):
        """Sets the fullname of this RelatedUserWithRelated.


        :param fullname: The fullname of this RelatedUserWithRelated.  # noqa: E501
        :type: str
        """

        self._fullname = fullname

    @property
    def has_password(self) -> bool:
        """Gets the has_password of this RelatedUserWithRelated.  # noqa: E501


        :return: The has_password of this RelatedUserWithRelated.  # noqa: E501
        :rtype: bool
        """
        return self._has_password

    @has_password.setter
    def has_password(self, has_password: bool):
        """Sets the has_password of this RelatedUserWithRelated.


        :param has_password: The has_password of this RelatedUserWithRelated.  # noqa: E501
        :type: bool
        """

        self._has_password = has_password

    @property
    def id(self) -> int:
        """Gets the id of this RelatedUserWithRelated.  # noqa: E501


        :return: The id of this RelatedUserWithRelated.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this RelatedUserWithRelated.


        :param id: The id of this RelatedUserWithRelated.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def image_url(self) -> str:
        """Gets the image_url of this RelatedUserWithRelated.  # noqa: E501


        :return: The image_url of this RelatedUserWithRelated.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: str):
        """Sets the image_url of this RelatedUserWithRelated.


        :param image_url: The image_url of this RelatedUserWithRelated.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def intercom_hash(self) -> str:
        """Gets the intercom_hash of this RelatedUserWithRelated.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The intercom_hash of this RelatedUserWithRelated.  # noqa: E501
        :rtype: str
        """
        return self._intercom_hash

    @intercom_hash.setter
    def intercom_hash(self, intercom_hash: str):
        """Sets the intercom_hash of this RelatedUserWithRelated.

        will be omitted if empty  # noqa: E501

        :param intercom_hash: The intercom_hash of this RelatedUserWithRelated.  # noqa: E501
        :type: str
        """

        self._intercom_hash = intercom_hash

    @property
    def oauth_providers(self) -> list[str]:
        """Gets the oauth_providers of this RelatedUserWithRelated.  # noqa: E501


        :return: The oauth_providers of this RelatedUserWithRelated.  # noqa: E501
        :rtype: list[str]
        """
        return self._oauth_providers

    @oauth_providers.setter
    def oauth_providers(self, oauth_providers: list[str]):
        """Sets the oauth_providers of this RelatedUserWithRelated.


        :param oauth_providers: The oauth_providers of this RelatedUserWithRelated.  # noqa: E501
        :type: list[str]
        """

        self._oauth_providers = oauth_providers

    @property
    def openid_email(self) -> str:
        """Gets the openid_email of this RelatedUserWithRelated.  # noqa: E501


        :return: The openid_email of this RelatedUserWithRelated.  # noqa: E501
        :rtype: str
        """
        return self._openid_email

    @openid_email.setter
    def openid_email(self, openid_email: str):
        """Sets the openid_email of this RelatedUserWithRelated.


        :param openid_email: The openid_email of this RelatedUserWithRelated.  # noqa: E501
        :type: str
        """

        self._openid_email = openid_email

    @property
    def openid_enabled(self) -> bool:
        """Gets the openid_enabled of this RelatedUserWithRelated.  # noqa: E501


        :return: The openid_enabled of this RelatedUserWithRelated.  # noqa: E501
        :rtype: bool
        """
        return self._openid_enabled

    @openid_enabled.setter
    def openid_enabled(self, openid_enabled: bool):
        """Sets the openid_enabled of this RelatedUserWithRelated.


        :param openid_enabled: The openid_enabled of this RelatedUserWithRelated.  # noqa: E501
        :type: bool
        """

        self._openid_enabled = openid_enabled

    @property
    def options(self) -> ModelsOptions:
        """Gets the options of this RelatedUserWithRelated.  # noqa: E501

        will be omitted if empty  # noqa: E501

        :return: The options of this RelatedUserWithRelated.  # noqa: E501
        :rtype: ModelsOptions
        """
        return self._options

    @options.setter
    def options(self, options: ModelsOptions):
        """Sets the options of this RelatedUserWithRelated.

        will be omitted if empty  # noqa: E501

        :param options: The options of this RelatedUserWithRelated.  # noqa: E501
        :type: ModelsOptions
        """

        self._options = options

    @property
    def projects(self) -> list[ModelsProject]:
        """Gets the projects of this RelatedUserWithRelated.  # noqa: E501

        Projects, null if with_related_data was not set to true or if the user does not have any projects  # noqa: E501

        :return: The projects of this RelatedUserWithRelated.  # noqa: E501
        :rtype: list[ModelsProject]
        """
        return self._projects

    @projects.setter
    def projects(self, projects: list[ModelsProject]):
        """Sets the projects of this RelatedUserWithRelated.

        Projects, null if with_related_data was not set to true or if the user does not have any projects  # noqa: E501

        :param projects: The projects of this RelatedUserWithRelated.  # noqa: E501
        :type: list[ModelsProject]
        """

        self._projects = projects

    @property
    def tags(self) -> list[ModelsTag]:
        """Gets the tags of this RelatedUserWithRelated.  # noqa: E501

        Tags, null if with_related_data was not set to true, or if the user does not have any tags  # noqa: E501

        :return: The tags of this RelatedUserWithRelated.  # noqa: E501
        :rtype: list[ModelsTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: list[ModelsTag]):
        """Sets the tags of this RelatedUserWithRelated.

        Tags, null if with_related_data was not set to true, or if the user does not have any tags  # noqa: E501

        :param tags: The tags of this RelatedUserWithRelated.  # noqa: E501
        :type: list[ModelsTag]
        """

        self._tags = tags

    @property
    def tasks(self) -> list[ModelsTask]:
        """Gets the tasks of this RelatedUserWithRelated.  # noqa: E501

        Tasks, null if with_related_data was not set to true or if the user does not have any tasks  # noqa: E501

        :return: The tasks of this RelatedUserWithRelated.  # noqa: E501
        :rtype: list[ModelsTask]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks: list[ModelsTask]):
        """Sets the tasks of this RelatedUserWithRelated.

        Tasks, null if with_related_data was not set to true or if the user does not have any tasks  # noqa: E501

        :param tasks: The tasks of this RelatedUserWithRelated.  # noqa: E501
        :type: list[ModelsTask]
        """

        self._tasks = tasks

    @property
    def time_entries(self) -> list[ModelsTimeEntry]:
        """Gets the time_entries of this RelatedUserWithRelated.  # noqa: E501

        TimeEntries, null if with_related_data was not set to true or if the user does not have any time entries  # noqa: E501

        :return: The time_entries of this RelatedUserWithRelated.  # noqa: E501
        :rtype: list[ModelsTimeEntry]
        """
        return self._time_entries

    @time_entries.setter
    def time_entries(self, time_entries: list[ModelsTimeEntry]):
        """Sets the time_entries of this RelatedUserWithRelated.

        TimeEntries, null if with_related_data was not set to true or if the user does not have any time entries  # noqa: E501

        :param time_entries: The time_entries of this RelatedUserWithRelated.  # noqa: E501
        :type: list[ModelsTimeEntry]
        """

        self._time_entries = time_entries

    @property
    def timezone(self) -> str:
        """Gets the timezone of this RelatedUserWithRelated.  # noqa: E501


        :return: The timezone of this RelatedUserWithRelated.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone: str):
        """Sets the timezone of this RelatedUserWithRelated.


        :param timezone: The timezone of this RelatedUserWithRelated.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this RelatedUserWithRelated.  # noqa: E501


        :return: The updated_at of this RelatedUserWithRelated.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this RelatedUserWithRelated.


        :param updated_at: The updated_at of this RelatedUserWithRelated.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def workspaces(self) -> list[WorkspaceWorkspace]:
        """Gets the workspaces of this RelatedUserWithRelated.  # noqa: E501

        Workspaces, null if with_related_data was not set to true or if the user does not have any workspaces  # noqa: E501

        :return: The workspaces of this RelatedUserWithRelated.  # noqa: E501
        :rtype: list[WorkspaceWorkspace]
        """
        return self._workspaces

    @workspaces.setter
    def workspaces(self, workspaces: list[WorkspaceWorkspace]):
        """Sets the workspaces of this RelatedUserWithRelated.

        Workspaces, null if with_related_data was not set to true or if the user does not have any workspaces  # noqa: E501

        :param workspaces: The workspaces of this RelatedUserWithRelated.  # noqa: E501
        :type: list[WorkspaceWorkspace]
        """

        self._workspaces = workspaces

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(RelatedUserWithRelated, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RelatedUserWithRelated):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RelatedUserWithRelated):
            return True

        return self.to_dict() != other.to_dict()
