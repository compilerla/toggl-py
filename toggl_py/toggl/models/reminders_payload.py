"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class RemindersPayload:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {"frequency": "int", "group_ids": "list[int]", "threshold": "float", "user_ids": "list[int]"}

    attribute_map = {"frequency": "frequency", "group_ids": "group_ids", "threshold": "threshold", "user_ids": "user_ids"}

    def __init__(self, frequency=None, group_ids=None, threshold=None, user_ids=None, _configuration=None):  # noqa: E501
        """RemindersPayload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._frequency = None
        self._group_ids = None
        self._threshold = None
        self._user_ids = None
        self.discriminator = None

        if frequency is not None:
            self.frequency = frequency
        if group_ids is not None:
            self.group_ids = group_ids
        if threshold is not None:
            self.threshold = threshold
        if user_ids is not None:
            self.user_ids = user_ids

    @property
    def frequency(self):
        """Gets the frequency of this RemindersPayload.  # noqa: E501

        Frequency of the reminder in days, should be either 1 or 7  # noqa: E501

        :return: The frequency of this RemindersPayload.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this RemindersPayload.

        Frequency of the reminder in days, should be either 1 or 7  # noqa: E501

        :param frequency: The frequency of this RemindersPayload.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def group_ids(self):
        """Gets the group_ids of this RemindersPayload.  # noqa: E501

        Group IDs to send the reminder to, can be omitted if user_ids is provided  # noqa: E501

        :return: The group_ids of this RemindersPayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this RemindersPayload.

        Group IDs to send the reminder to, can be omitted if user_ids is provided  # noqa: E501

        :param group_ids: The group_ids of this RemindersPayload.  # noqa: E501
        :type: list[int]
        """

        self._group_ids = group_ids

    @property
    def threshold(self):
        """Gets the threshold of this RemindersPayload.  # noqa: E501

        Threshold is the number of hours after which the reminder will be sent  # noqa: E501

        :return: The threshold of this RemindersPayload.  # noqa: E501
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this RemindersPayload.

        Threshold is the number of hours after which the reminder will be sent  # noqa: E501

        :param threshold: The threshold of this RemindersPayload.  # noqa: E501
        :type: float
        """

        self._threshold = threshold

    @property
    def user_ids(self):
        """Gets the user_ids of this RemindersPayload.  # noqa: E501

        User IDs to send the reminder to, can be omitted if group_ids is provided  # noqa: E501

        :return: The user_ids of this RemindersPayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this RemindersPayload.

        User IDs to send the reminder to, can be omitted if group_ids is provided  # noqa: E501

        :param user_ids: The user_ids of this RemindersPayload.  # noqa: E501
        :type: list[int]
        """

        self._user_ids = user_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(RemindersPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemindersPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RemindersPayload):
            return True

        return self.to_dict() != other.to_dict()
