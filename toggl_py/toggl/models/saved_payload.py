"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class SavedPayload:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "fixed_daterange": "bool",
        "id": "int",
        "name": "str",
        "params": "object",
        "public": "bool",
        "regenerate_token": "bool",
    }

    attribute_map = {
        "fixed_daterange": "fixed_daterange",
        "id": "id",
        "name": "name",
        "params": "params",
        "public": "public",
        "regenerate_token": "regenerate_token",
    }

    def __init__(
        self, fixed_daterange=None, id=None, name=None, params=None, public=None, regenerate_token=None, _configuration=None
    ):  # noqa: E501
        """SavedPayload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fixed_daterange = None
        self._id = None
        self._name = None
        self._params = None
        self._public = None
        self._regenerate_token = None
        self.discriminator = None

        if fixed_daterange is not None:
            self.fixed_daterange = fixed_daterange
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if params is not None:
            self.params = params
        if public is not None:
            self.public = public
        if regenerate_token is not None:
            self.regenerate_token = regenerate_token

    @property
    def fixed_daterange(self):
        """Gets the fixed_daterange of this SavedPayload.  # noqa: E501


        :return: The fixed_daterange of this SavedPayload.  # noqa: E501
        :rtype: bool
        """
        return self._fixed_daterange

    @fixed_daterange.setter
    def fixed_daterange(self, fixed_daterange):
        """Sets the fixed_daterange of this SavedPayload.


        :param fixed_daterange: The fixed_daterange of this SavedPayload.  # noqa: E501
        :type: bool
        """

        self._fixed_daterange = fixed_daterange

    @property
    def id(self):
        """Gets the id of this SavedPayload.  # noqa: E501


        :return: The id of this SavedPayload.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SavedPayload.


        :param id: The id of this SavedPayload.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SavedPayload.  # noqa: E501


        :return: The name of this SavedPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SavedPayload.


        :param name: The name of this SavedPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def params(self):
        """Gets the params of this SavedPayload.  # noqa: E501


        :return: The params of this SavedPayload.  # noqa: E501
        :rtype: object
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this SavedPayload.


        :param params: The params of this SavedPayload.  # noqa: E501
        :type: object
        """

        self._params = params

    @property
    def public(self):
        """Gets the public of this SavedPayload.  # noqa: E501


        :return: The public of this SavedPayload.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this SavedPayload.


        :param public: The public of this SavedPayload.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def regenerate_token(self):
        """Gets the regenerate_token of this SavedPayload.  # noqa: E501


        :return: The regenerate_token of this SavedPayload.  # noqa: E501
        :rtype: bool
        """
        return self._regenerate_token

    @regenerate_token.setter
    def regenerate_token(self, regenerate_token):
        """Sets the regenerate_token of this SavedPayload.


        :param regenerate_token: The regenerate_token of this SavedPayload.  # noqa: E501
        :type: bool
        """

        self._regenerate_token = regenerate_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(SavedPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavedPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SavedPayload):
            return True

        return self.to_dict() != other.to_dict()
