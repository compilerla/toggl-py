"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration
from toggl.models.dictionary_report_dictionaries import DictionaryReportDictionaries  # noqa: F401
from toggl.models.saved_detailed_report_data import SavedDetailedReportData  # noqa: F401
from toggl.models.saved_summary_report_data import SavedSummaryReportData  # noqa: F401
from toggl.models.saved_weekly_report_data import SavedWeeklyReportData  # noqa: F401


class SavedReportOutput:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "detailed_results": "SavedDetailedReportData",
        "dictionaries": "DictionaryReportDictionaries",
        "features": "dict(str, bool)",
        "fixed_daterange": "bool",
        "hide_amounts": "bool",
        "input_params": "object",
        "public": "bool",
        "report_name": "str",
        "report_type": "str",
        "saved_params": "object",
        "summary_results": "SavedSummaryReportData",
        "weekly_results": "SavedWeeklyReportData",
        "workspace_logo": "str",
    }

    attribute_map = {
        "detailed_results": "detailed_results",
        "dictionaries": "dictionaries",
        "features": "features",
        "fixed_daterange": "fixed_daterange",
        "hide_amounts": "hide_amounts",
        "input_params": "input_params",
        "public": "public",
        "report_name": "report_name",
        "report_type": "report_type",
        "saved_params": "saved_params",
        "summary_results": "summary_results",
        "weekly_results": "weekly_results",
        "workspace_logo": "workspace_logo",
    }

    def __init__(
        self,
        detailed_results: SavedDetailedReportData = None,
        dictionaries: DictionaryReportDictionaries = None,
        features: dict[str, bool] = None,
        fixed_daterange: bool = None,
        hide_amounts: bool = None,
        input_params: object = None,
        public: bool = None,
        report_name: str = None,
        report_type: str = None,
        saved_params: object = None,
        summary_results: SavedSummaryReportData = None,
        weekly_results: SavedWeeklyReportData = None,
        workspace_logo: str = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        SavedReportOutput - a model defined in Swagger

        Parameters:
          detailed_results (SavedDetailedReportData): Optional
          dictionaries (DictionaryReportDictionaries): Optional
          features (dict[str, bool]): Optional
          fixed_daterange (bool): Optional
          hide_amounts (bool): Optional
          input_params (object): Optional
          public (bool): Optional
          report_name (str): Optional
          report_type (str): Optional
          saved_params (object): Optional
          summary_results (SavedSummaryReportData): Optional
          weekly_results (SavedWeeklyReportData): Optional
          workspace_logo (str): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._detailed_results = None
        self._dictionaries = None
        self._features = None
        self._fixed_daterange = None
        self._hide_amounts = None
        self._input_params = None
        self._public = None
        self._report_name = None
        self._report_type = None
        self._saved_params = None
        self._summary_results = None
        self._weekly_results = None
        self._workspace_logo = None
        self.discriminator = None

        if detailed_results is not None:
            self.detailed_results = detailed_results
        if dictionaries is not None:
            self.dictionaries = dictionaries
        if features is not None:
            self.features = features
        if fixed_daterange is not None:
            self.fixed_daterange = fixed_daterange
        if hide_amounts is not None:
            self.hide_amounts = hide_amounts
        if input_params is not None:
            self.input_params = input_params
        if public is not None:
            self.public = public
        if report_name is not None:
            self.report_name = report_name
        if report_type is not None:
            self.report_type = report_type
        if saved_params is not None:
            self.saved_params = saved_params
        if summary_results is not None:
            self.summary_results = summary_results
        if weekly_results is not None:
            self.weekly_results = weekly_results
        if workspace_logo is not None:
            self.workspace_logo = workspace_logo

    @property
    def detailed_results(self) -> SavedDetailedReportData:
        """Gets the detailed_results of this SavedReportOutput.  # noqa: E501


        :return: The detailed_results of this SavedReportOutput.  # noqa: E501
        :rtype: SavedDetailedReportData
        """
        return self._detailed_results

    @detailed_results.setter
    def detailed_results(self, detailed_results: SavedDetailedReportData):
        """Sets the detailed_results of this SavedReportOutput.


        :param detailed_results: The detailed_results of this SavedReportOutput.  # noqa: E501
        :type: SavedDetailedReportData
        """

        self._detailed_results = detailed_results

    @property
    def dictionaries(self) -> DictionaryReportDictionaries:
        """Gets the dictionaries of this SavedReportOutput.  # noqa: E501


        :return: The dictionaries of this SavedReportOutput.  # noqa: E501
        :rtype: DictionaryReportDictionaries
        """
        return self._dictionaries

    @dictionaries.setter
    def dictionaries(self, dictionaries: DictionaryReportDictionaries):
        """Sets the dictionaries of this SavedReportOutput.


        :param dictionaries: The dictionaries of this SavedReportOutput.  # noqa: E501
        :type: DictionaryReportDictionaries
        """

        self._dictionaries = dictionaries

    @property
    def features(self) -> dict[str, bool]:
        """Gets the features of this SavedReportOutput.  # noqa: E501


        :return: The features of this SavedReportOutput.  # noqa: E501
        :rtype: dict[str, bool]
        """
        return self._features

    @features.setter
    def features(self, features: dict[str, bool]):
        """Sets the features of this SavedReportOutput.


        :param features: The features of this SavedReportOutput.  # noqa: E501
        :type: dict[str, bool]
        """

        self._features = features

    @property
    def fixed_daterange(self) -> bool:
        """Gets the fixed_daterange of this SavedReportOutput.  # noqa: E501


        :return: The fixed_daterange of this SavedReportOutput.  # noqa: E501
        :rtype: bool
        """
        return self._fixed_daterange

    @fixed_daterange.setter
    def fixed_daterange(self, fixed_daterange: bool):
        """Sets the fixed_daterange of this SavedReportOutput.


        :param fixed_daterange: The fixed_daterange of this SavedReportOutput.  # noqa: E501
        :type: bool
        """

        self._fixed_daterange = fixed_daterange

    @property
    def hide_amounts(self) -> bool:
        """Gets the hide_amounts of this SavedReportOutput.  # noqa: E501


        :return: The hide_amounts of this SavedReportOutput.  # noqa: E501
        :rtype: bool
        """
        return self._hide_amounts

    @hide_amounts.setter
    def hide_amounts(self, hide_amounts: bool):
        """Sets the hide_amounts of this SavedReportOutput.


        :param hide_amounts: The hide_amounts of this SavedReportOutput.  # noqa: E501
        :type: bool
        """

        self._hide_amounts = hide_amounts

    @property
    def input_params(self) -> object:
        """Gets the input_params of this SavedReportOutput.  # noqa: E501


        :return: The input_params of this SavedReportOutput.  # noqa: E501
        :rtype: object
        """
        return self._input_params

    @input_params.setter
    def input_params(self, input_params: object):
        """Sets the input_params of this SavedReportOutput.


        :param input_params: The input_params of this SavedReportOutput.  # noqa: E501
        :type: object
        """

        self._input_params = input_params

    @property
    def public(self) -> bool:
        """Gets the public of this SavedReportOutput.  # noqa: E501


        :return: The public of this SavedReportOutput.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public: bool):
        """Sets the public of this SavedReportOutput.


        :param public: The public of this SavedReportOutput.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def report_name(self) -> str:
        """Gets the report_name of this SavedReportOutput.  # noqa: E501


        :return: The report_name of this SavedReportOutput.  # noqa: E501
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name: str):
        """Sets the report_name of this SavedReportOutput.


        :param report_name: The report_name of this SavedReportOutput.  # noqa: E501
        :type: str
        """

        self._report_name = report_name

    @property
    def report_type(self) -> str:
        """Gets the report_type of this SavedReportOutput.  # noqa: E501


        :return: The report_type of this SavedReportOutput.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type: str):
        """Sets the report_type of this SavedReportOutput.


        :param report_type: The report_type of this SavedReportOutput.  # noqa: E501
        :type: str
        """

        self._report_type = report_type

    @property
    def saved_params(self) -> object:
        """Gets the saved_params of this SavedReportOutput.  # noqa: E501


        :return: The saved_params of this SavedReportOutput.  # noqa: E501
        :rtype: object
        """
        return self._saved_params

    @saved_params.setter
    def saved_params(self, saved_params: object):
        """Sets the saved_params of this SavedReportOutput.


        :param saved_params: The saved_params of this SavedReportOutput.  # noqa: E501
        :type: object
        """

        self._saved_params = saved_params

    @property
    def summary_results(self) -> SavedSummaryReportData:
        """Gets the summary_results of this SavedReportOutput.  # noqa: E501


        :return: The summary_results of this SavedReportOutput.  # noqa: E501
        :rtype: SavedSummaryReportData
        """
        return self._summary_results

    @summary_results.setter
    def summary_results(self, summary_results: SavedSummaryReportData):
        """Sets the summary_results of this SavedReportOutput.


        :param summary_results: The summary_results of this SavedReportOutput.  # noqa: E501
        :type: SavedSummaryReportData
        """

        self._summary_results = summary_results

    @property
    def weekly_results(self) -> SavedWeeklyReportData:
        """Gets the weekly_results of this SavedReportOutput.  # noqa: E501


        :return: The weekly_results of this SavedReportOutput.  # noqa: E501
        :rtype: SavedWeeklyReportData
        """
        return self._weekly_results

    @weekly_results.setter
    def weekly_results(self, weekly_results: SavedWeeklyReportData):
        """Sets the weekly_results of this SavedReportOutput.


        :param weekly_results: The weekly_results of this SavedReportOutput.  # noqa: E501
        :type: SavedWeeklyReportData
        """

        self._weekly_results = weekly_results

    @property
    def workspace_logo(self) -> str:
        """Gets the workspace_logo of this SavedReportOutput.  # noqa: E501


        :return: The workspace_logo of this SavedReportOutput.  # noqa: E501
        :rtype: str
        """
        return self._workspace_logo

    @workspace_logo.setter
    def workspace_logo(self, workspace_logo: str):
        """Sets the workspace_logo of this SavedReportOutput.


        :param workspace_logo: The workspace_logo of this SavedReportOutput.  # noqa: E501
        :type: str
        """

        self._workspace_logo = workspace_logo

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(SavedReportOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavedReportOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SavedReportOutput):
            return True

        return self.to_dict() != other.to_dict()
