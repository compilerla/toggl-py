"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class StatusProjectStatus:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "billable_amount": "int",
        "billable_seconds": "int",
        "currency": "str",
        "estimated_seconds": "int",
        "id": "int",
        "tracked_seconds": "int",
    }

    attribute_map = {
        "billable_amount": "billable_amount",
        "billable_seconds": "billable_seconds",
        "currency": "currency",
        "estimated_seconds": "estimated_seconds",
        "id": "id",
        "tracked_seconds": "tracked_seconds",
    }

    def __init__(
        self,
        billable_amount=None,
        billable_seconds=None,
        currency=None,
        estimated_seconds=None,
        id=None,
        tracked_seconds=None,
        _configuration=None,
    ):  # noqa: E501
        """StatusProjectStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._billable_amount = None
        self._billable_seconds = None
        self._currency = None
        self._estimated_seconds = None
        self._id = None
        self._tracked_seconds = None
        self.discriminator = None

        if billable_amount is not None:
            self.billable_amount = billable_amount
        if billable_seconds is not None:
            self.billable_seconds = billable_seconds
        if currency is not None:
            self.currency = currency
        if estimated_seconds is not None:
            self.estimated_seconds = estimated_seconds
        if id is not None:
            self.id = id
        if tracked_seconds is not None:
            self.tracked_seconds = tracked_seconds

    @property
    def billable_amount(self):
        """Gets the billable_amount of this StatusProjectStatus.  # noqa: E501


        :return: The billable_amount of this StatusProjectStatus.  # noqa: E501
        :rtype: int
        """
        return self._billable_amount

    @billable_amount.setter
    def billable_amount(self, billable_amount):
        """Sets the billable_amount of this StatusProjectStatus.


        :param billable_amount: The billable_amount of this StatusProjectStatus.  # noqa: E501
        :type: int
        """

        self._billable_amount = billable_amount

    @property
    def billable_seconds(self):
        """Gets the billable_seconds of this StatusProjectStatus.  # noqa: E501


        :return: The billable_seconds of this StatusProjectStatus.  # noqa: E501
        :rtype: int
        """
        return self._billable_seconds

    @billable_seconds.setter
    def billable_seconds(self, billable_seconds):
        """Sets the billable_seconds of this StatusProjectStatus.


        :param billable_seconds: The billable_seconds of this StatusProjectStatus.  # noqa: E501
        :type: int
        """

        self._billable_seconds = billable_seconds

    @property
    def currency(self):
        """Gets the currency of this StatusProjectStatus.  # noqa: E501


        :return: The currency of this StatusProjectStatus.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this StatusProjectStatus.


        :param currency: The currency of this StatusProjectStatus.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def estimated_seconds(self):
        """Gets the estimated_seconds of this StatusProjectStatus.  # noqa: E501


        :return: The estimated_seconds of this StatusProjectStatus.  # noqa: E501
        :rtype: int
        """
        return self._estimated_seconds

    @estimated_seconds.setter
    def estimated_seconds(self, estimated_seconds):
        """Sets the estimated_seconds of this StatusProjectStatus.


        :param estimated_seconds: The estimated_seconds of this StatusProjectStatus.  # noqa: E501
        :type: int
        """

        self._estimated_seconds = estimated_seconds

    @property
    def id(self):
        """Gets the id of this StatusProjectStatus.  # noqa: E501


        :return: The id of this StatusProjectStatus.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StatusProjectStatus.


        :param id: The id of this StatusProjectStatus.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def tracked_seconds(self):
        """Gets the tracked_seconds of this StatusProjectStatus.  # noqa: E501


        :return: The tracked_seconds of this StatusProjectStatus.  # noqa: E501
        :rtype: int
        """
        return self._tracked_seconds

    @tracked_seconds.setter
    def tracked_seconds(self, tracked_seconds):
        """Sets the tracked_seconds of this StatusProjectStatus.


        :param tracked_seconds: The tracked_seconds of this StatusProjectStatus.  # noqa: E501
        :type: int
        """

        self._tracked_seconds = tracked_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(StatusProjectStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusProjectStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StatusProjectStatus):
            return True

        return self.to_dict() != other.to_dict()
