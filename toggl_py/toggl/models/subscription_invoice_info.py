"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class SubscriptionInvoiceInfo:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "amount": "int",
        "created_at": "str",
        "currency_id": "int",
        "due": "str",
        "id": "int",
        "paid_at": "str",
        "tax_percentage": "float",
        "total_amount": "int",
    }

    attribute_map = {
        "amount": "amount",
        "created_at": "created_at",
        "currency_id": "currency_id",
        "due": "due",
        "id": "id",
        "paid_at": "paid_at",
        "tax_percentage": "tax_percentage",
        "total_amount": "total_amount",
    }

    def __init__(
        self,
        amount=None,
        created_at=None,
        currency_id=None,
        due=None,
        id=None,
        paid_at=None,
        tax_percentage=None,
        total_amount=None,
        _configuration=None,
    ):  # noqa: E501
        """SubscriptionInvoiceInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._amount = None
        self._created_at = None
        self._currency_id = None
        self._due = None
        self._id = None
        self._paid_at = None
        self._tax_percentage = None
        self._total_amount = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if created_at is not None:
            self.created_at = created_at
        if currency_id is not None:
            self.currency_id = currency_id
        if due is not None:
            self.due = due
        if id is not None:
            self.id = id
        if paid_at is not None:
            self.paid_at = paid_at
        if tax_percentage is not None:
            self.tax_percentage = tax_percentage
        if total_amount is not None:
            self.total_amount = total_amount

    @property
    def amount(self):
        """Gets the amount of this SubscriptionInvoiceInfo.  # noqa: E501


        :return: The amount of this SubscriptionInvoiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SubscriptionInvoiceInfo.


        :param amount: The amount of this SubscriptionInvoiceInfo.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def created_at(self):
        """Gets the created_at of this SubscriptionInvoiceInfo.  # noqa: E501


        :return: The created_at of this SubscriptionInvoiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SubscriptionInvoiceInfo.


        :param created_at: The created_at of this SubscriptionInvoiceInfo.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def currency_id(self):
        """Gets the currency_id of this SubscriptionInvoiceInfo.  # noqa: E501


        :return: The currency_id of this SubscriptionInvoiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this SubscriptionInvoiceInfo.


        :param currency_id: The currency_id of this SubscriptionInvoiceInfo.  # noqa: E501
        :type: int
        """

        self._currency_id = currency_id

    @property
    def due(self):
        """Gets the due of this SubscriptionInvoiceInfo.  # noqa: E501


        :return: The due of this SubscriptionInvoiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._due

    @due.setter
    def due(self, due):
        """Sets the due of this SubscriptionInvoiceInfo.


        :param due: The due of this SubscriptionInvoiceInfo.  # noqa: E501
        :type: str
        """

        self._due = due

    @property
    def id(self):
        """Gets the id of this SubscriptionInvoiceInfo.  # noqa: E501


        :return: The id of this SubscriptionInvoiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionInvoiceInfo.


        :param id: The id of this SubscriptionInvoiceInfo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def paid_at(self):
        """Gets the paid_at of this SubscriptionInvoiceInfo.  # noqa: E501


        :return: The paid_at of this SubscriptionInvoiceInfo.  # noqa: E501
        :rtype: str
        """
        return self._paid_at

    @paid_at.setter
    def paid_at(self, paid_at):
        """Sets the paid_at of this SubscriptionInvoiceInfo.


        :param paid_at: The paid_at of this SubscriptionInvoiceInfo.  # noqa: E501
        :type: str
        """

        self._paid_at = paid_at

    @property
    def tax_percentage(self):
        """Gets the tax_percentage of this SubscriptionInvoiceInfo.  # noqa: E501


        :return: The tax_percentage of this SubscriptionInvoiceInfo.  # noqa: E501
        :rtype: float
        """
        return self._tax_percentage

    @tax_percentage.setter
    def tax_percentage(self, tax_percentage):
        """Sets the tax_percentage of this SubscriptionInvoiceInfo.


        :param tax_percentage: The tax_percentage of this SubscriptionInvoiceInfo.  # noqa: E501
        :type: float
        """

        self._tax_percentage = tax_percentage

    @property
    def total_amount(self):
        """Gets the total_amount of this SubscriptionInvoiceInfo.  # noqa: E501


        :return: The total_amount of this SubscriptionInvoiceInfo.  # noqa: E501
        :rtype: int
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this SubscriptionInvoiceInfo.


        :param total_amount: The total_amount of this SubscriptionInvoiceInfo.  # noqa: E501
        :type: int
        """

        self._total_amount = total_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(SubscriptionInvoiceInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionInvoiceInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionInvoiceInfo):
            return True

        return self.to_dict() != other.to_dict()
