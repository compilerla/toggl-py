"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration
from toggl.models.models_card_details import ModelsCardDetails  # noqa: F401
from toggl.models.models_contact_detail import ModelsContactDetail  # noqa: F401
from toggl.models.models_payment_info import ModelsPaymentInfo  # noqa: F401
from toggl.models.models_period import ModelsPeriod  # noqa: F401
from toggl.models.subscription_invoice_info import SubscriptionInvoiceInfo  # noqa: F401


class SubscriptionOutData:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "auto_renew": "bool",
        "billing_period_in_months": "int",
        "campaign_available": "bool",
        "cancel_date": "str",
        "card_details": "ModelsCardDetails",
        "company_id": "int",
        "contact_details": "ModelsContactDetail",
        "currency": "str",
        "current_period_ends_at": "str",
        "current_period_starts_at": "str",
        "customer_id": "int",
        "end_date": "str",
        "enterprise": "bool",
        "is_subscription_beta": "bool",
        "is_unified": "bool",
        "last_invoice": "SubscriptionInvoiceInfo",
        "last_payment": "ModelsPaymentInfo",
        "last_pricing_plan_id": "int",
        "new_signup_trial": "bool",
        "next_payment_date": "str",
        "payment_method": "str",
        "plan_name": "str",
        "pricing_plan_id": "int",
        "renewal_at": "str",
        "renewal_date": "str",
        "seat_cost_in_cents": "int",
        "seats": "int",
        "site": "str",
        "start_date": "str",
        "state": "str",
        "subscription_created_at": "str",
        "subscription_period": "ModelsPeriod",
        "trial_available": "bool",
        "trial_end_date": "str",
        "trial_start_date": "str",
    }

    attribute_map = {
        "auto_renew": "auto_renew",
        "billing_period_in_months": "billing_period_in_months",
        "campaign_available": "campaign_available",
        "cancel_date": "cancel_date",
        "card_details": "card_details",
        "company_id": "company_id",
        "contact_details": "contact_details",
        "currency": "currency",
        "current_period_ends_at": "current_period_ends_at",
        "current_period_starts_at": "current_period_starts_at",
        "customer_id": "customer_id",
        "end_date": "end_date",
        "enterprise": "enterprise",
        "is_subscription_beta": "is_subscription_beta",
        "is_unified": "is_unified",
        "last_invoice": "last_invoice",
        "last_payment": "last_payment",
        "last_pricing_plan_id": "last_pricing_plan_id",
        "new_signup_trial": "new_signup_trial",
        "next_payment_date": "next_payment_date",
        "payment_method": "payment_method",
        "plan_name": "plan_name",
        "pricing_plan_id": "pricing_plan_id",
        "renewal_at": "renewal_at",
        "renewal_date": "renewal_date",
        "seat_cost_in_cents": "seat_cost_in_cents",
        "seats": "seats",
        "site": "site",
        "start_date": "start_date",
        "state": "state",
        "subscription_created_at": "subscription_created_at",
        "subscription_period": "subscription_period",
        "trial_available": "trial_available",
        "trial_end_date": "trial_end_date",
        "trial_start_date": "trial_start_date",
    }

    def __init__(
        self,
        auto_renew: bool = None,
        billing_period_in_months: int = None,
        campaign_available: bool = None,
        cancel_date: str = None,
        card_details: ModelsCardDetails = None,
        company_id: int = None,
        contact_details: ModelsContactDetail = None,
        currency: str = None,
        current_period_ends_at: str = None,
        current_period_starts_at: str = None,
        customer_id: int = None,
        end_date: str = None,
        enterprise: bool = None,
        is_subscription_beta: bool = None,
        is_unified: bool = None,
        last_invoice: SubscriptionInvoiceInfo = None,
        last_payment: ModelsPaymentInfo = None,
        last_pricing_plan_id: int = None,
        new_signup_trial: bool = None,
        next_payment_date: str = None,
        payment_method: str = None,
        plan_name: str = None,
        pricing_plan_id: int = None,
        renewal_at: str = None,
        renewal_date: str = None,
        seat_cost_in_cents: int = None,
        seats: int = None,
        site: str = None,
        start_date: str = None,
        state: str = None,
        subscription_created_at: str = None,
        subscription_period: ModelsPeriod = None,
        trial_available: bool = None,
        trial_end_date: str = None,
        trial_start_date: str = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        SubscriptionOutData - a model defined in Swagger

        Parameters:
          auto_renew (bool): Optional
          billing_period_in_months (int): Optional
          campaign_available (bool): Optional
          cancel_date (str): Optional
          card_details (ModelsCardDetails): Optional
          company_id (int): Optional
          contact_details (ModelsContactDetail): Optional
          currency (str): Optional
          current_period_ends_at (str): Optional
          current_period_starts_at (str): Optional
          customer_id (int): Optional
          end_date (str): Optional
          enterprise (bool): Optional
          is_subscription_beta (bool): Optional
          is_unified (bool): Optional
          last_invoice (SubscriptionInvoiceInfo): Optional
          last_payment (ModelsPaymentInfo): Optional
          last_pricing_plan_id (int): Optional
          new_signup_trial (bool): Optional
          next_payment_date (str): Optional
          payment_method (str): Optional
          plan_name (str): Optional
          pricing_plan_id (int): Optional
          renewal_at (str): Optional
          renewal_date (str): Optional
          seat_cost_in_cents (int): Optional
          seats (int): Optional
          site (str): Optional
          start_date (str): Optional
          state (str): Optional
          subscription_created_at (str): Optional
          subscription_period (ModelsPeriod): Optional
          trial_available (bool): Optional
          trial_end_date (str): Optional
          trial_start_date (str): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auto_renew = None
        self._billing_period_in_months = None
        self._campaign_available = None
        self._cancel_date = None
        self._card_details = None
        self._company_id = None
        self._contact_details = None
        self._currency = None
        self._current_period_ends_at = None
        self._current_period_starts_at = None
        self._customer_id = None
        self._end_date = None
        self._enterprise = None
        self._is_subscription_beta = None
        self._is_unified = None
        self._last_invoice = None
        self._last_payment = None
        self._last_pricing_plan_id = None
        self._new_signup_trial = None
        self._next_payment_date = None
        self._payment_method = None
        self._plan_name = None
        self._pricing_plan_id = None
        self._renewal_at = None
        self._renewal_date = None
        self._seat_cost_in_cents = None
        self._seats = None
        self._site = None
        self._start_date = None
        self._state = None
        self._subscription_created_at = None
        self._subscription_period = None
        self._trial_available = None
        self._trial_end_date = None
        self._trial_start_date = None
        self.discriminator = None

        if auto_renew is not None:
            self.auto_renew = auto_renew
        if billing_period_in_months is not None:
            self.billing_period_in_months = billing_period_in_months
        if campaign_available is not None:
            self.campaign_available = campaign_available
        if cancel_date is not None:
            self.cancel_date = cancel_date
        if card_details is not None:
            self.card_details = card_details
        if company_id is not None:
            self.company_id = company_id
        if contact_details is not None:
            self.contact_details = contact_details
        if currency is not None:
            self.currency = currency
        if current_period_ends_at is not None:
            self.current_period_ends_at = current_period_ends_at
        if current_period_starts_at is not None:
            self.current_period_starts_at = current_period_starts_at
        if customer_id is not None:
            self.customer_id = customer_id
        if end_date is not None:
            self.end_date = end_date
        if enterprise is not None:
            self.enterprise = enterprise
        if is_subscription_beta is not None:
            self.is_subscription_beta = is_subscription_beta
        if is_unified is not None:
            self.is_unified = is_unified
        if last_invoice is not None:
            self.last_invoice = last_invoice
        if last_payment is not None:
            self.last_payment = last_payment
        if last_pricing_plan_id is not None:
            self.last_pricing_plan_id = last_pricing_plan_id
        if new_signup_trial is not None:
            self.new_signup_trial = new_signup_trial
        if next_payment_date is not None:
            self.next_payment_date = next_payment_date
        if payment_method is not None:
            self.payment_method = payment_method
        if plan_name is not None:
            self.plan_name = plan_name
        if pricing_plan_id is not None:
            self.pricing_plan_id = pricing_plan_id
        if renewal_at is not None:
            self.renewal_at = renewal_at
        if renewal_date is not None:
            self.renewal_date = renewal_date
        if seat_cost_in_cents is not None:
            self.seat_cost_in_cents = seat_cost_in_cents
        if seats is not None:
            self.seats = seats
        if site is not None:
            self.site = site
        if start_date is not None:
            self.start_date = start_date
        if state is not None:
            self.state = state
        if subscription_created_at is not None:
            self.subscription_created_at = subscription_created_at
        if subscription_period is not None:
            self.subscription_period = subscription_period
        if trial_available is not None:
            self.trial_available = trial_available
        if trial_end_date is not None:
            self.trial_end_date = trial_end_date
        if trial_start_date is not None:
            self.trial_start_date = trial_start_date

    @property
    def auto_renew(self) -> bool:
        """Gets the auto_renew of this SubscriptionOutData.  # noqa: E501


        :return: The auto_renew of this SubscriptionOutData.  # noqa: E501
        :rtype: bool
        """
        return self._auto_renew

    @auto_renew.setter
    def auto_renew(self, auto_renew: bool):
        """Sets the auto_renew of this SubscriptionOutData.


        :param auto_renew: The auto_renew of this SubscriptionOutData.  # noqa: E501
        :type: bool
        """

        self._auto_renew = auto_renew

    @property
    def billing_period_in_months(self) -> int:
        """Gets the billing_period_in_months of this SubscriptionOutData.  # noqa: E501


        :return: The billing_period_in_months of this SubscriptionOutData.  # noqa: E501
        :rtype: int
        """
        return self._billing_period_in_months

    @billing_period_in_months.setter
    def billing_period_in_months(self, billing_period_in_months: int):
        """Sets the billing_period_in_months of this SubscriptionOutData.


        :param billing_period_in_months: The billing_period_in_months of this SubscriptionOutData.  # noqa: E501
        :type: int
        """

        self._billing_period_in_months = billing_period_in_months

    @property
    def campaign_available(self) -> bool:
        """Gets the campaign_available of this SubscriptionOutData.  # noqa: E501


        :return: The campaign_available of this SubscriptionOutData.  # noqa: E501
        :rtype: bool
        """
        return self._campaign_available

    @campaign_available.setter
    def campaign_available(self, campaign_available: bool):
        """Sets the campaign_available of this SubscriptionOutData.


        :param campaign_available: The campaign_available of this SubscriptionOutData.  # noqa: E501
        :type: bool
        """

        self._campaign_available = campaign_available

    @property
    def cancel_date(self) -> str:
        """Gets the cancel_date of this SubscriptionOutData.  # noqa: E501


        :return: The cancel_date of this SubscriptionOutData.  # noqa: E501
        :rtype: str
        """
        return self._cancel_date

    @cancel_date.setter
    def cancel_date(self, cancel_date: str):
        """Sets the cancel_date of this SubscriptionOutData.


        :param cancel_date: The cancel_date of this SubscriptionOutData.  # noqa: E501
        :type: str
        """

        self._cancel_date = cancel_date

    @property
    def card_details(self) -> ModelsCardDetails:
        """Gets the card_details of this SubscriptionOutData.  # noqa: E501


        :return: The card_details of this SubscriptionOutData.  # noqa: E501
        :rtype: ModelsCardDetails
        """
        return self._card_details

    @card_details.setter
    def card_details(self, card_details: ModelsCardDetails):
        """Sets the card_details of this SubscriptionOutData.


        :param card_details: The card_details of this SubscriptionOutData.  # noqa: E501
        :type: ModelsCardDetails
        """

        self._card_details = card_details

    @property
    def company_id(self) -> int:
        """Gets the company_id of this SubscriptionOutData.  # noqa: E501


        :return: The company_id of this SubscriptionOutData.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id: int):
        """Sets the company_id of this SubscriptionOutData.


        :param company_id: The company_id of this SubscriptionOutData.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def contact_details(self) -> ModelsContactDetail:
        """Gets the contact_details of this SubscriptionOutData.  # noqa: E501


        :return: The contact_details of this SubscriptionOutData.  # noqa: E501
        :rtype: ModelsContactDetail
        """
        return self._contact_details

    @contact_details.setter
    def contact_details(self, contact_details: ModelsContactDetail):
        """Sets the contact_details of this SubscriptionOutData.


        :param contact_details: The contact_details of this SubscriptionOutData.  # noqa: E501
        :type: ModelsContactDetail
        """

        self._contact_details = contact_details

    @property
    def currency(self) -> str:
        """Gets the currency of this SubscriptionOutData.  # noqa: E501


        :return: The currency of this SubscriptionOutData.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this SubscriptionOutData.


        :param currency: The currency of this SubscriptionOutData.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def current_period_ends_at(self) -> str:
        """Gets the current_period_ends_at of this SubscriptionOutData.  # noqa: E501


        :return: The current_period_ends_at of this SubscriptionOutData.  # noqa: E501
        :rtype: str
        """
        return self._current_period_ends_at

    @current_period_ends_at.setter
    def current_period_ends_at(self, current_period_ends_at: str):
        """Sets the current_period_ends_at of this SubscriptionOutData.


        :param current_period_ends_at: The current_period_ends_at of this SubscriptionOutData.  # noqa: E501
        :type: str
        """

        self._current_period_ends_at = current_period_ends_at

    @property
    def current_period_starts_at(self) -> str:
        """Gets the current_period_starts_at of this SubscriptionOutData.  # noqa: E501


        :return: The current_period_starts_at of this SubscriptionOutData.  # noqa: E501
        :rtype: str
        """
        return self._current_period_starts_at

    @current_period_starts_at.setter
    def current_period_starts_at(self, current_period_starts_at: str):
        """Sets the current_period_starts_at of this SubscriptionOutData.


        :param current_period_starts_at: The current_period_starts_at of this SubscriptionOutData.  # noqa: E501
        :type: str
        """

        self._current_period_starts_at = current_period_starts_at

    @property
    def customer_id(self) -> int:
        """Gets the customer_id of this SubscriptionOutData.  # noqa: E501


        :return: The customer_id of this SubscriptionOutData.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id: int):
        """Sets the customer_id of this SubscriptionOutData.


        :param customer_id: The customer_id of this SubscriptionOutData.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def end_date(self) -> str:
        """Gets the end_date of this SubscriptionOutData.  # noqa: E501

        Deprecated: this field will be replaced by CurrentPeriodEndsAt  # noqa: E501

        :return: The end_date of this SubscriptionOutData.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: str):
        """Sets the end_date of this SubscriptionOutData.

        Deprecated: this field will be replaced by CurrentPeriodEndsAt  # noqa: E501

        :param end_date: The end_date of this SubscriptionOutData.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def enterprise(self) -> bool:
        """Gets the enterprise of this SubscriptionOutData.  # noqa: E501


        :return: The enterprise of this SubscriptionOutData.  # noqa: E501
        :rtype: bool
        """
        return self._enterprise

    @enterprise.setter
    def enterprise(self, enterprise: bool):
        """Sets the enterprise of this SubscriptionOutData.


        :param enterprise: The enterprise of this SubscriptionOutData.  # noqa: E501
        :type: bool
        """

        self._enterprise = enterprise

    @property
    def is_subscription_beta(self) -> bool:
        """Gets the is_subscription_beta of this SubscriptionOutData.  # noqa: E501

        temporary flag which is true iff there is at least one admin in the organization, who has the `multi_workspace_payments` beta flag enabled  # noqa: E501

        :return: The is_subscription_beta of this SubscriptionOutData.  # noqa: E501
        :rtype: bool
        """
        return self._is_subscription_beta

    @is_subscription_beta.setter
    def is_subscription_beta(self, is_subscription_beta: bool):
        """Sets the is_subscription_beta of this SubscriptionOutData.

        temporary flag which is true iff there is at least one admin in the organization, who has the `multi_workspace_payments` beta flag enabled  # noqa: E501

        :param is_subscription_beta: The is_subscription_beta of this SubscriptionOutData.  # noqa: E501
        :type: bool
        """

        self._is_subscription_beta = is_subscription_beta

    @property
    def is_unified(self) -> bool:
        """Gets the is_unified of this SubscriptionOutData.  # noqa: E501


        :return: The is_unified of this SubscriptionOutData.  # noqa: E501
        :rtype: bool
        """
        return self._is_unified

    @is_unified.setter
    def is_unified(self, is_unified: bool):
        """Sets the is_unified of this SubscriptionOutData.


        :param is_unified: The is_unified of this SubscriptionOutData.  # noqa: E501
        :type: bool
        """

        self._is_unified = is_unified

    @property
    def last_invoice(self) -> SubscriptionInvoiceInfo:
        """Gets the last_invoice of this SubscriptionOutData.  # noqa: E501


        :return: The last_invoice of this SubscriptionOutData.  # noqa: E501
        :rtype: SubscriptionInvoiceInfo
        """
        return self._last_invoice

    @last_invoice.setter
    def last_invoice(self, last_invoice: SubscriptionInvoiceInfo):
        """Sets the last_invoice of this SubscriptionOutData.


        :param last_invoice: The last_invoice of this SubscriptionOutData.  # noqa: E501
        :type: SubscriptionInvoiceInfo
        """

        self._last_invoice = last_invoice

    @property
    def last_payment(self) -> ModelsPaymentInfo:
        """Gets the last_payment of this SubscriptionOutData.  # noqa: E501


        :return: The last_payment of this SubscriptionOutData.  # noqa: E501
        :rtype: ModelsPaymentInfo
        """
        return self._last_payment

    @last_payment.setter
    def last_payment(self, last_payment: ModelsPaymentInfo):
        """Sets the last_payment of this SubscriptionOutData.


        :param last_payment: The last_payment of this SubscriptionOutData.  # noqa: E501
        :type: ModelsPaymentInfo
        """

        self._last_payment = last_payment

    @property
    def last_pricing_plan_id(self) -> int:
        """Gets the last_pricing_plan_id of this SubscriptionOutData.  # noqa: E501


        :return: The last_pricing_plan_id of this SubscriptionOutData.  # noqa: E501
        :rtype: int
        """
        return self._last_pricing_plan_id

    @last_pricing_plan_id.setter
    def last_pricing_plan_id(self, last_pricing_plan_id: int):
        """Sets the last_pricing_plan_id of this SubscriptionOutData.


        :param last_pricing_plan_id: The last_pricing_plan_id of this SubscriptionOutData.  # noqa: E501
        :type: int
        """

        self._last_pricing_plan_id = last_pricing_plan_id

    @property
    def new_signup_trial(self) -> bool:
        """Gets the new_signup_trial of this SubscriptionOutData.  # noqa: E501


        :return: The new_signup_trial of this SubscriptionOutData.  # noqa: E501
        :rtype: bool
        """
        return self._new_signup_trial

    @new_signup_trial.setter
    def new_signup_trial(self, new_signup_trial: bool):
        """Sets the new_signup_trial of this SubscriptionOutData.


        :param new_signup_trial: The new_signup_trial of this SubscriptionOutData.  # noqa: E501
        :type: bool
        """

        self._new_signup_trial = new_signup_trial

    @property
    def next_payment_date(self) -> str:
        """Gets the next_payment_date of this SubscriptionOutData.  # noqa: E501


        :return: The next_payment_date of this SubscriptionOutData.  # noqa: E501
        :rtype: str
        """
        return self._next_payment_date

    @next_payment_date.setter
    def next_payment_date(self, next_payment_date: str):
        """Sets the next_payment_date of this SubscriptionOutData.


        :param next_payment_date: The next_payment_date of this SubscriptionOutData.  # noqa: E501
        :type: str
        """

        self._next_payment_date = next_payment_date

    @property
    def payment_method(self) -> str:
        """Gets the payment_method of this SubscriptionOutData.  # noqa: E501


        :return: The payment_method of this SubscriptionOutData.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method: str):
        """Sets the payment_method of this SubscriptionOutData.


        :param payment_method: The payment_method of this SubscriptionOutData.  # noqa: E501
        :type: str
        """

        self._payment_method = payment_method

    @property
    def plan_name(self) -> str:
        """Gets the plan_name of this SubscriptionOutData.  # noqa: E501


        :return: The plan_name of this SubscriptionOutData.  # noqa: E501
        :rtype: str
        """
        return self._plan_name

    @plan_name.setter
    def plan_name(self, plan_name: str):
        """Sets the plan_name of this SubscriptionOutData.


        :param plan_name: The plan_name of this SubscriptionOutData.  # noqa: E501
        :type: str
        """

        self._plan_name = plan_name

    @property
    def pricing_plan_id(self) -> int:
        """Gets the pricing_plan_id of this SubscriptionOutData.  # noqa: E501

        Legacy fields (kept for compatibility with FE)  # noqa: E501

        :return: The pricing_plan_id of this SubscriptionOutData.  # noqa: E501
        :rtype: int
        """
        return self._pricing_plan_id

    @pricing_plan_id.setter
    def pricing_plan_id(self, pricing_plan_id: int):
        """Sets the pricing_plan_id of this SubscriptionOutData.

        Legacy fields (kept for compatibility with FE)  # noqa: E501

        :param pricing_plan_id: The pricing_plan_id of this SubscriptionOutData.  # noqa: E501
        :type: int
        """

        self._pricing_plan_id = pricing_plan_id

    @property
    def renewal_at(self) -> str:
        """Gets the renewal_at of this SubscriptionOutData.  # noqa: E501


        :return: The renewal_at of this SubscriptionOutData.  # noqa: E501
        :rtype: str
        """
        return self._renewal_at

    @renewal_at.setter
    def renewal_at(self, renewal_at: str):
        """Sets the renewal_at of this SubscriptionOutData.


        :param renewal_at: The renewal_at of this SubscriptionOutData.  # noqa: E501
        :type: str
        """

        self._renewal_at = renewal_at

    @property
    def renewal_date(self) -> str:
        """Gets the renewal_date of this SubscriptionOutData.  # noqa: E501


        :return: The renewal_date of this SubscriptionOutData.  # noqa: E501
        :rtype: str
        """
        return self._renewal_date

    @renewal_date.setter
    def renewal_date(self, renewal_date: str):
        """Sets the renewal_date of this SubscriptionOutData.


        :param renewal_date: The renewal_date of this SubscriptionOutData.  # noqa: E501
        :type: str
        """

        self._renewal_date = renewal_date

    @property
    def seat_cost_in_cents(self) -> int:
        """Gets the seat_cost_in_cents of this SubscriptionOutData.  # noqa: E501


        :return: The seat_cost_in_cents of this SubscriptionOutData.  # noqa: E501
        :rtype: int
        """
        return self._seat_cost_in_cents

    @seat_cost_in_cents.setter
    def seat_cost_in_cents(self, seat_cost_in_cents: int):
        """Sets the seat_cost_in_cents of this SubscriptionOutData.


        :param seat_cost_in_cents: The seat_cost_in_cents of this SubscriptionOutData.  # noqa: E501
        :type: int
        """

        self._seat_cost_in_cents = seat_cost_in_cents

    @property
    def seats(self) -> int:
        """Gets the seats of this SubscriptionOutData.  # noqa: E501


        :return: The seats of this SubscriptionOutData.  # noqa: E501
        :rtype: int
        """
        return self._seats

    @seats.setter
    def seats(self, seats: int):
        """Sets the seats of this SubscriptionOutData.


        :param seats: The seats of this SubscriptionOutData.  # noqa: E501
        :type: int
        """

        self._seats = seats

    @property
    def site(self) -> str:
        """Gets the site of this SubscriptionOutData.  # noqa: E501


        :return: The site of this SubscriptionOutData.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site: str):
        """Sets the site of this SubscriptionOutData.


        :param site: The site of this SubscriptionOutData.  # noqa: E501
        :type: str
        """

        self._site = site

    @property
    def start_date(self) -> str:
        """Gets the start_date of this SubscriptionOutData.  # noqa: E501

        Deprecated: this field will be replaced by CurrentPeriodStartsAt  # noqa: E501

        :return: The start_date of this SubscriptionOutData.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: str):
        """Sets the start_date of this SubscriptionOutData.

        Deprecated: this field will be replaced by CurrentPeriodStartsAt  # noqa: E501

        :param start_date: The start_date of this SubscriptionOutData.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def state(self) -> str:
        """Gets the state of this SubscriptionOutData.  # noqa: E501


        :return: The state of this SubscriptionOutData.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this SubscriptionOutData.


        :param state: The state of this SubscriptionOutData.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def subscription_created_at(self) -> str:
        """Gets the subscription_created_at of this SubscriptionOutData.  # noqa: E501


        :return: The subscription_created_at of this SubscriptionOutData.  # noqa: E501
        :rtype: str
        """
        return self._subscription_created_at

    @subscription_created_at.setter
    def subscription_created_at(self, subscription_created_at: str):
        """Sets the subscription_created_at of this SubscriptionOutData.


        :param subscription_created_at: The subscription_created_at of this SubscriptionOutData.  # noqa: E501
        :type: str
        """

        self._subscription_created_at = subscription_created_at

    @property
    def subscription_period(self) -> ModelsPeriod:
        """Gets the subscription_period of this SubscriptionOutData.  # noqa: E501


        :return: The subscription_period of this SubscriptionOutData.  # noqa: E501
        :rtype: ModelsPeriod
        """
        return self._subscription_period

    @subscription_period.setter
    def subscription_period(self, subscription_period: ModelsPeriod):
        """Sets the subscription_period of this SubscriptionOutData.


        :param subscription_period: The subscription_period of this SubscriptionOutData.  # noqa: E501
        :type: ModelsPeriod
        """

        self._subscription_period = subscription_period

    @property
    def trial_available(self) -> bool:
        """Gets the trial_available of this SubscriptionOutData.  # noqa: E501


        :return: The trial_available of this SubscriptionOutData.  # noqa: E501
        :rtype: bool
        """
        return self._trial_available

    @trial_available.setter
    def trial_available(self, trial_available: bool):
        """Sets the trial_available of this SubscriptionOutData.


        :param trial_available: The trial_available of this SubscriptionOutData.  # noqa: E501
        :type: bool
        """

        self._trial_available = trial_available

    @property
    def trial_end_date(self) -> str:
        """Gets the trial_end_date of this SubscriptionOutData.  # noqa: E501


        :return: The trial_end_date of this SubscriptionOutData.  # noqa: E501
        :rtype: str
        """
        return self._trial_end_date

    @trial_end_date.setter
    def trial_end_date(self, trial_end_date: str):
        """Sets the trial_end_date of this SubscriptionOutData.


        :param trial_end_date: The trial_end_date of this SubscriptionOutData.  # noqa: E501
        :type: str
        """

        self._trial_end_date = trial_end_date

    @property
    def trial_start_date(self) -> str:
        """Gets the trial_start_date of this SubscriptionOutData.  # noqa: E501


        :return: The trial_start_date of this SubscriptionOutData.  # noqa: E501
        :rtype: str
        """
        return self._trial_start_date

    @trial_start_date.setter
    def trial_start_date(self, trial_start_date: str):
        """Sets the trial_start_date of this SubscriptionOutData.


        :param trial_start_date: The trial_start_date of this SubscriptionOutData.  # noqa: E501
        :type: str
        """

        self._trial_start_date = trial_start_date

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(SubscriptionOutData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionOutData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionOutData):
            return True

        return self.to_dict() != other.to_dict()
