"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class SubscriptionPayload:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "contact_details": "SubscriptionContactDetailRequest",
        "inc_terms_accepted": "bool",
        "master_signup": "bool",
        "pricing_plan_id": "int",
    }

    attribute_map = {
        "contact_details": "contact_details",
        "inc_terms_accepted": "inc_terms_accepted",
        "master_signup": "master_signup",
        "pricing_plan_id": "pricing_plan_id",
    }

    def __init__(
        self, contact_details=None, inc_terms_accepted=None, master_signup=None, pricing_plan_id=None, _configuration=None
    ):  # noqa: E501
        """SubscriptionPayload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._contact_details = None
        self._inc_terms_accepted = None
        self._master_signup = None
        self._pricing_plan_id = None
        self.discriminator = None

        if contact_details is not None:
            self.contact_details = contact_details
        if inc_terms_accepted is not None:
            self.inc_terms_accepted = inc_terms_accepted
        if master_signup is not None:
            self.master_signup = master_signup
        self.pricing_plan_id = pricing_plan_id

    @property
    def contact_details(self):
        """Gets the contact_details of this SubscriptionPayload.  # noqa: E501


        :return: The contact_details of this SubscriptionPayload.  # noqa: E501
        :rtype: SubscriptionContactDetailRequest
        """
        return self._contact_details

    @contact_details.setter
    def contact_details(self, contact_details):
        """Sets the contact_details of this SubscriptionPayload.


        :param contact_details: The contact_details of this SubscriptionPayload.  # noqa: E501
        :type: SubscriptionContactDetailRequest
        """

        self._contact_details = contact_details

    @property
    def inc_terms_accepted(self):
        """Gets the inc_terms_accepted of this SubscriptionPayload.  # noqa: E501

        True if user accepted ToS for the Toggl Inc company. Ignored if company is not customer of Toggl INC.  # noqa: E501

        :return: The inc_terms_accepted of this SubscriptionPayload.  # noqa: E501
        :rtype: bool
        """
        return self._inc_terms_accepted

    @inc_terms_accepted.setter
    def inc_terms_accepted(self, inc_terms_accepted):
        """Sets the inc_terms_accepted of this SubscriptionPayload.

        True if user accepted ToS for the Toggl Inc company. Ignored if company is not customer of Toggl INC.  # noqa: E501

        :param inc_terms_accepted: The inc_terms_accepted of this SubscriptionPayload.  # noqa: E501
        :type: bool
        """

        self._inc_terms_accepted = inc_terms_accepted

    @property
    def master_signup(self):
        """Gets the master_signup of this SubscriptionPayload.  # noqa: E501

        True if user want to sign up to the Master program.  # noqa: E501

        :return: The master_signup of this SubscriptionPayload.  # noqa: E501
        :rtype: bool
        """
        return self._master_signup

    @master_signup.setter
    def master_signup(self, master_signup):
        """Sets the master_signup of this SubscriptionPayload.

        True if user want to sign up to the Master program.  # noqa: E501

        :param master_signup: The master_signup of this SubscriptionPayload.  # noqa: E501
        :type: bool
        """

        self._master_signup = master_signup

    @property
    def pricing_plan_id(self):
        """Gets the pricing_plan_id of this SubscriptionPayload.  # noqa: E501

        Numeric ID of the pricing plan.  # noqa: E501

        :return: The pricing_plan_id of this SubscriptionPayload.  # noqa: E501
        :rtype: int
        """
        return self._pricing_plan_id

    @pricing_plan_id.setter
    def pricing_plan_id(self, pricing_plan_id):
        """Sets the pricing_plan_id of this SubscriptionPayload.

        Numeric ID of the pricing plan.  # noqa: E501

        :param pricing_plan_id: The pricing_plan_id of this SubscriptionPayload.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and pricing_plan_id is None:
            raise ValueError("Invalid value for `pricing_plan_id`, must not be `None`")  # noqa: E501

        self._pricing_plan_id = pricing_plan_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(SubscriptionPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionPayload):
            return True

        return self.to_dict() != other.to_dict()
