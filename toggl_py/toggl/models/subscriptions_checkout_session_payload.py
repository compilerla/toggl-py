"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class SubscriptionsCheckoutSessionPayload:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "cancel_url": "str",
        "country_code": "str",
        "country_id": "int",
        "price_tag": "str",
        "referral": "str",
        "subdivision_id": "int",
        "success_url": "str",
        "tax": "str",
        "zip": "str",
    }

    attribute_map = {
        "cancel_url": "cancel_url",
        "country_code": "country_code",
        "country_id": "country_id",
        "price_tag": "price_tag",
        "referral": "referral",
        "subdivision_id": "subdivision_id",
        "success_url": "success_url",
        "tax": "tax",
        "zip": "zip",
    }

    def __init__(
        self,
        cancel_url=None,
        country_code=None,
        country_id=None,
        price_tag=None,
        referral=None,
        subdivision_id=None,
        success_url=None,
        tax=None,
        zip=None,
        _configuration=None,
    ):  # noqa: E501
        """SubscriptionsCheckoutSessionPayload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cancel_url = None
        self._country_code = None
        self._country_id = None
        self._price_tag = None
        self._referral = None
        self._subdivision_id = None
        self._success_url = None
        self._tax = None
        self._zip = None
        self.discriminator = None

        if cancel_url is not None:
            self.cancel_url = cancel_url
        if country_code is not None:
            self.country_code = country_code
        if country_id is not None:
            self.country_id = country_id
        if price_tag is not None:
            self.price_tag = price_tag
        if referral is not None:
            self.referral = referral
        if subdivision_id is not None:
            self.subdivision_id = subdivision_id
        if success_url is not None:
            self.success_url = success_url
        if tax is not None:
            self.tax = tax
        if zip is not None:
            self.zip = zip

    @property
    def cancel_url(self):
        """Gets the cancel_url of this SubscriptionsCheckoutSessionPayload.  # noqa: E501


        :return: The cancel_url of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :rtype: str
        """
        return self._cancel_url

    @cancel_url.setter
    def cancel_url(self, cancel_url):
        """Sets the cancel_url of this SubscriptionsCheckoutSessionPayload.


        :param cancel_url: The cancel_url of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :type: str
        """

        self._cancel_url = cancel_url

    @property
    def country_code(self):
        """Gets the country_code of this SubscriptionsCheckoutSessionPayload.  # noqa: E501


        :return: The country_code of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this SubscriptionsCheckoutSessionPayload.


        :param country_code: The country_code of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def country_id(self):
        """Gets the country_id of this SubscriptionsCheckoutSessionPayload.  # noqa: E501


        :return: The country_id of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this SubscriptionsCheckoutSessionPayload.


        :param country_id: The country_id of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :type: int
        """

        self._country_id = country_id

    @property
    def price_tag(self):
        """Gets the price_tag of this SubscriptionsCheckoutSessionPayload.  # noqa: E501


        :return: The price_tag of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :rtype: str
        """
        return self._price_tag

    @price_tag.setter
    def price_tag(self, price_tag):
        """Sets the price_tag of this SubscriptionsCheckoutSessionPayload.


        :param price_tag: The price_tag of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :type: str
        """

        self._price_tag = price_tag

    @property
    def referral(self):
        """Gets the referral of this SubscriptionsCheckoutSessionPayload.  # noqa: E501


        :return: The referral of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :rtype: str
        """
        return self._referral

    @referral.setter
    def referral(self, referral):
        """Sets the referral of this SubscriptionsCheckoutSessionPayload.


        :param referral: The referral of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :type: str
        """

        self._referral = referral

    @property
    def subdivision_id(self):
        """Gets the subdivision_id of this SubscriptionsCheckoutSessionPayload.  # noqa: E501


        :return: The subdivision_id of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :rtype: int
        """
        return self._subdivision_id

    @subdivision_id.setter
    def subdivision_id(self, subdivision_id):
        """Sets the subdivision_id of this SubscriptionsCheckoutSessionPayload.


        :param subdivision_id: The subdivision_id of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :type: int
        """

        self._subdivision_id = subdivision_id

    @property
    def success_url(self):
        """Gets the success_url of this SubscriptionsCheckoutSessionPayload.  # noqa: E501


        :return: The success_url of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :rtype: str
        """
        return self._success_url

    @success_url.setter
    def success_url(self, success_url):
        """Sets the success_url of this SubscriptionsCheckoutSessionPayload.


        :param success_url: The success_url of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :type: str
        """

        self._success_url = success_url

    @property
    def tax(self):
        """Gets the tax of this SubscriptionsCheckoutSessionPayload.  # noqa: E501


        :return: The tax of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :rtype: str
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this SubscriptionsCheckoutSessionPayload.


        :param tax: The tax of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :type: str
        """

        self._tax = tax

    @property
    def zip(self):
        """Gets the zip of this SubscriptionsCheckoutSessionPayload.  # noqa: E501


        :return: The zip of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this SubscriptionsCheckoutSessionPayload.


        :param zip: The zip of this SubscriptionsCheckoutSessionPayload.  # noqa: E501
        :type: str
        """

        self._zip = zip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(SubscriptionsCheckoutSessionPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionsCheckoutSessionPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionsCheckoutSessionPayload):
            return True

        return self.to_dict() != other.to_dict()
