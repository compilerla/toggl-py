"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class SummaryAuditGroupFilter:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "currency": "str",
        "max_amount_cents": "int",
        "max_duration_seconds": "int",
        "min_amount_cents": "int",
        "min_duration_seconds": "int",
    }

    attribute_map = {
        "currency": "currency",
        "max_amount_cents": "max_amount_cents",
        "max_duration_seconds": "max_duration_seconds",
        "min_amount_cents": "min_amount_cents",
        "min_duration_seconds": "min_duration_seconds",
    }

    def __init__(
        self,
        currency=None,
        max_amount_cents=None,
        max_duration_seconds=None,
        min_amount_cents=None,
        min_duration_seconds=None,
        _configuration=None,
    ):  # noqa: E501
        """SummaryAuditGroupFilter - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._currency = None
        self._max_amount_cents = None
        self._max_duration_seconds = None
        self._min_amount_cents = None
        self._min_duration_seconds = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if max_amount_cents is not None:
            self.max_amount_cents = max_amount_cents
        if max_duration_seconds is not None:
            self.max_duration_seconds = max_duration_seconds
        if min_amount_cents is not None:
            self.min_amount_cents = min_amount_cents
        if min_duration_seconds is not None:
            self.min_duration_seconds = min_duration_seconds

    @property
    def currency(self):
        """Gets the currency of this SummaryAuditGroupFilter.  # noqa: E501

        Audit currency, optional, example \"USD\", premium feature.  # noqa: E501

        :return: The currency of this SummaryAuditGroupFilter.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SummaryAuditGroupFilter.

        Audit currency, optional, example \"USD\", premium feature.  # noqa: E501

        :param currency: The currency of this SummaryAuditGroupFilter.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def max_amount_cents(self):
        """Gets the max_amount_cents of this SummaryAuditGroupFilter.  # noqa: E501

        Audit max amount in cents, optional, premium feature.  # noqa: E501

        :return: The max_amount_cents of this SummaryAuditGroupFilter.  # noqa: E501
        :rtype: int
        """
        return self._max_amount_cents

    @max_amount_cents.setter
    def max_amount_cents(self, max_amount_cents):
        """Sets the max_amount_cents of this SummaryAuditGroupFilter.

        Audit max amount in cents, optional, premium feature.  # noqa: E501

        :param max_amount_cents: The max_amount_cents of this SummaryAuditGroupFilter.  # noqa: E501
        :type: int
        """

        self._max_amount_cents = max_amount_cents

    @property
    def max_duration_seconds(self):
        """Gets the max_duration_seconds of this SummaryAuditGroupFilter.  # noqa: E501

        Audit max duration in seconds, optional, premium feature.  # noqa: E501

        :return: The max_duration_seconds of this SummaryAuditGroupFilter.  # noqa: E501
        :rtype: int
        """
        return self._max_duration_seconds

    @max_duration_seconds.setter
    def max_duration_seconds(self, max_duration_seconds):
        """Sets the max_duration_seconds of this SummaryAuditGroupFilter.

        Audit max duration in seconds, optional, premium feature.  # noqa: E501

        :param max_duration_seconds: The max_duration_seconds of this SummaryAuditGroupFilter.  # noqa: E501
        :type: int
        """

        self._max_duration_seconds = max_duration_seconds

    @property
    def min_amount_cents(self):
        """Gets the min_amount_cents of this SummaryAuditGroupFilter.  # noqa: E501

        Audit min amount in cents, optional, premium feature.  # noqa: E501

        :return: The min_amount_cents of this SummaryAuditGroupFilter.  # noqa: E501
        :rtype: int
        """
        return self._min_amount_cents

    @min_amount_cents.setter
    def min_amount_cents(self, min_amount_cents):
        """Sets the min_amount_cents of this SummaryAuditGroupFilter.

        Audit min amount in cents, optional, premium feature.  # noqa: E501

        :param min_amount_cents: The min_amount_cents of this SummaryAuditGroupFilter.  # noqa: E501
        :type: int
        """

        self._min_amount_cents = min_amount_cents

    @property
    def min_duration_seconds(self):
        """Gets the min_duration_seconds of this SummaryAuditGroupFilter.  # noqa: E501

        Audit min duration in seconds, optional, premium feature.  # noqa: E501

        :return: The min_duration_seconds of this SummaryAuditGroupFilter.  # noqa: E501
        :rtype: int
        """
        return self._min_duration_seconds

    @min_duration_seconds.setter
    def min_duration_seconds(self, min_duration_seconds):
        """Sets the min_duration_seconds of this SummaryAuditGroupFilter.

        Audit min duration in seconds, optional, premium feature.  # noqa: E501

        :param min_duration_seconds: The min_duration_seconds of this SummaryAuditGroupFilter.  # noqa: E501
        :type: int
        """

        self._min_duration_seconds = min_duration_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(SummaryAuditGroupFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SummaryAuditGroupFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SummaryAuditGroupFilter):
            return True

        return self.to_dict() != other.to_dict()
