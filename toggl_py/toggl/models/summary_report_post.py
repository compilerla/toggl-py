"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration
from toggl.models.summary_audit import SummaryAudit  # noqa: F401


class SummaryReportPost:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "audit": "SummaryAudit",
        "billable": "bool",
        "client_ids": "list[int]",
        "description": "str",
        "distinguish_rates": "bool",
        "end_date": "str",
        "group_ids": "list[int]",
        "grouping": "str",
        "include_time_entry_ids": "bool",
        "max_duration_seconds": "int",
        "min_duration_seconds": "int",
        "posted_fields": "list[str]",
        "project_ids": "list[int]",
        "rounding": "int",
        "rounding_minutes": "int",
        "start_time": "str",
        "start_date": "str",
        "sub_grouping": "str",
        "tag_ids": "list[int]",
        "task_ids": "list[int]",
        "time_entry_ids": "list[int]",
        "user_ids": "list[int]",
    }

    attribute_map = {
        "audit": "audit",
        "billable": "billable",
        "client_ids": "client_ids",
        "description": "description",
        "distinguish_rates": "distinguish_rates",
        "end_date": "end_date",
        "group_ids": "group_ids",
        "grouping": "grouping",
        "include_time_entry_ids": "include_time_entry_ids",
        "max_duration_seconds": "max_duration_seconds",
        "min_duration_seconds": "min_duration_seconds",
        "posted_fields": "postedFields",
        "project_ids": "project_ids",
        "rounding": "rounding",
        "rounding_minutes": "rounding_minutes",
        "start_time": "startTime",
        "start_date": "start_date",
        "sub_grouping": "sub_grouping",
        "tag_ids": "tag_ids",
        "task_ids": "task_ids",
        "time_entry_ids": "time_entry_ids",
        "user_ids": "user_ids",
    }

    def __init__(
        self,
        audit: SummaryAudit = None,
        billable: bool = None,
        client_ids: list[int] = None,
        description: str = None,
        distinguish_rates: bool = None,
        end_date: str = None,
        group_ids: list[int] = None,
        grouping: str = None,
        include_time_entry_ids: bool = None,
        max_duration_seconds: int = None,
        min_duration_seconds: int = None,
        posted_fields: list[str] = None,
        project_ids: list[int] = None,
        rounding: int = None,
        rounding_minutes: int = None,
        start_time: str = None,
        start_date: str = None,
        sub_grouping: str = None,
        tag_ids: list[int] = None,
        task_ids: list[int] = None,
        time_entry_ids: list[int] = None,
        user_ids: list[int] = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        SummaryReportPost - a model defined in Swagger

        Parameters:
          audit (SummaryAudit): Optional
          billable (bool): Optional
          client_ids (list[int]): Optional
          description (str): Optional
          distinguish_rates (bool): Optional
          end_date (str): Optional
          group_ids (list[int]): Optional
          grouping (str): Optional
          include_time_entry_ids (bool): Optional
          max_duration_seconds (int): Optional
          min_duration_seconds (int): Optional
          posted_fields (list[str]): Optional
          project_ids (list[int]): Optional
          rounding (int): Optional
          rounding_minutes (int): Optional
          start_time (str): Optional
          start_date (str): Optional
          sub_grouping (str): Optional
          tag_ids (list[int]): Optional
          task_ids (list[int]): Optional
          time_entry_ids (list[int]): Optional
          user_ids (list[int]): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._audit = None
        self._billable = None
        self._client_ids = None
        self._description = None
        self._distinguish_rates = None
        self._end_date = None
        self._group_ids = None
        self._grouping = None
        self._include_time_entry_ids = None
        self._max_duration_seconds = None
        self._min_duration_seconds = None
        self._posted_fields = None
        self._project_ids = None
        self._rounding = None
        self._rounding_minutes = None
        self._start_time = None
        self._start_date = None
        self._sub_grouping = None
        self._tag_ids = None
        self._task_ids = None
        self._time_entry_ids = None
        self._user_ids = None
        self.discriminator = None

        if audit is not None:
            self.audit = audit
        if billable is not None:
            self.billable = billable
        if client_ids is not None:
            self.client_ids = client_ids
        if description is not None:
            self.description = description
        if distinguish_rates is not None:
            self.distinguish_rates = distinguish_rates
        if end_date is not None:
            self.end_date = end_date
        if group_ids is not None:
            self.group_ids = group_ids
        if grouping is not None:
            self.grouping = grouping
        if include_time_entry_ids is not None:
            self.include_time_entry_ids = include_time_entry_ids
        if max_duration_seconds is not None:
            self.max_duration_seconds = max_duration_seconds
        if min_duration_seconds is not None:
            self.min_duration_seconds = min_duration_seconds
        if posted_fields is not None:
            self.posted_fields = posted_fields
        if project_ids is not None:
            self.project_ids = project_ids
        if rounding is not None:
            self.rounding = rounding
        if rounding_minutes is not None:
            self.rounding_minutes = rounding_minutes
        if start_time is not None:
            self.start_time = start_time
        if start_date is not None:
            self.start_date = start_date
        if sub_grouping is not None:
            self.sub_grouping = sub_grouping
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if task_ids is not None:
            self.task_ids = task_ids
        if time_entry_ids is not None:
            self.time_entry_ids = time_entry_ids
        if user_ids is not None:
            self.user_ids = user_ids

    @property
    def audit(self) -> SummaryAudit:
        """Gets the audit of this SummaryReportPost.  # noqa: E501


        :return: The audit of this SummaryReportPost.  # noqa: E501
        :rtype: SummaryAudit
        """
        return self._audit

    @audit.setter
    def audit(self, audit: SummaryAudit):
        """Sets the audit of this SummaryReportPost.


        :param audit: The audit of this SummaryReportPost.  # noqa: E501
        :type: SummaryAudit
        """

        self._audit = audit

    @property
    def billable(self) -> bool:
        """Gets the billable of this SummaryReportPost.  # noqa: E501

        Whether the time entry is set as billable, optional, premium feature.  # noqa: E501

        :return: The billable of this SummaryReportPost.  # noqa: E501
        :rtype: bool
        """
        return self._billable

    @billable.setter
    def billable(self, billable: bool):
        """Sets the billable of this SummaryReportPost.

        Whether the time entry is set as billable, optional, premium feature.  # noqa: E501

        :param billable: The billable of this SummaryReportPost.  # noqa: E501
        :type: bool
        """

        self._billable = billable

    @property
    def client_ids(self) -> list[int]:
        """Gets the client_ids of this SummaryReportPost.  # noqa: E501

        Client IDs, optional, filtering attribute. To filter records with no clients, use [null].  # noqa: E501

        :return: The client_ids of this SummaryReportPost.  # noqa: E501
        :rtype: list[int]
        """
        return self._client_ids

    @client_ids.setter
    def client_ids(self, client_ids: list[int]):
        """Sets the client_ids of this SummaryReportPost.

        Client IDs, optional, filtering attribute. To filter records with no clients, use [null].  # noqa: E501

        :param client_ids: The client_ids of this SummaryReportPost.  # noqa: E501
        :type: list[int]
        """

        self._client_ids = client_ids

    @property
    def description(self) -> str:
        """Gets the description of this SummaryReportPost.  # noqa: E501

        Description, optional, filtering attribute.  # noqa: E501

        :return: The description of this SummaryReportPost.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this SummaryReportPost.

        Description, optional, filtering attribute.  # noqa: E501

        :param description: The description of this SummaryReportPost.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def distinguish_rates(self) -> bool:
        """Gets the distinguish_rates of this SummaryReportPost.  # noqa: E501

        DistinguishRates will create new subgroups for each rate, optional, default false.  # noqa: E501

        :return: The distinguish_rates of this SummaryReportPost.  # noqa: E501
        :rtype: bool
        """
        return self._distinguish_rates

    @distinguish_rates.setter
    def distinguish_rates(self, distinguish_rates: bool):
        """Sets the distinguish_rates of this SummaryReportPost.

        DistinguishRates will create new subgroups for each rate, optional, default false.  # noqa: E501

        :param distinguish_rates: The distinguish_rates of this SummaryReportPost.  # noqa: E501
        :type: bool
        """

        self._distinguish_rates = distinguish_rates

    @property
    def end_date(self) -> str:
        """Gets the end_date of this SummaryReportPost.  # noqa: E501

        End date, example time.DateOnly. Should be greater than Start date.  # noqa: E501

        :return: The end_date of this SummaryReportPost.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: str):
        """Sets the end_date of this SummaryReportPost.

        End date, example time.DateOnly. Should be greater than Start date.  # noqa: E501

        :param end_date: The end_date of this SummaryReportPost.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def group_ids(self) -> list[int]:
        """Gets the group_ids of this SummaryReportPost.  # noqa: E501

        Group IDs, optional, filtering attribute.  # noqa: E501

        :return: The group_ids of this SummaryReportPost.  # noqa: E501
        :rtype: list[int]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids: list[int]):
        """Sets the group_ids of this SummaryReportPost.

        Group IDs, optional, filtering attribute.  # noqa: E501

        :param group_ids: The group_ids of this SummaryReportPost.  # noqa: E501
        :type: list[int]
        """

        self._group_ids = group_ids

    @property
    def grouping(self) -> str:
        """Gets the grouping of this SummaryReportPost.  # noqa: E501

        Grouping option, optional.  # noqa: E501

        :return: The grouping of this SummaryReportPost.  # noqa: E501
        :rtype: str
        """
        return self._grouping

    @grouping.setter
    def grouping(self, grouping: str):
        """Sets the grouping of this SummaryReportPost.

        Grouping option, optional.  # noqa: E501

        :param grouping: The grouping of this SummaryReportPost.  # noqa: E501
        :type: str
        """

        self._grouping = grouping

    @property
    def include_time_entry_ids(self) -> bool:
        """Gets the include_time_entry_ids of this SummaryReportPost.  # noqa: E501

        Whether time entry IDs should be included in the results, optional, default false. Not applicable for export.  # noqa: E501

        :return: The include_time_entry_ids of this SummaryReportPost.  # noqa: E501
        :rtype: bool
        """
        return self._include_time_entry_ids

    @include_time_entry_ids.setter
    def include_time_entry_ids(self, include_time_entry_ids: bool):
        """Sets the include_time_entry_ids of this SummaryReportPost.

        Whether time entry IDs should be included in the results, optional, default false. Not applicable for export.  # noqa: E501

        :param include_time_entry_ids: The include_time_entry_ids of this SummaryReportPost.  # noqa: E501
        :type: bool
        """

        self._include_time_entry_ids = include_time_entry_ids

    @property
    def max_duration_seconds(self) -> int:
        """Gets the max_duration_seconds of this SummaryReportPost.  # noqa: E501

        Max duration seconds, optional, filtering attribute. Time Audit only, should be greater than MinDurationSeconds.  # noqa: E501

        :return: The max_duration_seconds of this SummaryReportPost.  # noqa: E501
        :rtype: int
        """
        return self._max_duration_seconds

    @max_duration_seconds.setter
    def max_duration_seconds(self, max_duration_seconds: int):
        """Sets the max_duration_seconds of this SummaryReportPost.

        Max duration seconds, optional, filtering attribute. Time Audit only, should be greater than MinDurationSeconds.  # noqa: E501

        :param max_duration_seconds: The max_duration_seconds of this SummaryReportPost.  # noqa: E501
        :type: int
        """

        self._max_duration_seconds = max_duration_seconds

    @property
    def min_duration_seconds(self) -> int:
        """Gets the min_duration_seconds of this SummaryReportPost.  # noqa: E501

        Min duration seconds, optional, filtering attribute. Time Audit only, should be less than MaxDurationSeconds.  # noqa: E501

        :return: The min_duration_seconds of this SummaryReportPost.  # noqa: E501
        :rtype: int
        """
        return self._min_duration_seconds

    @min_duration_seconds.setter
    def min_duration_seconds(self, min_duration_seconds: int):
        """Sets the min_duration_seconds of this SummaryReportPost.

        Min duration seconds, optional, filtering attribute. Time Audit only, should be less than MaxDurationSeconds.  # noqa: E501

        :param min_duration_seconds: The min_duration_seconds of this SummaryReportPost.  # noqa: E501
        :type: int
        """

        self._min_duration_seconds = min_duration_seconds

    @property
    def posted_fields(self) -> list[str]:
        """Gets the posted_fields of this SummaryReportPost.  # noqa: E501


        :return: The posted_fields of this SummaryReportPost.  # noqa: E501
        :rtype: list[str]
        """
        return self._posted_fields

    @posted_fields.setter
    def posted_fields(self, posted_fields: list[str]):
        """Sets the posted_fields of this SummaryReportPost.


        :param posted_fields: The posted_fields of this SummaryReportPost.  # noqa: E501
        :type: list[str]
        """

        self._posted_fields = posted_fields

    @property
    def project_ids(self) -> list[int]:
        """Gets the project_ids of this SummaryReportPost.  # noqa: E501

        Project IDs, optional, filtering attribute. To filter records with no projects, use [null].  # noqa: E501

        :return: The project_ids of this SummaryReportPost.  # noqa: E501
        :rtype: list[int]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids: list[int]):
        """Sets the project_ids of this SummaryReportPost.

        Project IDs, optional, filtering attribute. To filter records with no projects, use [null].  # noqa: E501

        :param project_ids: The project_ids of this SummaryReportPost.  # noqa: E501
        :type: list[int]
        """

        self._project_ids = project_ids

    @property
    def rounding(self) -> int:
        """Gets the rounding of this SummaryReportPost.  # noqa: E501

        Whether time should be rounded, optional, default from workspace settings.  # noqa: E501

        :return: The rounding of this SummaryReportPost.  # noqa: E501
        :rtype: int
        """
        return self._rounding

    @rounding.setter
    def rounding(self, rounding: int):
        """Sets the rounding of this SummaryReportPost.

        Whether time should be rounded, optional, default from workspace settings.  # noqa: E501

        :param rounding: The rounding of this SummaryReportPost.  # noqa: E501
        :type: int
        """

        self._rounding = rounding

    @property
    def rounding_minutes(self) -> int:
        """Gets the rounding_minutes of this SummaryReportPost.  # noqa: E501

        Rounding minutes value, optional, default from workspace settings. Should be 0, 1, 5, 6, 10, 12, 15, 30, 60 or 240.  # noqa: E501

        :return: The rounding_minutes of this SummaryReportPost.  # noqa: E501
        :rtype: int
        """
        return self._rounding_minutes

    @rounding_minutes.setter
    def rounding_minutes(self, rounding_minutes: int):
        """Sets the rounding_minutes of this SummaryReportPost.

        Rounding minutes value, optional, default from workspace settings. Should be 0, 1, 5, 6, 10, 12, 15, 30, 60 or 240.  # noqa: E501

        :param rounding_minutes: The rounding_minutes of this SummaryReportPost.  # noqa: E501
        :type: int
        """

        self._rounding_minutes = rounding_minutes

    @property
    def start_time(self) -> str:
        """Gets the start_time of this SummaryReportPost.  # noqa: E501


        :return: The start_time of this SummaryReportPost.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: str):
        """Sets the start_time of this SummaryReportPost.


        :param start_time: The start_time of this SummaryReportPost.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def start_date(self) -> str:
        """Gets the start_date of this SummaryReportPost.  # noqa: E501

        Start date, example time.DateOnly. Should be less than End date.  # noqa: E501

        :return: The start_date of this SummaryReportPost.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: str):
        """Sets the start_date of this SummaryReportPost.

        Start date, example time.DateOnly. Should be less than End date.  # noqa: E501

        :param start_date: The start_date of this SummaryReportPost.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def sub_grouping(self) -> str:
        """Gets the sub_grouping of this SummaryReportPost.  # noqa: E501

        SubGrouping option, optional.  # noqa: E501

        :return: The sub_grouping of this SummaryReportPost.  # noqa: E501
        :rtype: str
        """
        return self._sub_grouping

    @sub_grouping.setter
    def sub_grouping(self, sub_grouping: str):
        """Sets the sub_grouping of this SummaryReportPost.

        SubGrouping option, optional.  # noqa: E501

        :param sub_grouping: The sub_grouping of this SummaryReportPost.  # noqa: E501
        :type: str
        """

        self._sub_grouping = sub_grouping

    @property
    def tag_ids(self) -> list[int]:
        """Gets the tag_ids of this SummaryReportPost.  # noqa: E501

        Tag IDs, optional, filtering attribute. To filter records with no tags, use [null].  # noqa: E501

        :return: The tag_ids of this SummaryReportPost.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids: list[int]):
        """Sets the tag_ids of this SummaryReportPost.

        Tag IDs, optional, filtering attribute. To filter records with no tags, use [null].  # noqa: E501

        :param tag_ids: The tag_ids of this SummaryReportPost.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def task_ids(self) -> list[int]:
        """Gets the task_ids of this SummaryReportPost.  # noqa: E501

        Task IDs, optional, filtering attribute. To filter records with no tasks, use [null].  # noqa: E501

        :return: The task_ids of this SummaryReportPost.  # noqa: E501
        :rtype: list[int]
        """
        return self._task_ids

    @task_ids.setter
    def task_ids(self, task_ids: list[int]):
        """Sets the task_ids of this SummaryReportPost.

        Task IDs, optional, filtering attribute. To filter records with no tasks, use [null].  # noqa: E501

        :param task_ids: The task_ids of this SummaryReportPost.  # noqa: E501
        :type: list[int]
        """

        self._task_ids = task_ids

    @property
    def time_entry_ids(self) -> list[int]:
        """Gets the time_entry_ids of this SummaryReportPost.  # noqa: E501

        TimeEntryIDs filters by time entries. This was added to support retro-compatibility with reports v2.  # noqa: E501

        :return: The time_entry_ids of this SummaryReportPost.  # noqa: E501
        :rtype: list[int]
        """
        return self._time_entry_ids

    @time_entry_ids.setter
    def time_entry_ids(self, time_entry_ids: list[int]):
        """Sets the time_entry_ids of this SummaryReportPost.

        TimeEntryIDs filters by time entries. This was added to support retro-compatibility with reports v2.  # noqa: E501

        :param time_entry_ids: The time_entry_ids of this SummaryReportPost.  # noqa: E501
        :type: list[int]
        """

        self._time_entry_ids = time_entry_ids

    @property
    def user_ids(self) -> list[int]:
        """Gets the user_ids of this SummaryReportPost.  # noqa: E501

        User IDs, optional, filtering attribute.  # noqa: E501

        :return: The user_ids of this SummaryReportPost.  # noqa: E501
        :rtype: list[int]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids: list[int]):
        """Sets the user_ids of this SummaryReportPost.

        User IDs, optional, filtering attribute.  # noqa: E501

        :param user_ids: The user_ids of this SummaryReportPost.  # noqa: E501
        :type: list[int]
        """

        self._user_ids = user_ids

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(SummaryReportPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SummaryReportPost):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SummaryReportPost):
            return True

        return self.to_dict() != other.to_dict()
