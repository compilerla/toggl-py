"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class TaskPayload:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "active": "bool",
        "estimated_seconds": "int",
        "name": "str",
        "project_id": "int",
        "user_id": "int",
        "workspace_id": "int",
    }

    attribute_map = {
        "active": "active",
        "estimated_seconds": "estimated_seconds",
        "name": "name",
        "project_id": "project_id",
        "user_id": "user_id",
        "workspace_id": "workspace_id",
    }

    def __init__(
        self,
        active=None,
        estimated_seconds=None,
        name=None,
        project_id=None,
        user_id=None,
        workspace_id=None,
        _configuration=None,
    ):  # noqa: E501
        """TaskPayload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active = None
        self._estimated_seconds = None
        self._name = None
        self._project_id = None
        self._user_id = None
        self._workspace_id = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if estimated_seconds is not None:
            self.estimated_seconds = estimated_seconds
        if name is not None:
            self.name = name
        if project_id is not None:
            self.project_id = project_id
        if user_id is not None:
            self.user_id = user_id
        if workspace_id is not None:
            self.workspace_id = workspace_id

    @property
    def active(self):
        """Gets the active of this TaskPayload.  # noqa: E501

        Use false to mark the task as done  # noqa: E501

        :return: The active of this TaskPayload.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this TaskPayload.

        Use false to mark the task as done  # noqa: E501

        :param active: The active of this TaskPayload.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def estimated_seconds(self):
        """Gets the estimated_seconds of this TaskPayload.  # noqa: E501

        Task estimation in seconds  # noqa: E501

        :return: The estimated_seconds of this TaskPayload.  # noqa: E501
        :rtype: int
        """
        return self._estimated_seconds

    @estimated_seconds.setter
    def estimated_seconds(self, estimated_seconds):
        """Sets the estimated_seconds of this TaskPayload.

        Task estimation in seconds  # noqa: E501

        :param estimated_seconds: The estimated_seconds of this TaskPayload.  # noqa: E501
        :type: int
        """

        self._estimated_seconds = estimated_seconds

    @property
    def name(self):
        """Gets the name of this TaskPayload.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this TaskPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskPayload.

        Name  # noqa: E501

        :param name: The name of this TaskPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this TaskPayload.  # noqa: E501

        Project ID  # noqa: E501

        :return: The project_id of this TaskPayload.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this TaskPayload.

        Project ID  # noqa: E501

        :param project_id: The project_id of this TaskPayload.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def user_id(self):
        """Gets the user_id of this TaskPayload.  # noqa: E501

        Creator ID, if omitted will use requester user ID  # noqa: E501

        :return: The user_id of this TaskPayload.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TaskPayload.

        Creator ID, if omitted will use requester user ID  # noqa: E501

        :param user_id: The user_id of this TaskPayload.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this TaskPayload.  # noqa: E501

        Workspace ID  # noqa: E501

        :return: The workspace_id of this TaskPayload.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this TaskPayload.

        Workspace ID  # noqa: E501

        :param workspace_id: The workspace_id of this TaskPayload.  # noqa: E501
        :type: int
        """

        self._workspace_id = workspace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(TaskPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskPayload):
            return True

        return self.to_dict() != other.to_dict()
