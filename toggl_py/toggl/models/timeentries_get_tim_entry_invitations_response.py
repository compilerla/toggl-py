"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

from __future__ import annotations  # noqa: F401
import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from toggl.models.models_time_entry import ModelsTimeEntry  # noqa: F401


class TimeentriesGetTimEntryInvitationsResponse:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "shared_by_user_id": "int",
        "shared_by_user_name": "str",
        "time_entry": "ModelsTimeEntry",
        "time_entry_invitation_id": "int",
        "workspace_id": "int",
    }

    attribute_map = {
        "shared_by_user_id": "shared_by_user_id",
        "shared_by_user_name": "shared_by_user_name",
        "time_entry": "time_entry",
        "time_entry_invitation_id": "time_entry_invitation_id",
        "workspace_id": "workspace_id",
    }

    def __init__(
        self,
        shared_by_user_id: int = None,
        shared_by_user_name: str = None,
        time_entry: ModelsTimeEntry = None,
        time_entry_invitation_id: int = None,
        workspace_id: int = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        TimeentriesGetTimEntryInvitationsResponse - a model defined in Swagger

        Parameters:
          shared_by_user_id (int): Optional
          shared_by_user_name (str): Optional
          time_entry (ModelsTimeEntry): Optional
          time_entry_invitation_id (int): Optional
          workspace_id (int): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._shared_by_user_id = None
        self._shared_by_user_name = None
        self._time_entry = None
        self._time_entry_invitation_id = None
        self._workspace_id = None
        self.discriminator = None

        if shared_by_user_id is not None:
            self.shared_by_user_id = shared_by_user_id
        if shared_by_user_name is not None:
            self.shared_by_user_name = shared_by_user_name
        if time_entry is not None:
            self.time_entry = time_entry
        if time_entry_invitation_id is not None:
            self.time_entry_invitation_id = time_entry_invitation_id
        if workspace_id is not None:
            self.workspace_id = workspace_id

    @property
    def shared_by_user_id(self) -> int:
        """Gets the shared_by_user_id of this TimeentriesGetTimEntryInvitationsResponse.  # noqa: E501


        :return: The shared_by_user_id of this TimeentriesGetTimEntryInvitationsResponse.  # noqa: E501
        :rtype: int
        """
        return self._shared_by_user_id

    @shared_by_user_id.setter
    def shared_by_user_id(self, shared_by_user_id: int):
        """Sets the shared_by_user_id of this TimeentriesGetTimEntryInvitationsResponse.


        :param shared_by_user_id: The shared_by_user_id of this TimeentriesGetTimEntryInvitationsResponse.  # noqa: E501
        :type: int
        """

        self._shared_by_user_id = shared_by_user_id

    @property
    def shared_by_user_name(self) -> str:
        """Gets the shared_by_user_name of this TimeentriesGetTimEntryInvitationsResponse.  # noqa: E501


        :return: The shared_by_user_name of this TimeentriesGetTimEntryInvitationsResponse.  # noqa: E501
        :rtype: str
        """
        return self._shared_by_user_name

    @shared_by_user_name.setter
    def shared_by_user_name(self, shared_by_user_name: str):
        """Sets the shared_by_user_name of this TimeentriesGetTimEntryInvitationsResponse.


        :param shared_by_user_name: The shared_by_user_name of this TimeentriesGetTimEntryInvitationsResponse.  # noqa: E501
        :type: str
        """

        self._shared_by_user_name = shared_by_user_name

    @property
    def time_entry(self) -> ModelsTimeEntry:
        """Gets the time_entry of this TimeentriesGetTimEntryInvitationsResponse.  # noqa: E501


        :return: The time_entry of this TimeentriesGetTimEntryInvitationsResponse.  # noqa: E501
        :rtype: ModelsTimeEntry
        """
        return self._time_entry

    @time_entry.setter
    def time_entry(self, time_entry: ModelsTimeEntry):
        """Sets the time_entry of this TimeentriesGetTimEntryInvitationsResponse.


        :param time_entry: The time_entry of this TimeentriesGetTimEntryInvitationsResponse.  # noqa: E501
        :type: ModelsTimeEntry
        """

        self._time_entry = time_entry

    @property
    def time_entry_invitation_id(self) -> int:
        """Gets the time_entry_invitation_id of this TimeentriesGetTimEntryInvitationsResponse.  # noqa: E501


        :return: The time_entry_invitation_id of this TimeentriesGetTimEntryInvitationsResponse.  # noqa: E501
        :rtype: int
        """
        return self._time_entry_invitation_id

    @time_entry_invitation_id.setter
    def time_entry_invitation_id(self, time_entry_invitation_id: int):
        """Sets the time_entry_invitation_id of this TimeentriesGetTimEntryInvitationsResponse.


        :param time_entry_invitation_id: The time_entry_invitation_id of this TimeentriesGetTimEntryInvitationsResponse.  # noqa: E501
        :type: int
        """

        self._time_entry_invitation_id = time_entry_invitation_id

    @property
    def workspace_id(self) -> int:
        """Gets the workspace_id of this TimeentriesGetTimEntryInvitationsResponse.  # noqa: E501


        :return: The workspace_id of this TimeentriesGetTimEntryInvitationsResponse.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id: int):
        """Sets the workspace_id of this TimeentriesGetTimEntryInvitationsResponse.


        :param workspace_id: The workspace_id of this TimeentriesGetTimEntryInvitationsResponse.  # noqa: E501
        :type: int
        """

        self._workspace_id = workspace_id

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(TimeentriesGetTimEntryInvitationsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeentriesGetTimEntryInvitationsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeentriesGetTimEntryInvitationsResponse):
            return True

        return self.to_dict() != other.to_dict()
