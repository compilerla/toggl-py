"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class TimeentryPayload:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "billable": "bool",
        "created_with": "str",
        "description": "str",
        "duration": "int",
        "duronly": "bool",
        "pid": "int",
        "project_id": "int",
        "shared_with_user_ids": "list[int]",
        "start": "str",
        "start_date": "str",
        "stop": "str",
        "tag_action": "str",
        "tag_ids": "list[int]",
        "tags": "list[str]",
        "task_id": "int",
        "tid": "int",
        "uid": "int",
        "user_id": "int",
        "wid": "int",
        "workspace_id": "int",
    }

    attribute_map = {
        "billable": "billable",
        "created_with": "created_with",
        "description": "description",
        "duration": "duration",
        "duronly": "duronly",
        "pid": "pid",
        "project_id": "project_id",
        "shared_with_user_ids": "shared_with_user_ids",
        "start": "start",
        "start_date": "start_date",
        "stop": "stop",
        "tag_action": "tag_action",
        "tag_ids": "tag_ids",
        "tags": "tags",
        "task_id": "task_id",
        "tid": "tid",
        "uid": "uid",
        "user_id": "user_id",
        "wid": "wid",
        "workspace_id": "workspace_id",
    }

    def __init__(
        self,
        billable=None,
        created_with=None,
        description=None,
        duration=None,
        duronly=None,
        pid=None,
        project_id=None,
        shared_with_user_ids=None,
        start=None,
        start_date=None,
        stop=None,
        tag_action=None,
        tag_ids=None,
        tags=None,
        task_id=None,
        tid=None,
        uid=None,
        user_id=None,
        wid=None,
        workspace_id=None,
        _configuration=None,
    ):  # noqa: E501
        """TimeentryPayload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._billable = None
        self._created_with = None
        self._description = None
        self._duration = None
        self._duronly = None
        self._pid = None
        self._project_id = None
        self._shared_with_user_ids = None
        self._start = None
        self._start_date = None
        self._stop = None
        self._tag_action = None
        self._tag_ids = None
        self._tags = None
        self._task_id = None
        self._tid = None
        self._uid = None
        self._user_id = None
        self._wid = None
        self._workspace_id = None
        self.discriminator = None

        if billable is not None:
            self.billable = billable
        if created_with is not None:
            self.created_with = created_with
        if description is not None:
            self.description = description
        if duration is not None:
            self.duration = duration
        if duronly is not None:
            self.duronly = duronly
        if pid is not None:
            self.pid = pid
        if project_id is not None:
            self.project_id = project_id
        if shared_with_user_ids is not None:
            self.shared_with_user_ids = shared_with_user_ids
        if start is not None:
            self.start = start
        if start_date is not None:
            self.start_date = start_date
        if stop is not None:
            self.stop = stop
        if tag_action is not None:
            self.tag_action = tag_action
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if tags is not None:
            self.tags = tags
        if task_id is not None:
            self.task_id = task_id
        if tid is not None:
            self.tid = tid
        if uid is not None:
            self.uid = uid
        if user_id is not None:
            self.user_id = user_id
        if wid is not None:
            self.wid = wid
        if workspace_id is not None:
            self.workspace_id = workspace_id

    @property
    def billable(self):
        """Gets the billable of this TimeentryPayload.  # noqa: E501

        Whether the time entry is marked as billable, optional, default false  # noqa: E501

        :return: The billable of this TimeentryPayload.  # noqa: E501
        :rtype: bool
        """
        return self._billable

    @billable.setter
    def billable(self, billable):
        """Sets the billable of this TimeentryPayload.

        Whether the time entry is marked as billable, optional, default false  # noqa: E501

        :param billable: The billable of this TimeentryPayload.  # noqa: E501
        :type: bool
        """

        self._billable = billable

    @property
    def created_with(self):
        """Gets the created_with of this TimeentryPayload.  # noqa: E501

        Must be provided when creating a time entry and should identify the service/application used to create it  # noqa: E501

        :return: The created_with of this TimeentryPayload.  # noqa: E501
        :rtype: str
        """
        return self._created_with

    @created_with.setter
    def created_with(self, created_with):
        """Sets the created_with of this TimeentryPayload.

        Must be provided when creating a time entry and should identify the service/application used to create it  # noqa: E501

        :param created_with: The created_with of this TimeentryPayload.  # noqa: E501
        :type: str
        """

        self._created_with = created_with

    @property
    def description(self):
        """Gets the description of this TimeentryPayload.  # noqa: E501

        Time entry description, optional  # noqa: E501

        :return: The description of this TimeentryPayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TimeentryPayload.

        Time entry description, optional  # noqa: E501

        :param description: The description of this TimeentryPayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def duration(self):
        """Gets the duration of this TimeentryPayload.  # noqa: E501

        Time entry duration. For running entries should be negative, preferable -1  # noqa: E501

        :return: The duration of this TimeentryPayload.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TimeentryPayload.

        Time entry duration. For running entries should be negative, preferable -1  # noqa: E501

        :param duration: The duration of this TimeentryPayload.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def duronly(self):
        """Gets the duronly of this TimeentryPayload.  # noqa: E501

        Deprecated: Used to create a time entry with a duration but without a stop time. This parameter can be ignored.  # noqa: E501

        :return: The duronly of this TimeentryPayload.  # noqa: E501
        :rtype: bool
        """
        return self._duronly

    @duronly.setter
    def duronly(self, duronly):
        """Sets the duronly of this TimeentryPayload.

        Deprecated: Used to create a time entry with a duration but without a stop time. This parameter can be ignored.  # noqa: E501

        :param duronly: The duronly of this TimeentryPayload.  # noqa: E501
        :type: bool
        """

        self._duronly = duronly

    @property
    def pid(self):
        """Gets the pid of this TimeentryPayload.  # noqa: E501

        Project ID, legacy field  # noqa: E501

        :return: The pid of this TimeentryPayload.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this TimeentryPayload.

        Project ID, legacy field  # noqa: E501

        :param pid: The pid of this TimeentryPayload.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def project_id(self):
        """Gets the project_id of this TimeentryPayload.  # noqa: E501

        Project ID, optional  # noqa: E501

        :return: The project_id of this TimeentryPayload.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this TimeentryPayload.

        Project ID, optional  # noqa: E501

        :param project_id: The project_id of this TimeentryPayload.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def shared_with_user_ids(self):
        """Gets the shared_with_user_ids of this TimeentryPayload.  # noqa: E501

        List of user IDs to share this time entry with  # noqa: E501

        :return: The shared_with_user_ids of this TimeentryPayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._shared_with_user_ids

    @shared_with_user_ids.setter
    def shared_with_user_ids(self, shared_with_user_ids):
        """Sets the shared_with_user_ids of this TimeentryPayload.

        List of user IDs to share this time entry with  # noqa: E501

        :param shared_with_user_ids: The shared_with_user_ids of this TimeentryPayload.  # noqa: E501
        :type: list[int]
        """

        self._shared_with_user_ids = shared_with_user_ids

    @property
    def start(self):
        """Gets the start of this TimeentryPayload.  # noqa: E501

        Start time in UTC, required for creation. Format: 2006-01-02T15:04:05Z  # noqa: E501

        :return: The start of this TimeentryPayload.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this TimeentryPayload.

        Start time in UTC, required for creation. Format: 2006-01-02T15:04:05Z  # noqa: E501

        :param start: The start of this TimeentryPayload.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def start_date(self):
        """Gets the start_date of this TimeentryPayload.  # noqa: E501

        If provided during creation, the date part will take precedence over the date part of \"start\". Format: 2006-11-07  # noqa: E501

        :return: The start_date of this TimeentryPayload.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TimeentryPayload.

        If provided during creation, the date part will take precedence over the date part of \"start\". Format: 2006-11-07  # noqa: E501

        :param start_date: The start_date of this TimeentryPayload.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def stop(self):
        """Gets the stop of this TimeentryPayload.  # noqa: E501

        Stop time in UTC, can be omitted if it's still running or created with \"duration\". If \"stop\" and \"duration\" are provided, values must be consistent (start + duration == stop)  # noqa: E501

        :return: The stop of this TimeentryPayload.  # noqa: E501
        :rtype: str
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """Sets the stop of this TimeentryPayload.

        Stop time in UTC, can be omitted if it's still running or created with \"duration\". If \"stop\" and \"duration\" are provided, values must be consistent (start + duration == stop)  # noqa: E501

        :param stop: The stop of this TimeentryPayload.  # noqa: E501
        :type: str
        """

        self._stop = stop

    @property
    def tag_action(self):
        """Gets the tag_action of this TimeentryPayload.  # noqa: E501

        Can be \"add\" or \"delete\". Used when updating an existing time entry  # noqa: E501

        :return: The tag_action of this TimeentryPayload.  # noqa: E501
        :rtype: str
        """
        return self._tag_action

    @tag_action.setter
    def tag_action(self, tag_action):
        """Sets the tag_action of this TimeentryPayload.

        Can be \"add\" or \"delete\". Used when updating an existing time entry  # noqa: E501

        :param tag_action: The tag_action of this TimeentryPayload.  # noqa: E501
        :type: str
        """

        self._tag_action = tag_action

    @property
    def tag_ids(self):
        """Gets the tag_ids of this TimeentryPayload.  # noqa: E501

        IDs of tags to add/remove  # noqa: E501

        :return: The tag_ids of this TimeentryPayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this TimeentryPayload.

        IDs of tags to add/remove  # noqa: E501

        :param tag_ids: The tag_ids of this TimeentryPayload.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def tags(self):
        """Gets the tags of this TimeentryPayload.  # noqa: E501

        Names of tags to add/remove. If name does not exist as tag, one will be created automatically  # noqa: E501

        :return: The tags of this TimeentryPayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TimeentryPayload.

        Names of tags to add/remove. If name does not exist as tag, one will be created automatically  # noqa: E501

        :param tags: The tags of this TimeentryPayload.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def task_id(self):
        """Gets the task_id of this TimeentryPayload.  # noqa: E501

        Task ID, optional  # noqa: E501

        :return: The task_id of this TimeentryPayload.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TimeentryPayload.

        Task ID, optional  # noqa: E501

        :param task_id: The task_id of this TimeentryPayload.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def tid(self):
        """Gets the tid of this TimeentryPayload.  # noqa: E501

        Task ID, legacy field  # noqa: E501

        :return: The tid of this TimeentryPayload.  # noqa: E501
        :rtype: int
        """
        return self._tid

    @tid.setter
    def tid(self, tid):
        """Sets the tid of this TimeentryPayload.

        Task ID, legacy field  # noqa: E501

        :param tid: The tid of this TimeentryPayload.  # noqa: E501
        :type: int
        """

        self._tid = tid

    @property
    def uid(self):
        """Gets the uid of this TimeentryPayload.  # noqa: E501

        Time Entry creator ID, legacy field  # noqa: E501

        :return: The uid of this TimeentryPayload.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this TimeentryPayload.

        Time Entry creator ID, legacy field  # noqa: E501

        :param uid: The uid of this TimeentryPayload.  # noqa: E501
        :type: int
        """

        self._uid = uid

    @property
    def user_id(self):
        """Gets the user_id of this TimeentryPayload.  # noqa: E501

        Time Entry creator ID, if omitted will use the requester user ID  # noqa: E501

        :return: The user_id of this TimeentryPayload.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TimeentryPayload.

        Time Entry creator ID, if omitted will use the requester user ID  # noqa: E501

        :param user_id: The user_id of this TimeentryPayload.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def wid(self):
        """Gets the wid of this TimeentryPayload.  # noqa: E501

        Workspace ID, legacy field  # noqa: E501

        :return: The wid of this TimeentryPayload.  # noqa: E501
        :rtype: int
        """
        return self._wid

    @wid.setter
    def wid(self, wid):
        """Sets the wid of this TimeentryPayload.

        Workspace ID, legacy field  # noqa: E501

        :param wid: The wid of this TimeentryPayload.  # noqa: E501
        :type: int
        """

        self._wid = wid

    @property
    def workspace_id(self):
        """Gets the workspace_id of this TimeentryPayload.  # noqa: E501

        Workspace ID, required  # noqa: E501

        :return: The workspace_id of this TimeentryPayload.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this TimeentryPayload.

        Workspace ID, required  # noqa: E501

        :param workspace_id: The workspace_id of this TimeentryPayload.  # noqa: E501
        :type: int
        """

        self._workspace_id = workspace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(TimeentryPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeentryPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeentryPayload):
            return True

        return self.to_dict() != other.to_dict()
