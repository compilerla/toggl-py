"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

from __future__ import annotations  # noqa: F401
import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration


class TimesheetsAPITimesheet:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "approved_or_rejected_at": "str",
        "approved_or_rejected_id": "int",
        "approved_or_rejected_name": "str",
        "approver_id": "int",
        "approver_name": "str",
        "end_date": "str",
        "member_id": "int",
        "member_name": "str",
        "period_editable": "bool",
        "period_end": "str",
        "period_locked": "bool",
        "period_start": "str",
        "periodicity": "str",
        "rejection_comment": "str",
        "reminder_day": "str",
        "reminder_sent_at": "str",
        "reminder_time": "str",
        "start_date": "str",
        "status": "str",
        "submitted_at": "str",
        "timesheet_setup_id": "int",
        "working_hours_in_minutes": "int",
        "workspace_id": "int",
    }

    attribute_map = {
        "approved_or_rejected_at": "approved_or_rejected_at",
        "approved_or_rejected_id": "approved_or_rejected_id",
        "approved_or_rejected_name": "approved_or_rejected_name",
        "approver_id": "approver_id",
        "approver_name": "approver_name",
        "end_date": "end_date",
        "member_id": "member_id",
        "member_name": "member_name",
        "period_editable": "period_editable",
        "period_end": "period_end",
        "period_locked": "period_locked",
        "period_start": "period_start",
        "periodicity": "periodicity",
        "rejection_comment": "rejection_comment",
        "reminder_day": "reminder_day",
        "reminder_sent_at": "reminder_sent_at",
        "reminder_time": "reminder_time",
        "start_date": "start_date",
        "status": "status",
        "submitted_at": "submitted_at",
        "timesheet_setup_id": "timesheet_setup_id",
        "working_hours_in_minutes": "working_hours_in_minutes",
        "workspace_id": "workspace_id",
    }

    def __init__(
        self,
        approved_or_rejected_at: str = None,
        approved_or_rejected_id: int = None,
        approved_or_rejected_name: str = None,
        approver_id: int = None,
        approver_name: str = None,
        end_date: str = None,
        member_id: int = None,
        member_name: str = None,
        period_editable: bool = None,
        period_end: str = None,
        period_locked: bool = None,
        period_start: str = None,
        periodicity: str = None,
        rejection_comment: str = None,
        reminder_day: str = None,
        reminder_sent_at: str = None,
        reminder_time: str = None,
        start_date: str = None,
        status: str = None,
        submitted_at: str = None,
        timesheet_setup_id: int = None,
        working_hours_in_minutes: int = None,
        workspace_id: int = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        TimesheetsAPITimesheet - a model defined in Swagger

        Parameters:
          approved_or_rejected_at (str): Optional
          approved_or_rejected_id (int): Optional
          approved_or_rejected_name (str): Optional
          approver_id (int): Optional
          approver_name (str): Optional
          end_date (str): Optional
          member_id (int): Optional
          member_name (str): Optional
          period_editable (bool): Optional
          period_end (str): Optional
          period_locked (bool): Optional
          period_start (str): Optional
          periodicity (str): Optional
          rejection_comment (str): Optional
          reminder_day (str): Optional
          reminder_sent_at (str): Optional
          reminder_time (str): Optional
          start_date (str): Optional
          status (str): Optional
          submitted_at (str): Optional
          timesheet_setup_id (int): Optional
          working_hours_in_minutes (int): Optional
          workspace_id (int): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._approved_or_rejected_at = None
        self._approved_or_rejected_id = None
        self._approved_or_rejected_name = None
        self._approver_id = None
        self._approver_name = None
        self._end_date = None
        self._member_id = None
        self._member_name = None
        self._period_editable = None
        self._period_end = None
        self._period_locked = None
        self._period_start = None
        self._periodicity = None
        self._rejection_comment = None
        self._reminder_day = None
        self._reminder_sent_at = None
        self._reminder_time = None
        self._start_date = None
        self._status = None
        self._submitted_at = None
        self._timesheet_setup_id = None
        self._working_hours_in_minutes = None
        self._workspace_id = None
        self.discriminator = None

        if approved_or_rejected_at is not None:
            self.approved_or_rejected_at = approved_or_rejected_at
        if approved_or_rejected_id is not None:
            self.approved_or_rejected_id = approved_or_rejected_id
        if approved_or_rejected_name is not None:
            self.approved_or_rejected_name = approved_or_rejected_name
        if approver_id is not None:
            self.approver_id = approver_id
        if approver_name is not None:
            self.approver_name = approver_name
        if end_date is not None:
            self.end_date = end_date
        if member_id is not None:
            self.member_id = member_id
        if member_name is not None:
            self.member_name = member_name
        if period_editable is not None:
            self.period_editable = period_editable
        if period_end is not None:
            self.period_end = period_end
        if period_locked is not None:
            self.period_locked = period_locked
        if period_start is not None:
            self.period_start = period_start
        if periodicity is not None:
            self.periodicity = periodicity
        if rejection_comment is not None:
            self.rejection_comment = rejection_comment
        if reminder_day is not None:
            self.reminder_day = reminder_day
        if reminder_sent_at is not None:
            self.reminder_sent_at = reminder_sent_at
        if reminder_time is not None:
            self.reminder_time = reminder_time
        if start_date is not None:
            self.start_date = start_date
        if status is not None:
            self.status = status
        if submitted_at is not None:
            self.submitted_at = submitted_at
        if timesheet_setup_id is not None:
            self.timesheet_setup_id = timesheet_setup_id
        if working_hours_in_minutes is not None:
            self.working_hours_in_minutes = working_hours_in_minutes
        if workspace_id is not None:
            self.workspace_id = workspace_id

    @property
    def approved_or_rejected_at(self) -> str:
        """Gets the approved_or_rejected_at of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The approved_or_rejected_at of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: str
        """
        return self._approved_or_rejected_at

    @approved_or_rejected_at.setter
    def approved_or_rejected_at(self, approved_or_rejected_at: str):
        """Sets the approved_or_rejected_at of this TimesheetsAPITimesheet.


        :param approved_or_rejected_at: The approved_or_rejected_at of this TimesheetsAPITimesheet.  # noqa: E501
        :type: str
        """

        self._approved_or_rejected_at = approved_or_rejected_at

    @property
    def approved_or_rejected_id(self) -> int:
        """Gets the approved_or_rejected_id of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The approved_or_rejected_id of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: int
        """
        return self._approved_or_rejected_id

    @approved_or_rejected_id.setter
    def approved_or_rejected_id(self, approved_or_rejected_id: int):
        """Sets the approved_or_rejected_id of this TimesheetsAPITimesheet.


        :param approved_or_rejected_id: The approved_or_rejected_id of this TimesheetsAPITimesheet.  # noqa: E501
        :type: int
        """

        self._approved_or_rejected_id = approved_or_rejected_id

    @property
    def approved_or_rejected_name(self) -> str:
        """Gets the approved_or_rejected_name of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The approved_or_rejected_name of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: str
        """
        return self._approved_or_rejected_name

    @approved_or_rejected_name.setter
    def approved_or_rejected_name(self, approved_or_rejected_name: str):
        """Sets the approved_or_rejected_name of this TimesheetsAPITimesheet.


        :param approved_or_rejected_name: The approved_or_rejected_name of this TimesheetsAPITimesheet.  # noqa: E501
        :type: str
        """

        self._approved_or_rejected_name = approved_or_rejected_name

    @property
    def approver_id(self) -> int:
        """Gets the approver_id of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The approver_id of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: int
        """
        return self._approver_id

    @approver_id.setter
    def approver_id(self, approver_id: int):
        """Sets the approver_id of this TimesheetsAPITimesheet.


        :param approver_id: The approver_id of this TimesheetsAPITimesheet.  # noqa: E501
        :type: int
        """

        self._approver_id = approver_id

    @property
    def approver_name(self) -> str:
        """Gets the approver_name of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The approver_name of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: str
        """
        return self._approver_name

    @approver_name.setter
    def approver_name(self, approver_name: str):
        """Sets the approver_name of this TimesheetsAPITimesheet.


        :param approver_name: The approver_name of this TimesheetsAPITimesheet.  # noqa: E501
        :type: str
        """

        self._approver_name = approver_name

    @property
    def end_date(self) -> str:
        """Gets the end_date of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The end_date of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: str):
        """Sets the end_date of this TimesheetsAPITimesheet.


        :param end_date: The end_date of this TimesheetsAPITimesheet.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def member_id(self) -> int:
        """Gets the member_id of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The member_id of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: int
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id: int):
        """Sets the member_id of this TimesheetsAPITimesheet.


        :param member_id: The member_id of this TimesheetsAPITimesheet.  # noqa: E501
        :type: int
        """

        self._member_id = member_id

    @property
    def member_name(self) -> str:
        """Gets the member_name of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The member_name of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: str
        """
        return self._member_name

    @member_name.setter
    def member_name(self, member_name: str):
        """Sets the member_name of this TimesheetsAPITimesheet.


        :param member_name: The member_name of this TimesheetsAPITimesheet.  # noqa: E501
        :type: str
        """

        self._member_name = member_name

    @property
    def period_editable(self) -> bool:
        """Gets the period_editable of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The period_editable of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: bool
        """
        return self._period_editable

    @period_editable.setter
    def period_editable(self, period_editable: bool):
        """Sets the period_editable of this TimesheetsAPITimesheet.


        :param period_editable: The period_editable of this TimesheetsAPITimesheet.  # noqa: E501
        :type: bool
        """

        self._period_editable = period_editable

    @property
    def period_end(self) -> str:
        """Gets the period_end of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The period_end of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: str
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end: str):
        """Sets the period_end of this TimesheetsAPITimesheet.


        :param period_end: The period_end of this TimesheetsAPITimesheet.  # noqa: E501
        :type: str
        """

        self._period_end = period_end

    @property
    def period_locked(self) -> bool:
        """Gets the period_locked of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The period_locked of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: bool
        """
        return self._period_locked

    @period_locked.setter
    def period_locked(self, period_locked: bool):
        """Sets the period_locked of this TimesheetsAPITimesheet.


        :param period_locked: The period_locked of this TimesheetsAPITimesheet.  # noqa: E501
        :type: bool
        """

        self._period_locked = period_locked

    @property
    def period_start(self) -> str:
        """Gets the period_start of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The period_start of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: str
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start: str):
        """Sets the period_start of this TimesheetsAPITimesheet.


        :param period_start: The period_start of this TimesheetsAPITimesheet.  # noqa: E501
        :type: str
        """

        self._period_start = period_start

    @property
    def periodicity(self) -> str:
        """Gets the periodicity of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The periodicity of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: str
        """
        return self._periodicity

    @periodicity.setter
    def periodicity(self, periodicity: str):
        """Sets the periodicity of this TimesheetsAPITimesheet.


        :param periodicity: The periodicity of this TimesheetsAPITimesheet.  # noqa: E501
        :type: str
        """

        self._periodicity = periodicity

    @property
    def rejection_comment(self) -> str:
        """Gets the rejection_comment of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The rejection_comment of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: str
        """
        return self._rejection_comment

    @rejection_comment.setter
    def rejection_comment(self, rejection_comment: str):
        """Sets the rejection_comment of this TimesheetsAPITimesheet.


        :param rejection_comment: The rejection_comment of this TimesheetsAPITimesheet.  # noqa: E501
        :type: str
        """

        self._rejection_comment = rejection_comment

    @property
    def reminder_day(self) -> str:
        """Gets the reminder_day of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The reminder_day of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: str
        """
        return self._reminder_day

    @reminder_day.setter
    def reminder_day(self, reminder_day: str):
        """Sets the reminder_day of this TimesheetsAPITimesheet.


        :param reminder_day: The reminder_day of this TimesheetsAPITimesheet.  # noqa: E501
        :type: str
        """

        self._reminder_day = reminder_day

    @property
    def reminder_sent_at(self) -> str:
        """Gets the reminder_sent_at of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The reminder_sent_at of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: str
        """
        return self._reminder_sent_at

    @reminder_sent_at.setter
    def reminder_sent_at(self, reminder_sent_at: str):
        """Sets the reminder_sent_at of this TimesheetsAPITimesheet.


        :param reminder_sent_at: The reminder_sent_at of this TimesheetsAPITimesheet.  # noqa: E501
        :type: str
        """

        self._reminder_sent_at = reminder_sent_at

    @property
    def reminder_time(self) -> str:
        """Gets the reminder_time of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The reminder_time of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: str
        """
        return self._reminder_time

    @reminder_time.setter
    def reminder_time(self, reminder_time: str):
        """Sets the reminder_time of this TimesheetsAPITimesheet.


        :param reminder_time: The reminder_time of this TimesheetsAPITimesheet.  # noqa: E501
        :type: str
        """

        self._reminder_time = reminder_time

    @property
    def start_date(self) -> str:
        """Gets the start_date of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The start_date of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: str):
        """Sets the start_date of this TimesheetsAPITimesheet.


        :param start_date: The start_date of this TimesheetsAPITimesheet.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def status(self) -> str:
        """Gets the status of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The status of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this TimesheetsAPITimesheet.


        :param status: The status of this TimesheetsAPITimesheet.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def submitted_at(self) -> str:
        """Gets the submitted_at of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The submitted_at of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: str
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at: str):
        """Sets the submitted_at of this TimesheetsAPITimesheet.


        :param submitted_at: The submitted_at of this TimesheetsAPITimesheet.  # noqa: E501
        :type: str
        """

        self._submitted_at = submitted_at

    @property
    def timesheet_setup_id(self) -> int:
        """Gets the timesheet_setup_id of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The timesheet_setup_id of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: int
        """
        return self._timesheet_setup_id

    @timesheet_setup_id.setter
    def timesheet_setup_id(self, timesheet_setup_id: int):
        """Sets the timesheet_setup_id of this TimesheetsAPITimesheet.


        :param timesheet_setup_id: The timesheet_setup_id of this TimesheetsAPITimesheet.  # noqa: E501
        :type: int
        """

        self._timesheet_setup_id = timesheet_setup_id

    @property
    def working_hours_in_minutes(self) -> int:
        """Gets the working_hours_in_minutes of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The working_hours_in_minutes of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: int
        """
        return self._working_hours_in_minutes

    @working_hours_in_minutes.setter
    def working_hours_in_minutes(self, working_hours_in_minutes: int):
        """Sets the working_hours_in_minutes of this TimesheetsAPITimesheet.


        :param working_hours_in_minutes: The working_hours_in_minutes of this TimesheetsAPITimesheet.  # noqa: E501
        :type: int
        """

        self._working_hours_in_minutes = working_hours_in_minutes

    @property
    def workspace_id(self) -> int:
        """Gets the workspace_id of this TimesheetsAPITimesheet.  # noqa: E501


        :return: The workspace_id of this TimesheetsAPITimesheet.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id: int):
        """Sets the workspace_id of this TimesheetsAPITimesheet.


        :param workspace_id: The workspace_id of this TimesheetsAPITimesheet.  # noqa: E501
        :type: int
        """

        self._workspace_id = workspace_id

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(TimesheetsAPITimesheet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimesheetsAPITimesheet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimesheetsAPITimesheet):
            return True

        return self.to_dict() != other.to_dict()
