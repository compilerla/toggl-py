"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration


class TimesheetsPutTimesheetPayload:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {"rejection_comment": "str", "status": "str"}

    attribute_map = {"rejection_comment": "rejection_comment", "status": "status"}

    def __init__(self, rejection_comment: str = None, status: str = None, _configuration: Configuration = None):  # noqa: E501
        """
        TimesheetsPutTimesheetPayload - a model defined in Swagger

        Parameters:
          rejection_comment (str): Optional
          status (str): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._rejection_comment = None
        self._status = None
        self.discriminator = None

        if rejection_comment is not None:
            self.rejection_comment = rejection_comment
        if status is not None:
            self.status = status

    @property
    def rejection_comment(self) -> str:
        """Gets the rejection_comment of this TimesheetsPutTimesheetPayload.  # noqa: E501


        :return: The rejection_comment of this TimesheetsPutTimesheetPayload.  # noqa: E501
        :rtype: str
        """
        return self._rejection_comment

    @rejection_comment.setter
    def rejection_comment(self, rejection_comment: str):
        """Sets the rejection_comment of this TimesheetsPutTimesheetPayload.


        :param rejection_comment: The rejection_comment of this TimesheetsPutTimesheetPayload.  # noqa: E501
        :type: str
        """

        self._rejection_comment = rejection_comment

    @property
    def status(self) -> str:
        """Gets the status of this TimesheetsPutTimesheetPayload.  # noqa: E501


        :return: The status of this TimesheetsPutTimesheetPayload.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this TimesheetsPutTimesheetPayload.


        :param status: The status of this TimesheetsPutTimesheetPayload.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(TimesheetsPutTimesheetPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimesheetsPutTimesheetPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimesheetsPutTimesheetPayload):
            return True

        return self.to_dict() != other.to_dict()
