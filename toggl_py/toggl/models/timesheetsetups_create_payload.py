"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class TimesheetsetupsCreatePayload:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "approver_id": "int",
        "member_ids": "list[int]",
        "periodicity": "str",
        "reminder_day": "str",
        "reminder_time": "str",
        "start_date": "str",
    }

    attribute_map = {
        "approver_id": "approver_id",
        "member_ids": "member_ids",
        "periodicity": "periodicity",
        "reminder_day": "reminder_day",
        "reminder_time": "reminder_time",
        "start_date": "start_date",
    }

    def __init__(
        self,
        approver_id=None,
        member_ids=None,
        periodicity=None,
        reminder_day=None,
        reminder_time=None,
        start_date=None,
        _configuration=None,
    ):  # noqa: E501
        """TimesheetsetupsCreatePayload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._approver_id = None
        self._member_ids = None
        self._periodicity = None
        self._reminder_day = None
        self._reminder_time = None
        self._start_date = None
        self.discriminator = None

        if approver_id is not None:
            self.approver_id = approver_id
        if member_ids is not None:
            self.member_ids = member_ids
        if periodicity is not None:
            self.periodicity = periodicity
        if reminder_day is not None:
            self.reminder_day = reminder_day
        if reminder_time is not None:
            self.reminder_time = reminder_time
        if start_date is not None:
            self.start_date = start_date

    @property
    def approver_id(self):
        """Gets the approver_id of this TimesheetsetupsCreatePayload.  # noqa: E501


        :return: The approver_id of this TimesheetsetupsCreatePayload.  # noqa: E501
        :rtype: int
        """
        return self._approver_id

    @approver_id.setter
    def approver_id(self, approver_id):
        """Sets the approver_id of this TimesheetsetupsCreatePayload.


        :param approver_id: The approver_id of this TimesheetsetupsCreatePayload.  # noqa: E501
        :type: int
        """

        self._approver_id = approver_id

    @property
    def member_ids(self):
        """Gets the member_ids of this TimesheetsetupsCreatePayload.  # noqa: E501


        :return: The member_ids of this TimesheetsetupsCreatePayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._member_ids

    @member_ids.setter
    def member_ids(self, member_ids):
        """Sets the member_ids of this TimesheetsetupsCreatePayload.


        :param member_ids: The member_ids of this TimesheetsetupsCreatePayload.  # noqa: E501
        :type: list[int]
        """

        self._member_ids = member_ids

    @property
    def periodicity(self):
        """Gets the periodicity of this TimesheetsetupsCreatePayload.  # noqa: E501


        :return: The periodicity of this TimesheetsetupsCreatePayload.  # noqa: E501
        :rtype: str
        """
        return self._periodicity

    @periodicity.setter
    def periodicity(self, periodicity):
        """Sets the periodicity of this TimesheetsetupsCreatePayload.


        :param periodicity: The periodicity of this TimesheetsetupsCreatePayload.  # noqa: E501
        :type: str
        """

        self._periodicity = periodicity

    @property
    def reminder_day(self):
        """Gets the reminder_day of this TimesheetsetupsCreatePayload.  # noqa: E501


        :return: The reminder_day of this TimesheetsetupsCreatePayload.  # noqa: E501
        :rtype: str
        """
        return self._reminder_day

    @reminder_day.setter
    def reminder_day(self, reminder_day):
        """Sets the reminder_day of this TimesheetsetupsCreatePayload.


        :param reminder_day: The reminder_day of this TimesheetsetupsCreatePayload.  # noqa: E501
        :type: str
        """

        self._reminder_day = reminder_day

    @property
    def reminder_time(self):
        """Gets the reminder_time of this TimesheetsetupsCreatePayload.  # noqa: E501


        :return: The reminder_time of this TimesheetsetupsCreatePayload.  # noqa: E501
        :rtype: str
        """
        return self._reminder_time

    @reminder_time.setter
    def reminder_time(self, reminder_time):
        """Sets the reminder_time of this TimesheetsetupsCreatePayload.


        :param reminder_time: The reminder_time of this TimesheetsetupsCreatePayload.  # noqa: E501
        :type: str
        """

        self._reminder_time = reminder_time

    @property
    def start_date(self):
        """Gets the start_date of this TimesheetsetupsCreatePayload.  # noqa: E501


        :return: The start_date of this TimesheetsetupsCreatePayload.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TimesheetsetupsCreatePayload.


        :param start_date: The start_date of this TimesheetsetupsCreatePayload.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(TimesheetsetupsCreatePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimesheetsetupsCreatePayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimesheetsetupsCreatePayload):
            return True

        return self.to_dict() != other.to_dict()
