"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class TotalsGraph:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "billable_amount_in_cents": "int",
        "by_rate": "dict(str, int)",
        "labour_cost_in_cents": "int",
        "seconds": "int",
    }

    attribute_map = {
        "billable_amount_in_cents": "billable_amount_in_cents",
        "by_rate": "by_rate",
        "labour_cost_in_cents": "labour_cost_in_cents",
        "seconds": "seconds",
    }

    def __init__(
        self, billable_amount_in_cents=None, by_rate=None, labour_cost_in_cents=None, seconds=None, _configuration=None
    ):  # noqa: E501
        """TotalsGraph - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._billable_amount_in_cents = None
        self._by_rate = None
        self._labour_cost_in_cents = None
        self._seconds = None
        self.discriminator = None

        if billable_amount_in_cents is not None:
            self.billable_amount_in_cents = billable_amount_in_cents
        if by_rate is not None:
            self.by_rate = by_rate
        if labour_cost_in_cents is not None:
            self.labour_cost_in_cents = labour_cost_in_cents
        if seconds is not None:
            self.seconds = seconds

    @property
    def billable_amount_in_cents(self):
        """Gets the billable_amount_in_cents of this TotalsGraph.  # noqa: E501


        :return: The billable_amount_in_cents of this TotalsGraph.  # noqa: E501
        :rtype: int
        """
        return self._billable_amount_in_cents

    @billable_amount_in_cents.setter
    def billable_amount_in_cents(self, billable_amount_in_cents):
        """Sets the billable_amount_in_cents of this TotalsGraph.


        :param billable_amount_in_cents: The billable_amount_in_cents of this TotalsGraph.  # noqa: E501
        :type: int
        """

        self._billable_amount_in_cents = billable_amount_in_cents

    @property
    def by_rate(self):
        """Gets the by_rate of this TotalsGraph.  # noqa: E501


        :return: The by_rate of this TotalsGraph.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._by_rate

    @by_rate.setter
    def by_rate(self, by_rate):
        """Sets the by_rate of this TotalsGraph.


        :param by_rate: The by_rate of this TotalsGraph.  # noqa: E501
        :type: dict(str, int)
        """

        self._by_rate = by_rate

    @property
    def labour_cost_in_cents(self):
        """Gets the labour_cost_in_cents of this TotalsGraph.  # noqa: E501


        :return: The labour_cost_in_cents of this TotalsGraph.  # noqa: E501
        :rtype: int
        """
        return self._labour_cost_in_cents

    @labour_cost_in_cents.setter
    def labour_cost_in_cents(self, labour_cost_in_cents):
        """Sets the labour_cost_in_cents of this TotalsGraph.


        :param labour_cost_in_cents: The labour_cost_in_cents of this TotalsGraph.  # noqa: E501
        :type: int
        """

        self._labour_cost_in_cents = labour_cost_in_cents

    @property
    def seconds(self):
        """Gets the seconds of this TotalsGraph.  # noqa: E501


        :return: The seconds of this TotalsGraph.  # noqa: E501
        :rtype: int
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds):
        """Sets the seconds of this TotalsGraph.


        :param seconds: The seconds of this TotalsGraph.  # noqa: E501
        :type: int
        """

        self._seconds = seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(TotalsGraph, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TotalsGraph):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TotalsGraph):
            return True

        return self.to_dict() != other.to_dict()
