"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401
from datetime import datetime  # noqa: F401
from typing import Any

from toggl.configuration import Configuration
from toggl.models.base_billable_hourly_rate import BaseBillableHourlyRate  # noqa: F401
from toggl.models.totals_graph import TotalsGraph  # noqa: F401


class TotalsReportData:
    """
    Attributes:
      swagger_types (dict): The key is attr name
                            and the value is attr type.
      attribute_map (dict): The key is attr name
                            and the value is json key in definition.
    """

    swagger_types = {
        "billable_amount_in_cents": "int",
        "graph": "list[TotalsGraph]",
        "labour_cost_in_cents": "int",
        "rates": "list[BaseBillableHourlyRate]",
        "resolution": "str",
        "seconds": "int",
        "tracked_days": "int",
    }

    attribute_map = {
        "billable_amount_in_cents": "billable_amount_in_cents",
        "graph": "graph",
        "labour_cost_in_cents": "labour_cost_in_cents",
        "rates": "rates",
        "resolution": "resolution",
        "seconds": "seconds",
        "tracked_days": "tracked_days",
    }

    def __init__(
        self,
        billable_amount_in_cents: int = None,
        graph: list[TotalsGraph] = None,
        labour_cost_in_cents: int = None,
        rates: list[BaseBillableHourlyRate] = None,
        resolution: str = None,
        seconds: int = None,
        tracked_days: int = None,
        _configuration: Configuration = None,  # noqa: E501
    ):
        """
        TotalsReportData - a model defined in Swagger

        Parameters:
          billable_amount_in_cents (int): Optional
          graph (list[TotalsGraph]): Optional
          labour_cost_in_cents (int): Optional
          rates (list[BaseBillableHourlyRate]): Optional
          resolution (str): Optional
          seconds (int): Optional
          tracked_days (int): Optional
        """
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._billable_amount_in_cents = None
        self._graph = None
        self._labour_cost_in_cents = None
        self._rates = None
        self._resolution = None
        self._seconds = None
        self._tracked_days = None
        self.discriminator = None

        if billable_amount_in_cents is not None:
            self.billable_amount_in_cents = billable_amount_in_cents
        if graph is not None:
            self.graph = graph
        if labour_cost_in_cents is not None:
            self.labour_cost_in_cents = labour_cost_in_cents
        if rates is not None:
            self.rates = rates
        if resolution is not None:
            self.resolution = resolution
        if seconds is not None:
            self.seconds = seconds
        if tracked_days is not None:
            self.tracked_days = tracked_days

    @property
    def billable_amount_in_cents(self) -> int:
        """Gets the billable_amount_in_cents of this TotalsReportData.  # noqa: E501


        :return: The billable_amount_in_cents of this TotalsReportData.  # noqa: E501
        :rtype: int
        """
        return self._billable_amount_in_cents

    @billable_amount_in_cents.setter
    def billable_amount_in_cents(self, billable_amount_in_cents: int):
        """Sets the billable_amount_in_cents of this TotalsReportData.


        :param billable_amount_in_cents: The billable_amount_in_cents of this TotalsReportData.  # noqa: E501
        :type: int
        """

        self._billable_amount_in_cents = billable_amount_in_cents

    @property
    def graph(self) -> list[TotalsGraph]:
        """Gets the graph of this TotalsReportData.  # noqa: E501


        :return: The graph of this TotalsReportData.  # noqa: E501
        :rtype: list[TotalsGraph]
        """
        return self._graph

    @graph.setter
    def graph(self, graph: list[TotalsGraph]):
        """Sets the graph of this TotalsReportData.


        :param graph: The graph of this TotalsReportData.  # noqa: E501
        :type: list[TotalsGraph]
        """

        self._graph = graph

    @property
    def labour_cost_in_cents(self) -> int:
        """Gets the labour_cost_in_cents of this TotalsReportData.  # noqa: E501


        :return: The labour_cost_in_cents of this TotalsReportData.  # noqa: E501
        :rtype: int
        """
        return self._labour_cost_in_cents

    @labour_cost_in_cents.setter
    def labour_cost_in_cents(self, labour_cost_in_cents: int):
        """Sets the labour_cost_in_cents of this TotalsReportData.


        :param labour_cost_in_cents: The labour_cost_in_cents of this TotalsReportData.  # noqa: E501
        :type: int
        """

        self._labour_cost_in_cents = labour_cost_in_cents

    @property
    def rates(self) -> list[BaseBillableHourlyRate]:
        """Gets the rates of this TotalsReportData.  # noqa: E501


        :return: The rates of this TotalsReportData.  # noqa: E501
        :rtype: list[BaseBillableHourlyRate]
        """
        return self._rates

    @rates.setter
    def rates(self, rates: list[BaseBillableHourlyRate]):
        """Sets the rates of this TotalsReportData.


        :param rates: The rates of this TotalsReportData.  # noqa: E501
        :type: list[BaseBillableHourlyRate]
        """

        self._rates = rates

    @property
    def resolution(self) -> str:
        """Gets the resolution of this TotalsReportData.  # noqa: E501


        :return: The resolution of this TotalsReportData.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution: str):
        """Sets the resolution of this TotalsReportData.


        :param resolution: The resolution of this TotalsReportData.  # noqa: E501
        :type: str
        """

        self._resolution = resolution

    @property
    def seconds(self) -> int:
        """Gets the seconds of this TotalsReportData.  # noqa: E501


        :return: The seconds of this TotalsReportData.  # noqa: E501
        :rtype: int
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds: int):
        """Sets the seconds of this TotalsReportData.


        :param seconds: The seconds of this TotalsReportData.  # noqa: E501
        :type: int
        """

        self._seconds = seconds

    @property
    def tracked_days(self) -> int:
        """Gets the tracked_days of this TotalsReportData.  # noqa: E501


        :return: The tracked_days of this TotalsReportData.  # noqa: E501
        :rtype: int
        """
        return self._tracked_days

    @tracked_days.setter
    def tracked_days(self, tracked_days: int):
        """Sets the tracked_days of this TotalsReportData.


        :param tracked_days: The tracked_days of this TotalsReportData.  # noqa: E501
        :type: int
        """

        self._tracked_days = tracked_days

    def to_dict(self) -> dict[str, Any]:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(TotalsReportData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TotalsReportData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TotalsReportData):
            return True

        return self.to_dict() != other.to_dict()
