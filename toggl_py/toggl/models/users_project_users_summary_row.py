"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Generated by: https://github.com/compilerla/toggl-py
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class UsersProjectUsersSummaryRow:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {"billable_seconds": "int", "project_id": "int", "tracked_seconds": "int", "user_id": "int"}

    attribute_map = {
        "billable_seconds": "billable_seconds",
        "project_id": "project_id",
        "tracked_seconds": "tracked_seconds",
        "user_id": "user_id",
    }

    def __init__(
        self, billable_seconds=None, project_id=None, tracked_seconds=None, user_id=None, _configuration=None
    ):  # noqa: E501
        """UsersProjectUsersSummaryRow - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._billable_seconds = None
        self._project_id = None
        self._tracked_seconds = None
        self._user_id = None
        self.discriminator = None

        if billable_seconds is not None:
            self.billable_seconds = billable_seconds
        if project_id is not None:
            self.project_id = project_id
        if tracked_seconds is not None:
            self.tracked_seconds = tracked_seconds
        if user_id is not None:
            self.user_id = user_id

    @property
    def billable_seconds(self):
        """Gets the billable_seconds of this UsersProjectUsersSummaryRow.  # noqa: E501


        :return: The billable_seconds of this UsersProjectUsersSummaryRow.  # noqa: E501
        :rtype: int
        """
        return self._billable_seconds

    @billable_seconds.setter
    def billable_seconds(self, billable_seconds):
        """Sets the billable_seconds of this UsersProjectUsersSummaryRow.


        :param billable_seconds: The billable_seconds of this UsersProjectUsersSummaryRow.  # noqa: E501
        :type: int
        """

        self._billable_seconds = billable_seconds

    @property
    def project_id(self):
        """Gets the project_id of this UsersProjectUsersSummaryRow.  # noqa: E501


        :return: The project_id of this UsersProjectUsersSummaryRow.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this UsersProjectUsersSummaryRow.


        :param project_id: The project_id of this UsersProjectUsersSummaryRow.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def tracked_seconds(self):
        """Gets the tracked_seconds of this UsersProjectUsersSummaryRow.  # noqa: E501


        :return: The tracked_seconds of this UsersProjectUsersSummaryRow.  # noqa: E501
        :rtype: int
        """
        return self._tracked_seconds

    @tracked_seconds.setter
    def tracked_seconds(self, tracked_seconds):
        """Sets the tracked_seconds of this UsersProjectUsersSummaryRow.


        :param tracked_seconds: The tracked_seconds of this UsersProjectUsersSummaryRow.  # noqa: E501
        :type: int
        """

        self._tracked_seconds = tracked_seconds

    @property
    def user_id(self):
        """Gets the user_id of this UsersProjectUsersSummaryRow.  # noqa: E501


        :return: The user_id of this UsersProjectUsersSummaryRow.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UsersProjectUsersSummaryRow.


        :param user_id: The user_id of this UsersProjectUsersSummaryRow.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(UsersProjectUsersSummaryRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersProjectUsersSummaryRow):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UsersProjectUsersSummaryRow):
            return True

        return self.to_dict() != other.to_dict()
