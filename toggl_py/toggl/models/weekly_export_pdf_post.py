"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class WeeklyExportPDFPost:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "billable": "bool",
        "calculate": "str",
        "cents_separator": "str",
        "client_ids": "list[int]",
        "date_format": "str",
        "description": "str",
        "duration_format": "str",
        "end_date": "str",
        "group_by_task": "bool",
        "group_ids": "list[int]",
        "grouping": "str",
        "max_duration_seconds": "int",
        "min_duration_seconds": "int",
        "posted_fields": "list[str]",
        "project_ids": "list[int]",
        "rounding": "int",
        "rounding_minutes": "int",
        "start_time": "str",
        "start_date": "str",
        "tag_ids": "list[int]",
        "task_ids": "list[int]",
        "time_entry_ids": "list[int]",
        "user_ids": "list[int]",
    }

    attribute_map = {
        "billable": "billable",
        "calculate": "calculate",
        "cents_separator": "cents_separator",
        "client_ids": "client_ids",
        "date_format": "date_format",
        "description": "description",
        "duration_format": "duration_format",
        "end_date": "end_date",
        "group_by_task": "group_by_task",
        "group_ids": "group_ids",
        "grouping": "grouping",
        "max_duration_seconds": "max_duration_seconds",
        "min_duration_seconds": "min_duration_seconds",
        "posted_fields": "postedFields",
        "project_ids": "project_ids",
        "rounding": "rounding",
        "rounding_minutes": "rounding_minutes",
        "start_time": "startTime",
        "start_date": "start_date",
        "tag_ids": "tag_ids",
        "task_ids": "task_ids",
        "time_entry_ids": "time_entry_ids",
        "user_ids": "user_ids",
    }

    def __init__(
        self,
        billable=None,
        calculate=None,
        cents_separator=None,
        client_ids=None,
        date_format=None,
        description=None,
        duration_format=None,
        end_date=None,
        group_by_task=None,
        group_ids=None,
        grouping=None,
        max_duration_seconds=None,
        min_duration_seconds=None,
        posted_fields=None,
        project_ids=None,
        rounding=None,
        rounding_minutes=None,
        start_time=None,
        start_date=None,
        tag_ids=None,
        task_ids=None,
        time_entry_ids=None,
        user_ids=None,
        _configuration=None,
    ):  # noqa: E501
        """WeeklyExportPDFPost - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._billable = None
        self._calculate = None
        self._cents_separator = None
        self._client_ids = None
        self._date_format = None
        self._description = None
        self._duration_format = None
        self._end_date = None
        self._group_by_task = None
        self._group_ids = None
        self._grouping = None
        self._max_duration_seconds = None
        self._min_duration_seconds = None
        self._posted_fields = None
        self._project_ids = None
        self._rounding = None
        self._rounding_minutes = None
        self._start_time = None
        self._start_date = None
        self._tag_ids = None
        self._task_ids = None
        self._time_entry_ids = None
        self._user_ids = None
        self.discriminator = None

        if billable is not None:
            self.billable = billable
        if calculate is not None:
            self.calculate = calculate
        if cents_separator is not None:
            self.cents_separator = cents_separator
        if client_ids is not None:
            self.client_ids = client_ids
        if date_format is not None:
            self.date_format = date_format
        if description is not None:
            self.description = description
        if duration_format is not None:
            self.duration_format = duration_format
        if end_date is not None:
            self.end_date = end_date
        if group_by_task is not None:
            self.group_by_task = group_by_task
        if group_ids is not None:
            self.group_ids = group_ids
        if grouping is not None:
            self.grouping = grouping
        if max_duration_seconds is not None:
            self.max_duration_seconds = max_duration_seconds
        if min_duration_seconds is not None:
            self.min_duration_seconds = min_duration_seconds
        if posted_fields is not None:
            self.posted_fields = posted_fields
        if project_ids is not None:
            self.project_ids = project_ids
        if rounding is not None:
            self.rounding = rounding
        if rounding_minutes is not None:
            self.rounding_minutes = rounding_minutes
        if start_time is not None:
            self.start_time = start_time
        if start_date is not None:
            self.start_date = start_date
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if task_ids is not None:
            self.task_ids = task_ids
        if time_entry_ids is not None:
            self.time_entry_ids = time_entry_ids
        if user_ids is not None:
            self.user_ids = user_ids

    @property
    def billable(self):
        """Gets the billable of this WeeklyExportPDFPost.  # noqa: E501

        Whether the time entry is set as billable, optional, premium feature.  # noqa: E501

        :return: The billable of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: bool
        """
        return self._billable

    @billable.setter
    def billable(self, billable):
        """Sets the billable of this WeeklyExportPDFPost.

        Whether the time entry is set as billable, optional, premium feature.  # noqa: E501

        :param billable: The billable of this WeeklyExportPDFPost.  # noqa: E501
        :type: bool
        """

        self._billable = billable

    @property
    def calculate(self):
        """Gets the calculate of this WeeklyExportPDFPost.  # noqa: E501

        Calculate option, optional. Can be by time or amounts.  # noqa: E501

        :return: The calculate of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: str
        """
        return self._calculate

    @calculate.setter
    def calculate(self, calculate):
        """Sets the calculate of this WeeklyExportPDFPost.

        Calculate option, optional. Can be by time or amounts.  # noqa: E501

        :param calculate: The calculate of this WeeklyExportPDFPost.  # noqa: E501
        :type: str
        """

        self._calculate = calculate

    @property
    def cents_separator(self):
        """Gets the cents_separator of this WeeklyExportPDFPost.  # noqa: E501


        :return: The cents_separator of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: str
        """
        return self._cents_separator

    @cents_separator.setter
    def cents_separator(self, cents_separator):
        """Sets the cents_separator of this WeeklyExportPDFPost.


        :param cents_separator: The cents_separator of this WeeklyExportPDFPost.  # noqa: E501
        :type: str
        """

        self._cents_separator = cents_separator

    @property
    def client_ids(self):
        """Gets the client_ids of this WeeklyExportPDFPost.  # noqa: E501

        Client IDs, optional, filtering attribute. To filter records with no clients, use [null].  # noqa: E501

        :return: The client_ids of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: list[int]
        """
        return self._client_ids

    @client_ids.setter
    def client_ids(self, client_ids):
        """Sets the client_ids of this WeeklyExportPDFPost.

        Client IDs, optional, filtering attribute. To filter records with no clients, use [null].  # noqa: E501

        :param client_ids: The client_ids of this WeeklyExportPDFPost.  # noqa: E501
        :type: list[int]
        """

        self._client_ids = client_ids

    @property
    def date_format(self):
        """Gets the date_format of this WeeklyExportPDFPost.  # noqa: E501

        Date format, optional, default \"MM/DD/YYYY\". Can be \"MM/DD/YYYY\", \"DD-MM-YYYY\", \"MM-DD-YYYY\", \"YYYY-MM-DD\", \"DD/MM/YYYY\" or \"DD.MM.YYYY\".  # noqa: E501

        :return: The date_format of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this WeeklyExportPDFPost.

        Date format, optional, default \"MM/DD/YYYY\". Can be \"MM/DD/YYYY\", \"DD-MM-YYYY\", \"MM-DD-YYYY\", \"YYYY-MM-DD\", \"DD/MM/YYYY\" or \"DD.MM.YYYY\".  # noqa: E501

        :param date_format: The date_format of this WeeklyExportPDFPost.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def description(self):
        """Gets the description of this WeeklyExportPDFPost.  # noqa: E501

        Description, optional, filtering attribute.  # noqa: E501

        :return: The description of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WeeklyExportPDFPost.

        Description, optional, filtering attribute.  # noqa: E501

        :param description: The description of this WeeklyExportPDFPost.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def duration_format(self):
        """Gets the duration_format of this WeeklyExportPDFPost.  # noqa: E501

        Duration format, optional, default \"classic\". Can be \"classic\", \"decimal\" or \"improved\".  # noqa: E501

        :return: The duration_format of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: str
        """
        return self._duration_format

    @duration_format.setter
    def duration_format(self, duration_format):
        """Sets the duration_format of this WeeklyExportPDFPost.

        Duration format, optional, default \"classic\". Can be \"classic\", \"decimal\" or \"improved\".  # noqa: E501

        :param duration_format: The duration_format of this WeeklyExportPDFPost.  # noqa: E501
        :type: str
        """

        self._duration_format = duration_format

    @property
    def end_date(self):
        """Gets the end_date of this WeeklyExportPDFPost.  # noqa: E501

        End date, example time.DateOnly. Should be greater than Start date.  # noqa: E501

        :return: The end_date of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this WeeklyExportPDFPost.

        End date, example time.DateOnly. Should be greater than Start date.  # noqa: E501

        :param end_date: The end_date of this WeeklyExportPDFPost.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def group_by_task(self):
        """Gets the group_by_task of this WeeklyExportPDFPost.  # noqa: E501

        GroupByTask tells the weekly report to return the data grouped by all the usual groups plus planned task.  # noqa: E501

        :return: The group_by_task of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: bool
        """
        return self._group_by_task

    @group_by_task.setter
    def group_by_task(self, group_by_task):
        """Sets the group_by_task of this WeeklyExportPDFPost.

        GroupByTask tells the weekly report to return the data grouped by all the usual groups plus planned task.  # noqa: E501

        :param group_by_task: The group_by_task of this WeeklyExportPDFPost.  # noqa: E501
        :type: bool
        """

        self._group_by_task = group_by_task

    @property
    def group_ids(self):
        """Gets the group_ids of this WeeklyExportPDFPost.  # noqa: E501

        Group IDs, optional, filtering attribute.  # noqa: E501

        :return: The group_ids of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: list[int]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this WeeklyExportPDFPost.

        Group IDs, optional, filtering attribute.  # noqa: E501

        :param group_ids: The group_ids of this WeeklyExportPDFPost.  # noqa: E501
        :type: list[int]
        """

        self._group_ids = group_ids

    @property
    def grouping(self):
        """Gets the grouping of this WeeklyExportPDFPost.  # noqa: E501

        Grouping option, optional.  # noqa: E501

        :return: The grouping of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: str
        """
        return self._grouping

    @grouping.setter
    def grouping(self, grouping):
        """Sets the grouping of this WeeklyExportPDFPost.

        Grouping option, optional.  # noqa: E501

        :param grouping: The grouping of this WeeklyExportPDFPost.  # noqa: E501
        :type: str
        """

        self._grouping = grouping

    @property
    def max_duration_seconds(self):
        """Gets the max_duration_seconds of this WeeklyExportPDFPost.  # noqa: E501

        Max duration seconds, optional, filtering attribute. Time Audit only, should be greater than MinDurationSeconds.  # noqa: E501

        :return: The max_duration_seconds of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: int
        """
        return self._max_duration_seconds

    @max_duration_seconds.setter
    def max_duration_seconds(self, max_duration_seconds):
        """Sets the max_duration_seconds of this WeeklyExportPDFPost.

        Max duration seconds, optional, filtering attribute. Time Audit only, should be greater than MinDurationSeconds.  # noqa: E501

        :param max_duration_seconds: The max_duration_seconds of this WeeklyExportPDFPost.  # noqa: E501
        :type: int
        """

        self._max_duration_seconds = max_duration_seconds

    @property
    def min_duration_seconds(self):
        """Gets the min_duration_seconds of this WeeklyExportPDFPost.  # noqa: E501

        Min duration seconds, optional, filtering attribute. Time Audit only, should be less than MaxDurationSeconds.  # noqa: E501

        :return: The min_duration_seconds of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: int
        """
        return self._min_duration_seconds

    @min_duration_seconds.setter
    def min_duration_seconds(self, min_duration_seconds):
        """Sets the min_duration_seconds of this WeeklyExportPDFPost.

        Min duration seconds, optional, filtering attribute. Time Audit only, should be less than MaxDurationSeconds.  # noqa: E501

        :param min_duration_seconds: The min_duration_seconds of this WeeklyExportPDFPost.  # noqa: E501
        :type: int
        """

        self._min_duration_seconds = min_duration_seconds

    @property
    def posted_fields(self):
        """Gets the posted_fields of this WeeklyExportPDFPost.  # noqa: E501


        :return: The posted_fields of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: list[str]
        """
        return self._posted_fields

    @posted_fields.setter
    def posted_fields(self, posted_fields):
        """Sets the posted_fields of this WeeklyExportPDFPost.


        :param posted_fields: The posted_fields of this WeeklyExportPDFPost.  # noqa: E501
        :type: list[str]
        """

        self._posted_fields = posted_fields

    @property
    def project_ids(self):
        """Gets the project_ids of this WeeklyExportPDFPost.  # noqa: E501

        Project IDs, optional, filtering attribute. To filter records with no projects, use [null].  # noqa: E501

        :return: The project_ids of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: list[int]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids):
        """Sets the project_ids of this WeeklyExportPDFPost.

        Project IDs, optional, filtering attribute. To filter records with no projects, use [null].  # noqa: E501

        :param project_ids: The project_ids of this WeeklyExportPDFPost.  # noqa: E501
        :type: list[int]
        """

        self._project_ids = project_ids

    @property
    def rounding(self):
        """Gets the rounding of this WeeklyExportPDFPost.  # noqa: E501

        Whether time should be rounded, optional, default from workspace settings.  # noqa: E501

        :return: The rounding of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: int
        """
        return self._rounding

    @rounding.setter
    def rounding(self, rounding):
        """Sets the rounding of this WeeklyExportPDFPost.

        Whether time should be rounded, optional, default from workspace settings.  # noqa: E501

        :param rounding: The rounding of this WeeklyExportPDFPost.  # noqa: E501
        :type: int
        """

        self._rounding = rounding

    @property
    def rounding_minutes(self):
        """Gets the rounding_minutes of this WeeklyExportPDFPost.  # noqa: E501

        Rounding minutes value, optional, default from workspace settings. Should be 0, 1, 5, 6, 10, 12, 15, 30, 60 or 240.  # noqa: E501

        :return: The rounding_minutes of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: int
        """
        return self._rounding_minutes

    @rounding_minutes.setter
    def rounding_minutes(self, rounding_minutes):
        """Sets the rounding_minutes of this WeeklyExportPDFPost.

        Rounding minutes value, optional, default from workspace settings. Should be 0, 1, 5, 6, 10, 12, 15, 30, 60 or 240.  # noqa: E501

        :param rounding_minutes: The rounding_minutes of this WeeklyExportPDFPost.  # noqa: E501
        :type: int
        """

        self._rounding_minutes = rounding_minutes

    @property
    def start_time(self):
        """Gets the start_time of this WeeklyExportPDFPost.  # noqa: E501


        :return: The start_time of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this WeeklyExportPDFPost.


        :param start_time: The start_time of this WeeklyExportPDFPost.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def start_date(self):
        """Gets the start_date of this WeeklyExportPDFPost.  # noqa: E501

        Start date, example time.DateOnly. Should be less than End date.  # noqa: E501

        :return: The start_date of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this WeeklyExportPDFPost.

        Start date, example time.DateOnly. Should be less than End date.  # noqa: E501

        :param start_date: The start_date of this WeeklyExportPDFPost.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def tag_ids(self):
        """Gets the tag_ids of this WeeklyExportPDFPost.  # noqa: E501

        Tag IDs, optional, filtering attribute. To filter records with no tags, use [null].  # noqa: E501

        :return: The tag_ids of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this WeeklyExportPDFPost.

        Tag IDs, optional, filtering attribute. To filter records with no tags, use [null].  # noqa: E501

        :param tag_ids: The tag_ids of this WeeklyExportPDFPost.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def task_ids(self):
        """Gets the task_ids of this WeeklyExportPDFPost.  # noqa: E501

        Task IDs, optional, filtering attribute. To filter records with no tasks, use [null].  # noqa: E501

        :return: The task_ids of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: list[int]
        """
        return self._task_ids

    @task_ids.setter
    def task_ids(self, task_ids):
        """Sets the task_ids of this WeeklyExportPDFPost.

        Task IDs, optional, filtering attribute. To filter records with no tasks, use [null].  # noqa: E501

        :param task_ids: The task_ids of this WeeklyExportPDFPost.  # noqa: E501
        :type: list[int]
        """

        self._task_ids = task_ids

    @property
    def time_entry_ids(self):
        """Gets the time_entry_ids of this WeeklyExportPDFPost.  # noqa: E501

        TimeEntryIDs filters by time entries. This was added to support retro-compatibility with reports v2.  # noqa: E501

        :return: The time_entry_ids of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: list[int]
        """
        return self._time_entry_ids

    @time_entry_ids.setter
    def time_entry_ids(self, time_entry_ids):
        """Sets the time_entry_ids of this WeeklyExportPDFPost.

        TimeEntryIDs filters by time entries. This was added to support retro-compatibility with reports v2.  # noqa: E501

        :param time_entry_ids: The time_entry_ids of this WeeklyExportPDFPost.  # noqa: E501
        :type: list[int]
        """

        self._time_entry_ids = time_entry_ids

    @property
    def user_ids(self):
        """Gets the user_ids of this WeeklyExportPDFPost.  # noqa: E501

        User IDs, optional, filtering attribute.  # noqa: E501

        :return: The user_ids of this WeeklyExportPDFPost.  # noqa: E501
        :rtype: list[int]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this WeeklyExportPDFPost.

        User IDs, optional, filtering attribute.  # noqa: E501

        :param user_ids: The user_ids of this WeeklyExportPDFPost.  # noqa: E501
        :type: list[int]
        """

        self._user_ids = user_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(WeeklyExportPDFPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WeeklyExportPDFPost):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WeeklyExportPDFPost):
            return True

        return self.to_dict() != other.to_dict()
