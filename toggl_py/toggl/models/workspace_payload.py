"""
Public Toggl API. Note: We use BasicAuth in a specific way. By the standard you provide `Authentication` header with `base64(user_name:password)` as a `credential`. In our case it will be `base64(user_name:api_token)`.  # noqa: E501

This file is auto generated by the swagger code generator program.
Do not edit this file manually.

OpenAPI spec version: 9
Last changed: 2024-04-26T22:13:16.785Z
Generated by: https://github.com/compilerla/toggl-py/tree/main/codegen
"""

import pprint
import re  # noqa: F401

from toggl.configuration import Configuration


class WorkspacePayload:
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        "admins": "list[int]",
        "default_currency": "str",
        "default_hourly_rate": "float",
        "initial_pricing_plan": "int",
        "name": "str",
        "only_admins_may_create_projects": "bool",
        "only_admins_may_create_tags": "bool",
        "only_admins_see_billable_rates": "bool",
        "only_admins_see_team_dashboard": "bool",
        "projects_billable_by_default": "bool",
        "projects_private_by_default": "bool",
        "rate_change_mode": "str",
        "reports_collapse": "bool",
        "rounding": "int",
        "rounding_minutes": "int",
    }

    attribute_map = {
        "admins": "admins",
        "default_currency": "default_currency",
        "default_hourly_rate": "default_hourly_rate",
        "initial_pricing_plan": "initial_pricing_plan",
        "name": "name",
        "only_admins_may_create_projects": "only_admins_may_create_projects",
        "only_admins_may_create_tags": "only_admins_may_create_tags",
        "only_admins_see_billable_rates": "only_admins_see_billable_rates",
        "only_admins_see_team_dashboard": "only_admins_see_team_dashboard",
        "projects_billable_by_default": "projects_billable_by_default",
        "projects_private_by_default": "projects_private_by_default",
        "rate_change_mode": "rate_change_mode",
        "reports_collapse": "reports_collapse",
        "rounding": "rounding",
        "rounding_minutes": "rounding_minutes",
    }

    def __init__(
        self,
        admins=None,
        default_currency=None,
        default_hourly_rate=None,
        initial_pricing_plan=None,
        name=None,
        only_admins_may_create_projects=None,
        only_admins_may_create_tags=None,
        only_admins_see_billable_rates=None,
        only_admins_see_team_dashboard=None,
        projects_billable_by_default=None,
        projects_private_by_default=None,
        rate_change_mode=None,
        reports_collapse=None,
        rounding=None,
        rounding_minutes=None,
        _configuration=None,
    ):  # noqa: E501
        """WorkspacePayload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._admins = None
        self._default_currency = None
        self._default_hourly_rate = None
        self._initial_pricing_plan = None
        self._name = None
        self._only_admins_may_create_projects = None
        self._only_admins_may_create_tags = None
        self._only_admins_see_billable_rates = None
        self._only_admins_see_team_dashboard = None
        self._projects_billable_by_default = None
        self._projects_private_by_default = None
        self._rate_change_mode = None
        self._reports_collapse = None
        self._rounding = None
        self._rounding_minutes = None
        self.discriminator = None

        if admins is not None:
            self.admins = admins
        if default_currency is not None:
            self.default_currency = default_currency
        if default_hourly_rate is not None:
            self.default_hourly_rate = default_hourly_rate
        if initial_pricing_plan is not None:
            self.initial_pricing_plan = initial_pricing_plan
        if name is not None:
            self.name = name
        if only_admins_may_create_projects is not None:
            self.only_admins_may_create_projects = only_admins_may_create_projects
        if only_admins_may_create_tags is not None:
            self.only_admins_may_create_tags = only_admins_may_create_tags
        if only_admins_see_billable_rates is not None:
            self.only_admins_see_billable_rates = only_admins_see_billable_rates
        if only_admins_see_team_dashboard is not None:
            self.only_admins_see_team_dashboard = only_admins_see_team_dashboard
        if projects_billable_by_default is not None:
            self.projects_billable_by_default = projects_billable_by_default
        if projects_private_by_default is not None:
            self.projects_private_by_default = projects_private_by_default
        if rate_change_mode is not None:
            self.rate_change_mode = rate_change_mode
        if reports_collapse is not None:
            self.reports_collapse = reports_collapse
        if rounding is not None:
            self.rounding = rounding
        if rounding_minutes is not None:
            self.rounding_minutes = rounding_minutes

    @property
    def admins(self):
        """Gets the admins of this WorkspacePayload.  # noqa: E501

        List of admins, optional  # noqa: E501

        :return: The admins of this WorkspacePayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._admins

    @admins.setter
    def admins(self, admins):
        """Sets the admins of this WorkspacePayload.

        List of admins, optional  # noqa: E501

        :param admins: The admins of this WorkspacePayload.  # noqa: E501
        :type: list[int]
        """

        self._admins = admins

    @property
    def default_currency(self):
        """Gets the default_currency of this WorkspacePayload.  # noqa: E501

        Default currency, premium feature, optional, only for existing WS, will be 'USD' initially  # noqa: E501

        :return: The default_currency of this WorkspacePayload.  # noqa: E501
        :rtype: str
        """
        return self._default_currency

    @default_currency.setter
    def default_currency(self, default_currency):
        """Sets the default_currency of this WorkspacePayload.

        Default currency, premium feature, optional, only for existing WS, will be 'USD' initially  # noqa: E501

        :param default_currency: The default_currency of this WorkspacePayload.  # noqa: E501
        :type: str
        """

        self._default_currency = default_currency

    @property
    def default_hourly_rate(self):
        """Gets the default_hourly_rate of this WorkspacePayload.  # noqa: E501

        The default hourly rate, premium feature, optional, only for existing WS, will be 0.0 initially  # noqa: E501

        :return: The default_hourly_rate of this WorkspacePayload.  # noqa: E501
        :rtype: float
        """
        return self._default_hourly_rate

    @default_hourly_rate.setter
    def default_hourly_rate(self, default_hourly_rate):
        """Sets the default_hourly_rate of this WorkspacePayload.

        The default hourly rate, premium feature, optional, only for existing WS, will be 0.0 initially  # noqa: E501

        :param default_hourly_rate: The default_hourly_rate of this WorkspacePayload.  # noqa: E501
        :type: float
        """

        self._default_hourly_rate = default_hourly_rate

    @property
    def initial_pricing_plan(self):
        """Gets the initial_pricing_plan of this WorkspacePayload.  # noqa: E501

        The subscription plan for the workspace, deprecated  # noqa: E501

        :return: The initial_pricing_plan of this WorkspacePayload.  # noqa: E501
        :rtype: int
        """
        return self._initial_pricing_plan

    @initial_pricing_plan.setter
    def initial_pricing_plan(self, initial_pricing_plan):
        """Sets the initial_pricing_plan of this WorkspacePayload.

        The subscription plan for the workspace, deprecated  # noqa: E501

        :param initial_pricing_plan: The initial_pricing_plan of this WorkspacePayload.  # noqa: E501
        :type: int
        """

        self._initial_pricing_plan = initial_pricing_plan

    @property
    def name(self):
        """Gets the name of this WorkspacePayload.  # noqa: E501

        Workspace name  # noqa: E501

        :return: The name of this WorkspacePayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkspacePayload.

        Workspace name  # noqa: E501

        :param name: The name of this WorkspacePayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def only_admins_may_create_projects(self):
        """Gets the only_admins_may_create_projects of this WorkspacePayload.  # noqa: E501

        Only admins will be able to create projects, optional, only for existing WS, will be false initially  # noqa: E501

        :return: The only_admins_may_create_projects of this WorkspacePayload.  # noqa: E501
        :rtype: bool
        """
        return self._only_admins_may_create_projects

    @only_admins_may_create_projects.setter
    def only_admins_may_create_projects(self, only_admins_may_create_projects):
        """Sets the only_admins_may_create_projects of this WorkspacePayload.

        Only admins will be able to create projects, optional, only for existing WS, will be false initially  # noqa: E501

        :param only_admins_may_create_projects: The only_admins_may_create_projects of this WorkspacePayload.  # noqa: E501
        :type: bool
        """

        self._only_admins_may_create_projects = only_admins_may_create_projects

    @property
    def only_admins_may_create_tags(self):
        """Gets the only_admins_may_create_tags of this WorkspacePayload.  # noqa: E501

        Only admins will be able to create tags, optional, only for existing WS, will be false initially  # noqa: E501

        :return: The only_admins_may_create_tags of this WorkspacePayload.  # noqa: E501
        :rtype: bool
        """
        return self._only_admins_may_create_tags

    @only_admins_may_create_tags.setter
    def only_admins_may_create_tags(self, only_admins_may_create_tags):
        """Sets the only_admins_may_create_tags of this WorkspacePayload.

        Only admins will be able to create tags, optional, only for existing WS, will be false initially  # noqa: E501

        :param only_admins_may_create_tags: The only_admins_may_create_tags of this WorkspacePayload.  # noqa: E501
        :type: bool
        """

        self._only_admins_may_create_tags = only_admins_may_create_tags

    @property
    def only_admins_see_billable_rates(self):
        """Gets the only_admins_see_billable_rates of this WorkspacePayload.  # noqa: E501

        Whether only admins will be able to see billable rates, premium feature, optional, only for existing WS. Will be false initially  # noqa: E501

        :return: The only_admins_see_billable_rates of this WorkspacePayload.  # noqa: E501
        :rtype: bool
        """
        return self._only_admins_see_billable_rates

    @only_admins_see_billable_rates.setter
    def only_admins_see_billable_rates(self, only_admins_see_billable_rates):
        """Sets the only_admins_see_billable_rates of this WorkspacePayload.

        Whether only admins will be able to see billable rates, premium feature, optional, only for existing WS. Will be false initially  # noqa: E501

        :param only_admins_see_billable_rates: The only_admins_see_billable_rates of this WorkspacePayload.  # noqa: E501
        :type: bool
        """

        self._only_admins_see_billable_rates = only_admins_see_billable_rates

    @property
    def only_admins_see_team_dashboard(self):
        """Gets the only_admins_see_team_dashboard of this WorkspacePayload.  # noqa: E501

        Only admins will be able to see the team dashboard, optional, only for existing WS, will be false initially  # noqa: E501

        :return: The only_admins_see_team_dashboard of this WorkspacePayload.  # noqa: E501
        :rtype: bool
        """
        return self._only_admins_see_team_dashboard

    @only_admins_see_team_dashboard.setter
    def only_admins_see_team_dashboard(self, only_admins_see_team_dashboard):
        """Sets the only_admins_see_team_dashboard of this WorkspacePayload.

        Only admins will be able to see the team dashboard, optional, only for existing WS, will be false initially  # noqa: E501

        :param only_admins_see_team_dashboard: The only_admins_see_team_dashboard of this WorkspacePayload.  # noqa: E501
        :type: bool
        """

        self._only_admins_see_team_dashboard = only_admins_see_team_dashboard

    @property
    def projects_billable_by_default(self):
        """Gets the projects_billable_by_default of this WorkspacePayload.  # noqa: E501

        Whether projects will be set as billable by default, premium feature, optional, only for existing WS. Will be true initially  # noqa: E501

        :return: The projects_billable_by_default of this WorkspacePayload.  # noqa: E501
        :rtype: bool
        """
        return self._projects_billable_by_default

    @projects_billable_by_default.setter
    def projects_billable_by_default(self, projects_billable_by_default):
        """Sets the projects_billable_by_default of this WorkspacePayload.

        Whether projects will be set as billable by default, premium feature, optional, only for existing WS. Will be true initially  # noqa: E501

        :param projects_billable_by_default: The projects_billable_by_default of this WorkspacePayload.  # noqa: E501
        :type: bool
        """

        self._projects_billable_by_default = projects_billable_by_default

    @property
    def projects_private_by_default(self):
        """Gets the projects_private_by_default of this WorkspacePayload.  # noqa: E501

        Whether projects will be set to private by default, optional. Will be true initially.  # noqa: E501

        :return: The projects_private_by_default of this WorkspacePayload.  # noqa: E501
        :rtype: bool
        """
        return self._projects_private_by_default

    @projects_private_by_default.setter
    def projects_private_by_default(self, projects_private_by_default):
        """Sets the projects_private_by_default of this WorkspacePayload.

        Whether projects will be set to private by default, optional. Will be true initially.  # noqa: E501

        :param projects_private_by_default: The projects_private_by_default of this WorkspacePayload.  # noqa: E501
        :type: bool
        """

        self._projects_private_by_default = projects_private_by_default

    @property
    def rate_change_mode(self):
        """Gets the rate_change_mode of this WorkspacePayload.  # noqa: E501

        The rate change mode, premium feature, optional, only for existing WS. Can be \"start-today\", \"override-current\", \"override-all\"  # noqa: E501

        :return: The rate_change_mode of this WorkspacePayload.  # noqa: E501
        :rtype: str
        """
        return self._rate_change_mode

    @rate_change_mode.setter
    def rate_change_mode(self, rate_change_mode):
        """Sets the rate_change_mode of this WorkspacePayload.

        The rate change mode, premium feature, optional, only for existing WS. Can be \"start-today\", \"override-current\", \"override-all\"  # noqa: E501

        :param rate_change_mode: The rate_change_mode of this WorkspacePayload.  # noqa: E501
        :type: str
        """

        self._rate_change_mode = rate_change_mode

    @property
    def reports_collapse(self):
        """Gets the reports_collapse of this WorkspacePayload.  # noqa: E501

        Whether reports should be collapsed by default, optional, only for existing WS, will be true initially  # noqa: E501

        :return: The reports_collapse of this WorkspacePayload.  # noqa: E501
        :rtype: bool
        """
        return self._reports_collapse

    @reports_collapse.setter
    def reports_collapse(self, reports_collapse):
        """Sets the reports_collapse of this WorkspacePayload.

        Whether reports should be collapsed by default, optional, only for existing WS, will be true initially  # noqa: E501

        :param reports_collapse: The reports_collapse of this WorkspacePayload.  # noqa: E501
        :type: bool
        """

        self._reports_collapse = reports_collapse

    @property
    def rounding(self):
        """Gets the rounding of this WorkspacePayload.  # noqa: E501

        Default rounding, premium feature, optional, only for existing WS  # noqa: E501

        :return: The rounding of this WorkspacePayload.  # noqa: E501
        :rtype: int
        """
        return self._rounding

    @rounding.setter
    def rounding(self, rounding):
        """Sets the rounding of this WorkspacePayload.

        Default rounding, premium feature, optional, only for existing WS  # noqa: E501

        :param rounding: The rounding of this WorkspacePayload.  # noqa: E501
        :type: int
        """

        self._rounding = rounding

    @property
    def rounding_minutes(self):
        """Gets the rounding_minutes of this WorkspacePayload.  # noqa: E501

        Default rounding in minutes, premium feature, optional, only for existing WS  # noqa: E501

        :return: The rounding_minutes of this WorkspacePayload.  # noqa: E501
        :rtype: int
        """
        return self._rounding_minutes

    @rounding_minutes.setter
    def rounding_minutes(self, rounding_minutes):
        """Sets the rounding_minutes of this WorkspacePayload.

        Default rounding in minutes, premium feature, optional, only for existing WS  # noqa: E501

        :param rounding_minutes: The rounding_minutes of this WorkspacePayload.  # noqa: E501
        :type: int
        """

        self._rounding_minutes = rounding_minutes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item, value.items())
                )
            else:
                result[attr] = value
        if issubclass(WorkspacePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkspacePayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkspacePayload):
            return True

        return self.to_dict() != other.to_dict()
